[[Client–server model]]

CATEGORIES: Application layer protocols, Clients (computing), Inter-process communication, Servers (computing), Network architecture

The client–server model of computing is a distributed application structure that partitions tasks or workloads between the providers of a resource or service, called servers, and service requesters, called clients.[tpl]cite web|url=http://java.sun.com/developer/Books/jdbc/ch07.pdf|publisher=Sun Microsystem|title=Distributed Application Architecture|accessdate=2009-06-16[/tpl] Often clients and servers communicate over a computer network on separate hardware, but both client and server may reside in the same system. A server host  runs one or more server programs which share their resources with clients. A client does not share any of its resources, but requests a server's content or service function. Clients therefore initiate communication sessions with servers which await incoming requests.
Examples of computer applications that use the client–server model are Email, network printing, and the World Wide Web.

==Client and server roles==

The client–server characteristic describes the relationship of cooperating programs in an application. The server component provides a function or service to one or many clients, which initiate requests for such services.
Servers are classified by the services they provide. For instance, a web server serves web pages and a file server serves computer files.  A shared resource may be any of the server computer's software and electronic components, from programs and data to processors and storage devices. The sharing of resources of a server constitute a service.
Whether a computer is a client, a server, or both, is determined by the nature of the application that requires the service functions. For example, a single computer can run web server and file server software at the same time to serve different data to clients making different kinds of requests. Client software can also communicate with server software within the same computer.The X Window System is one example. Communication between servers, such as to synchronize data, is sometimes called inter-server or server-to-server communication.

==Client and server communication==

In general, a service is an abstraction of computer resources and a client does not have to be concerned with how the server performs while fulfilling the request and delivering the response. The client only has to understand the response based on the well-known application protocol, i.e. the content and the formatting of the data for the requested service.
Clients and servers exchange messages in a request-response messaging pattern: The client sends a request, and the server returns a response. This exchange of messages is an example of inter-process communication. To communicate, the computers must have a common language, and they must follow rules so that both the client and the server know what to expect. The language and rules of communication are defined in a communications protocol. All client-server protocols operate in the application layer. The application-layer protocol defines the basic patterns of the dialogue. To formalize the data exchange even further, the server may implement an API (such as a web service).[tpl]Cite doi/10.1109.2FMIC.2004.1260703[/tpl] The API is an abstraction layer for such resources as databases and custom software. By restricting communication to a specific content format, it facilitates parsing. By abstracting access, it facilitates cross-platform data exchange.[tpl]Cite doi/10.1504.2FIJWGS.2005.007545[/tpl]
A server may receive requests from many different clients in a very short period of time. Because the computer can perform a limited number of tasks at any moment, it relies on a scheduling system to prioritize incoming requests from clients in order to accommodate them all in turn. To prevent abuse and maximize uptime, the server's software limits how a client can use the server's resources. Even so, a server is not immune from abuse. A denial of service attack exploits a server's obligation to process requests by bombarding it with requests incessantly. This inhibits the server's ability to responding to legitimate requests.

==Example==

When a bank customer accesses online banking services with a web browser (the client), they initiate a request to the bank's web server. Since the customer's login credentials are stored in a database, the web server runs a program to access a database server. This database server may, in turn, fetch financial transaction records from another database server. An application server interprets the returned data by following the bank's business logic, and provides the output to the web server. Finally, the web server sends the result to the web browser, which interprets the data.
Each server listed above acts as a client when it submits data in a request to another server for processing. In each step of this sequence of client–server message exchanges, a computer processes a request and returns data. This is the request-response messaging pattern. When all the requests are met, the sequence is complete and the web browser presents the data to the customer.
This example illustrates a design pattern applicable to the client–server model: separation of concerns.

==Early history==

While formulating the client–server model in the 1960s and 1970s, computer scientists at Xerox and Xerox PARC used the terms server-host (or serving host) and user-host (or using-host).[tpl]cite IETF |title=DEL |rfc=5 |last=Rulifson |first=Jeff |authorlink=Jeff Rulifson |year=1969 |month=June |publisher=IETF |accessdate=30 November 2013[/tpl][tpl]cite IETF |title=Network Timetable |rfc=4 |last=Shapiro |first=Elmer B. |year=1969 |month=March |publisher=IETF |accessdate=30 November 2013[/tpl]
One context in which researchers used these terms was in the design of a computer network programming language called Decode-Encode Language (DEL). The purpose of this language was to accept commands from one computer (the user-host), which would return status reports to the user as it encoded the commands in network packets. Another DEL-capable computer, the server-host, received the packets, decoded them, and returned formatted data to the user-host. A DEL program on the user-host received the results to present to the user. This is a client–server transaction. Development of DEL was just beginning in 1969, the year that the United States Department of Defense established ARPANET (predecessor of Internet).

===Client-host and server-host===

Client-host and server-host have subtly different meanings than client and server. A host is any computer connected to a network. Whereas the words server and client may refer either to a computer or to a computer program, server-host and user-host always refer to computers. The host is a versatile, multifunction computer; clients and servers are just programs that run on a host. In the client–server model, a server is more likely to be devoted to the task of serving.
An early use of the word client occurs in "Separating Data from Function in a Distributed File System", a 1978 paper by Xerox PARC computer scientists Howard Sturgis, James Mitchell, and Jay Israel. The authors are careful to define the term for readers, and explain that they use it to distinguish between the user and the user's network node (the client).[tpl]Cite journal |last = Sturgis |first = Howard E. |last2 = Mitchell |first2 = James George |last3 = Israel | first3 = Jay E. |chapter = Separating Data from Function in a Distributed File System |journal= |publisher=Xerox PARC |chapterurl=http://ip.com/IPCOM/000128883 |year = 1978[/tpl] (By 1992, the word server had entered into general parlance.)[tpl]OEtymD|server|accessdate=30 November 2013[/tpl][tpl]cite web |url=https://getinfo.de/app/Separating-data-from-function-in-a-distributed/id/TIBKAT%3A509976956 |title=Separating data from function in a distributed file system |author= |website=GetInfo |publisher=German National Library of Science and Technology |accessdate=29 November 2013[/tpl]

==Centralized computing==

The client–server model does not dictate that server-hosts must have more resources than client-hosts. Rather, it enables any general-purpose computer to extend its capabilities by using the shared resources of other hosts. Centralized computing, however, specifically allocates a large amount of resources to a small number of computers. The more computation is offloaded from client-hosts to the central computers, the simpler the client-hosts can be.[tpl]cite journal |last = Nieh |first = Jason |last2 = Novik |first2 = Naomi |last3 = Yang |first3 = S. Jae |title = A Comparison of Thin-Client Computing Architectures |journal = Technical Report CUCS-022-00 |publisher = Network Computing Laboratory, Columbia University |location = New York |date = December 2005 |url = http://www.nomachine.com/documentation/pdf/cucs-022-00.pdf |format=PDF |accessdate = 30 November 2013[/tpl]
A thin client has few resources other than input devices and output devices.[tpl]Cite journal |last = Tolia |first = Niraj |last2 = Andersen |first2 = David G. |last3 = Satyanarayanan |first3 = M. |title = Quantifying Interactive User Experience on Thin Clients |journal = Computer |volume = 39 |number = 3 |date = March 2006 |publisher = IEEE Computer Society |url = http://www.cs.cmu.edu/~dga/papers/tolia06-ieee.pdf |format=PDF[/tpl] It relies heavily on network resources (servers and infrastructure) for computation and storage. A diskless node loads even its operating system from the network, and a computer terminal has no operating system at all; it is only an input/output interface to the server. In contrast, a fat client, such as a personal computer, has many resources, and does not rely on a server for essential functions.
As microcomputers decreased in price and increased in power from the 1980s to the late 1990s, many organizations transitioned computation from centralized servers, such as mainframes and minicomputers, to fat clients.[tpl]Cite doi/10.1145.2F800041.801417[/tpl] This afforded greater, more individualized dominion over computer resources, but complicated information technology management.[tpl]cite web |url=http://sqlmag.com/cloud/cloud-really-just-return-mainframe-computing |title=Is the Cloud Really Just the Return of Mainframe Computing? |last=Otey |first=Michael |date=22 March 2011 |website=SQL Server Pro |publisher=Penton Media |accessdate=1 December 2013[/tpl] During the 2000s, web applications matured enough to rival application software developed for a specific microarchitecture. This maturation, more affordable mass storage, and the advent of service-oriented architecture were among the factors that gave rise to the cloud computing trend of the 2010s.[tpl]Cite doi/10.1109.2FMITP.2006.123[/tpl]

==Comparison with peer-to-peer architecture==

In addition to the client-server model, distributed computing applications often use the peer-to-peer application architecture.
In the client–server model, the server is often designed to be a centralized system that serves many clients. The computing power, memory and storage requirements of a server must be scaled appropriately to the expected work load, i.e. the number of clients connecting simultaneously. Load balancing and failover systems are often employed to scale the server implementation.
In a peer-to-peer (P2P) network, two or more computers (peers) pool their resources and communicate in a decentralized system. Peers are coequal, or equipotent nodes in a non-hierarchical network. Unlike clients in a client–server or client–queue–client network, peers communicate with each other directly.[tpl]Cite doi/10.3923.2Fjas.2013.700.707[/tpl] In peer-to-peer networking, an algorithm in the peer-to-peer communications protocol balances load, and even peers with modest resources can help to share the load. If a node becomes unavailable, its shared resources remain available as long as other peers offers it. Ideally, a peer does not need to achieve high availability because other, redundant peers make up for any resource downtime; as the availability and load capacity of peers change, the protocol reroutes requests.

==See also==

==Notes==


