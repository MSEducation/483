[[Backus–Naur Form]]

CATEGORIES: Articles with inconsistent citation formats, Formal languages, Compiler construction

In computer science, BNF (Backus Normal Form or Backus–Naur Form) is one of the two[tpl]cite book | last = Grune |first = Dick |title = Parsing Techniques: A Practical Guide |publisher = Springer |location = US |year = 1999[/tpl] main notation techniques for context-free grammars, often used to describe the syntax of languages used in computing, such as computer programming languages, document formats, instruction sets and communication protocols; the other main technique for writing context-free grammars is the van Wijngaarden form. They are applied wherever exact descriptions of languages are needed: for instance, in official language specifications, in manuals, and in textbooks on programming language theory.
Many extensions and variants of the original Backus–Naur notation are used; some are exactly defined, including Extended Backus–Naur Form (EBNF) and Augmented Backus–Naur Form (ABNF).
Though  the Backus Normal Form was discovered independently by John Backus, Pāṇini the grammarian from India who lived sometime between 4th and 7th century BCE presented a notation which is equivalent in its power to that of Backus and has many similar properties. [tpl]cite web|url=http://www-gap.dcs.st-and.ac.uk/~history/Biographies/Panini.html |title=Panini biography |publisher=School of Mathematics and Statistics, University of St Andrews, Scotland |date= |accessdate=2014-03-22[/tpl]

==History==

The idea of describing the structure of language with rewriting rules can be traced back to at least the work of Pāṇini (about the 4th century BC), who used it in his description of Sanskrit word structure.  American linguists such as Leonard Bloomfield and Zellig Harris took this idea a step further by attempting to formalize language and its study in terms of formal definitions and procedures (around 1920–60).
Meanwhile, string rewriting rules as formal, abstract systems were introduced and studied by mathematicians such as Axel Thue (in 1914), Emil Post (1920s–40s) and Alan Turing (1936).  Noam Chomsky, teaching linguistics to students of information theory at MIT, combined linguistics and mathematics, by taking what is essentially Thue's formalism as the basis for the description of the syntax of natural language; he also introduced a clear distinction between generative rules (those of context-free grammars) and transformation rules (1956).[tpl]cite book |last = Chomsky |first = Noam |title = Syntactic Structures |publisher = Mouton | location = The Hague |year = 1957[/tpl]
John Backus, a programming language designer at IBM, proposed "metalinguistic formulas"
to describe the syntax of the new programming language IAL, known today as ALGOL 58 (1959),
using the BNF notation.
Further development of ALGOL led to ALGOL 60; in its report (1963), Peter Naur named Backus's notation Backus Normal Form, and simplified it to minimize the character set used.
However, Donald Knuth argued that BNF should rather be read as Backus–Naur Form, as it is
"not a normal form in the conventional sense",
unlike, for instance, Chomsky Normal Form.  The name Pāṇini Backus form has also been suggested in view of the facts that the expansion Backus Normal Form may not be accurate, and that Pāṇini had independently discovered a similar notation earlier.

==Introduction==

A BNF specification is a set of derivation rules, written as
where  is a nonterminal, and the  consists of one or more sequences of symbols; more sequences are separated by the vertical bar, '|', indicating a choice, the whole being a possible substitution for the symbol on the left. Symbols that never appear on a left side are terminals. On the other hand, symbols that appear on a left side are non-terminals and are always enclosed between the pair .
The '::=' means that the symbol on the left must be replaced with the expression on the right.

==Example==

As an example, consider this possible BNF for a U.S. postal address:
This translates into English as: 
Note that many things (such as the format of a first-name, apartment specifier, ZIP-code, and Roman numeral) are left unspecified here. If necessary, they may be described using additional BNF rules.

==Further examples==

BNF's syntax itself may be represented with a BNF like the following:
Note that "" is empty string, i.e. no whitespace.
The original BNF did not use quotes as shown in  rule.
This assumes that no whitespace is necessary for proper interpretation of the rule.  represents the appropriate line-end specifier (in ASCII, carriage-return and/or line-feed, depending on the operating system).  and  are to be substituted with a declared rule's name/label or literal text, respectively.
In the U.S. postal address example above, the entire block-quote is a syntax.  Each line or unbroken grouping of lines is a rule; for example one rule begins with " ::=".  The other part of that rule (aside from a line-end) is an expression, which consists of two lists separated by a pipe "|".  These two lists consists of some terms (three terms and two terms, respectively).  Each term in this particular rule is a rule-name.

==Variants==

There are many variants and extensions of BNF, generally either for the sake of simplicity and succinctness, or to adapt it to a specific application. One common feature of many variants is the use of regular expression repetition operators such as * and +. The Extended Backus–Naur Form (EBNF) is a common one. In fact the example above is not the pure form invented for the ALGOL 60 report.  The bracket notation "" was introduced a few years later in IBM's PL/I definition but is now universally recognised. ABNF and RBNF are other extensions commonly used to describe Internet Engineering Task Force (IETF) protocols.
Parsing expression grammars build on the BNF and regular expression notations to form an alternative class of formal grammar, which is essentially analytic rather than generative in character.
Many BNF specifications found online today are intended to be human readable and are non-formal.  These often include many of the following syntax rules and extensions:

==See also==

===Software using BNF===

==References==

==External links==

===Language grammars===


