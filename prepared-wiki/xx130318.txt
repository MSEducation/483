[[Qooxdoo]]

CATEGORIES: JavaScript libraries, Ajax (programming), Rich Internet application frameworks

qooxdoo [tpl]IPAc-en|ˈ|k|u:|k|s|d|uː[/tpl] is an open source Ajax web application framework. It is an LGPL- and/or EPL-licensed multipurpose framework that includes support for professional JavaScript development, a graphical user interface (GUI) toolkit and high-level client-server communication.

==Framework==

qooxdoo is entirely class-based, tries to leverage the features of object-oriented JavaScript and is based on namespaces. Most modern browsers are supported, including Gecko (Firefox, Mozilla, SeaMonkey), Presto (Opera), Trident (Internet Explorer, RealPlayer, Winamp), WebKit (Chrome, Safari).[tpl]cite web| url=http://manual.qooxdoo.org/1.3.x/pages/getting_started/requirements.html | title=qooxdoo Requirements | accessdate=February 2011[/tpl] It includes an API reference that is auto-generated from Javadoc-like comments. Among the accompanying tool set is a comprehensive JavaScript parser that is an integral part of the automatic build process and is used to optimize, compress, link and deploy custom applications, and generate documentation. Internationalization and localization of applications are supported. qooxdoo can be downloaded[tpl]cite web | url=http://qooxdoo.org/download | title=qooxdoo Download page | accessdate=February 2011[/tpl] as a comprehensive SDK.

==GUI toolkit==

Despite being a pure JavaScript framework, qooxdoo is quite on par with GUI toolkits like Qt, Standard Widget Toolkit (SWT) and others with respect to implementing user interfaces. It offers a rich set of widgets that resemble elements of native desktop applications. Built-in support for keyboard navigation, focus and tab handling and drag & drop is provided. Dimensions can be specified as static, auto-sizing, stretching, percentage, weighted flex or min/max or even as combinations of these. All widgets are based on flexible layout managers, which are instrumental to many advanced layout abilities. Interface description is done programmatically in JavaScript for enhanced performance.
Defining the user interface needs no HTML, and styling the interface needs no Cascading Style Sheets (CSS). Simple appearance themes are used to style colors, icons and other visual properties; they also support runtime switching..

==Object-oriented programming==

qooxdoo uses a closed form to define new classes. The global class constructor takes two arguments, the name of the new class and a map that provides values for a set of predefined keys, like 'construct' (the constructor method hook), 'statics' (for static class attributes and methods), 'members' (for instance attributes and methods) and 'destruct' (for the destructor). This (possibly large) map represents the class definition. Classes can be derived from other classes using the 'extend' keyword.
The following application skeleton gives an impression of how that works. The code will create a small application with a button that features a tooltip and opens an alert box when pressed. You can also run and edit this code in an online Playground:[tpl]cite web| url=http://playground.qooxdoo.org | title=Playground | accessdate=February 2011[/tpl]
Interfaces and mixins are defined and used in a similar fashion.

==Ajax==

While being a client-side and server-agnostic solution, the qooxdoo project does include optional RPC server implementations (currently in Java, PHP, Perl and Python) to demonstrate client-server communication. An abstract transport layer supports queues, timeouts and implementations via XMLHttpRequest, Iframes and Scripts. Like the rest of qooxdoo, this layer relies on event-based programming to simplify asynchronous communication.

==See also==

==References==

==External links==


