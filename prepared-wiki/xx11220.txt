[[Software crisis]]

CATEGORIES: Software quality, History of software

Software crisis was a term used in the early days of computing science.[tpl]cite web|url=http://www.chris-kimble.com/Courses/World_Med_MBA/Software_Crisis.html|title=The Software Crisis|work=Euromed Marseille School of Management, World Med MBA Program - Information Systems and Strategy Course[/tpl]   The term was used to describe the impact of rapid increases in computer power and the complexity of the problems that could be tackled. In essence, it refers to the difficulty of writing correct, understandable, and verifiable computer programs. The roots of the software crisis are complexity, expectations, and change.
With the increase in the complexity of the software, many software problem arose because existing methods were neither sufficient nor up to the mark.
The term "software crisis" was coined by some attendees at the first NATO Software Engineering Conference in 1968 at Garmisch, Germany.Report about the NATO Software Engineering Conference dealing with the software crisis An early use of the term is in Edsger Dijkstra's 1972 ACM Turing Award Lecture:E. W. Dijkstra Archive
The causes of the software crisis were linked to the overall complexity of hardware and the software development process. The crisis manifested itself in several ways:
Many of the software problems were caused by increasingly complex hardware. In his essay, Dijkstra noted that the newer computers in his day "embodied such serious flaws that he felt that with a single stroke the progress of computing science had been retarded by at least ten years". He also believed that the influence of hardware on software was too frequently overlooked.
Various processes and methodologies have been developed over the last few decades to improve software quality management, with varying degrees of success. The most successful pattern was the introduction of object-oriented programming, which solved many software development problems and enabled the programmers to handle more complex code a lot easier, especially through encapsulation and inheritance. However, it is widely agreed [tpl]Says who|date=March 2011[/tpl] that there is no "silver bullet" â€• that is, no single approach that will prevent project overruns and failures in all cases. In general, software projects that are large, complicated, poorly-specified, and involve unfamiliar aspects, are still particularly vulnerable to large, unanticipated problems.

==See also==

==References==

==External links==


