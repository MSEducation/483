[[Random access]]

CATEGORIES: Computer data

In computer science, random access (more precisely and more generally called direct access) is the ability to access an item of data at any given coordinates in a population of addressable elements. As a rule the assumption is that each element can be accessed roughly as easily and efficiently as any other, no matter how many elements may be in the set, nor how many coordinates may be available for addressing the data. For example, data might be stored notionally in a single sequence like a row, in two dimensions like rows and columns on a surface, or in multiple dimensions. However, given all the coordinates, a program can access each record about as quickly and easily as any other, and in particular, access it in time to be of value to the user. In this sense the choice of data item is arbitrary in the sense that no matter which item is sought, all that is needed to find it, is its address, that is to say, the coordinates at which it is located, such as its row and column (or its track and record number on a magnetic drum). At first the term "random access" was used because the process had to be capable of finding records no matter in which sequence they were required.[tpl]cite book|author=National Computer Conference and Exposition|title=Proceedings|url=http://books.google.com/books?id=lQQrAQAAIAAJ|accessdate=2 October 2013|year=1957[/tpl] However,soon the term "direct access" gained favour because one could directly retrieve a record, no matter what its position might be.[tpl]cite book|author=International Business Machines Corporation. Data Processing Division|title=Introduction to IBM Direct-access Storage Devices and Organization Methods|url=http://books.google.com/books?id=i6vWAAAAMAAJ&pg=SA3-PA24|accessdate=2 October 2013|year=1966|publisher=International Business Machines Corporation|pages=3â€“[/tpl] The operative attribute however is that the device can access any required record immediately on demand. The opposite is sequential access, where a remote element takes longer time to access.http://technet.microsoft.com/en-us/library/cc938619.aspx
A typical illustration of this distinction is to compare an ancient scroll (sequential; all material prior to the data needed must be unrolled) and the book (direct: can be immediately flipped open to any arbitrary page). A more modern example is a cassette tape (sequential&mdash;one must fast forward through earlier songs to get to later ones) and a CD (direct access&mdash;one can skip to the track wanted, knowing that that would be the one retrieved).
In data structures, direct access implies the ability to access any entry in a list in constant (independent of its position in the list and of list's size, i.e. O(1) time. Very few data structures can guarantee this, other than arrays (and related structures like dynamic arrays). Direct access is required, or at least valuable, in many algorithms such as binary search, integer sorting or certain versions of sieve of Eratosthenes.[tpl]cite book|author=D. E. KNUTH|title=The Art of Computer Programming. Vol. 3. Sorting and Searching|url=http://books.google.com/books?id=ZQu9mgEACAAJ|accessdate=2 October 2013|year=1969|publisher=Addison-Wesley|isbn=978-0-201-03803-3[/tpl]
Other data structures, such as linked lists, sacrifice direct access to permit efficient inserts, deletes, or reordering of data. Self-balancing binary search trees may provide an acceptable compromise, where access time is equal for any member of a collection and only grows logarithmically with its size.

==References==

==See also==


