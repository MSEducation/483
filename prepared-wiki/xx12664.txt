[[Zilog Z80]]

CATEGORIES: Zilog microprocessors, Z80, Sharp Corporation products, NEC microprocessors

The Zilog Z80 (US: "zee-eighty", UK: "zed-eighty") is an 8-bit microprocessor designed by Zilog and sold from July 1976 onwards. It was widely used both in desktop and embedded computer designs as well as for military purposes. The Z80 and its derivatives and clones made up one of the most commonly used CPU families of all time, and, along with the MOS Technology 6502 family, dominated the 8-bit microcomputer market from the late 1970s to the mid-1980s.[tpl]cite book | title = The Seybold report on professional computing | publisher = Seybold Publications | year = 1983 | quote = In the 8-bit world, the two most popular microcomputers are the Z80 and 6502 computer chips. [/tpl]
Zilog licensed the Z80 design to several vendors, though many East European (for instance, Russian) manufacturers made unlicensed copies. This enabled a small company's product to gain acceptance in the world market since second sources from far larger companies such as Toshiba started to manufacture the device. Consequently, Zilog has made less than 50% of the Z80s since its conception. In recent decades Zilog has refocused on the ever-growing market for embedded systems (for which the original Z80 and the Z180 were designed) and the most recent Z80-compatible microcontroller family, the fully pipelined 24-bit eZ80 with a linear 16 MB address range, has been successfully introduced alongside the simpler Z180 and Z80 products.

==Brief history and overview==

The Z80 came about when Federico Faggin, after working on the 8080, left Intel at the end of 1974 to found Zilog with Ralph Ungermann, and by July 1976 they had the Z80 on the market.[tpl]harvnb|Anderson|1994|p=51 [/tpl] It was designed to be binary compatible with the Intel 8080[tpl]harvnb|Anderson|1994|p=57 [/tpl][tpl]cite book | title = The second information revolution | last = Brock | first = Gerald W. | publisher = Harvard University Press | year = 2003 | isbn = 978-0-674-01178-6 [/tpl] so that most 8080 code, notably the CP/M operating system, would run unmodified on it. Masatoshi Shima, co-designer of the 4004 and the 8080, also contributed to the development of the Z80.[tpl]cite journal | title=History of the 8-bit: travelling far in a short time | journal=InfoWorld | volume=4 | issue=47 | pages=pp. 58–60 | publisher=Popular Computing Inc. | location=Palo Alto, CA | date=November 29, 1982 | url=http://books.google.com/books?id=HjAEAAAAMBAJ&pg=PA58 | issn=0199-6649 [/tpl][tpl]cite journal | last=Shima | first=Masatoshi | authorlink=Masatoshi Shima | coauthors=Federico Faggin; Ralph Ungermann | title=Z-80 chip set heralds third microprocessor generation | journal=Electronics | volume=49 | issue=17 | pages=pp. 32–33 McGraw–Hill | location=New York | date=August 19, 1976 [/tpl]
The Z80 offered many improvements over the 8080:
The Z80 took over from the 8080 and its offspring, the 8085, in the processor market,[tpl]cite web | url = http://www.andreadrian.de/oldcpu/Z80_number_cruncher.html | title = Z80, the 8-bit Number Cruncher | last = Adrian | first = Andre [/tpl] and became one of the most popular 8-bit CPUs. Perhaps a key to the initial success of the Z80 was the built-in DRAM refresh, and other features which allowed systems to be built with fewer support chips (later on, most Z80 systems have been embedded systems, which typically uses static RAM and hence does not need this refresh).
For the original NMOS design, the specified upper clock frequency limit increased successively from the introductory 2.5 MHz, via the well known 4 MHz (Z80A), up to 6 (Z80B) and 8 MHz (Z80H).[tpl]cite book | title = Popular Computing | publisher = McGraw-Hill | year = 1983 | page = 15 [/tpl][tpl]cite journal | work = InfoWorld | last = Markoff| first=John | title = Zilog's speedy Z80 soups up 8-bit to 16-bit perfofrmance | publisher = InfoWorld Media Group | date = 18 October 1982 | page = 1 | issn = 0199-6649 [/tpl]
A CMOS version was also developed with specified frequency limits ranging from 4 MHz up to 20 MHz for the version sold today. The CMOS version also allowed a low-power sleep with internal state retained (having no lower frequency limit). The fully compatible derivatives HD64180/Z180[tpl]cite book | title = Electronic design | publisher = Hayden | year = 1988 | page = 142| quote = In addition to supporting the entire Z80 instruction set, the Z180 [/tpl][tpl]cite web | url = http://www.z80.info/z80lives.htm | title = The Z80 Lives! | last = Ganssle | first = Jack G. | year = 1992| quote = The designers picked an architecture compatible with the Z80, giving Z80 users a completely software compatible upgrade path. The 64180 processor runs every Z80 instruction exactly as a Z80 does [/tpl] and eZ80 are currently specified for up to 33 and 50 MHz respectively.

==Technical description==

===Programming model and register set===

The programming model and register set are conventional and similar to the related x86 family. The 8080 compatible registers AF, BC, DE, HL are duplicated as two separate banks in the Z80,[tpl]cite book | title = Kilobaud | publisher = 1001001 | year = 1977 | page = 22 [/tpl] where the processor can quickly switch from one bank to the other;[tpl]cite book | last = Zaks | first = Rodnay| title=Programming the Z80|edition=3rd | publisher = SYBEX | year = 1982 | isbn = 978-0-89588-069-7 | page = 62 [/tpl] a feature useful for speeding up responses to single-level, high-priority interrupts. This feature was present in the Datapoint 2200 but was not implemented by Intel in the 8008. The dual-register set makes sense as the Z80 (like most microprocessors at the time) was really intended for embedded use, not for personal computers, or the yet-to-be invented home computers. According to one of the designers, Masatoshi Shima, the market focus was on high performance printers, high-end cash registers, and intelligent terminals.[tpl]Citation needed|date=July 2011[/tpl] It also turned out to be quite useful for heavily optimized manual assembly coding. Some software, especially games for the MSX, Sinclair ZX Spectrum and other Z80 based computers, took Z80 assembly optimization to rather extreme levels, employing the duplicated registers among other things.

====Registers====

|}
As on the 8080, 8-bit registers are typically coupled to provide 16-bit versions. The 8080 compatible registers[tpl]cite book | page = 21 | isbn = 978-0-7506-5546-0 | author = Steve Heath. | year = 2003| publisher=Newnes | location = Oxford | title = Embedded systems design [/tpl] are:
The new registers introduced with the Z80 are:
There is no direct access to the alternate registers; instead, two special instructions, EX AF,AF' and EXX, each toggles one of two multiplexer flip-flops; this enables fast context switches for interrupt service routines: EX AF, AF' may be used alone (for really simple and fast interrupt routines) or together with EXX to swap the whole BC, DE, HL set; still much faster than pushing the same registers on the stack (slower, lower priority, or multi level interrupts normally use the stack to store registers).
The refresh register, R, increments each time the CPU fetches an opcode (or opcode prefix) and has therefore no simple relationship with program execution. This has sometimes been used to generate pseudorandom numbers in games, and also in software protection schemes.[tpl]Citation needed|date=February 2012[/tpl] It has also been employed as a "hardware" counter in some designs; a famous example of this is the ZX81, which lets it keep track of character positions on the TV screen by triggering an interrupt at wrap around (by connecting INT to A6).
The interrupt vector register, I, is used for the Z80 specific mode 2 interrupts (selected by the IM 2 instruction). It supplies the high byte of the base address for a 128-entry table of service routine addresses which are selected via an index sent to the CPU during an interrupt acknowledge cycle; this index is simply the low byte part of the pointer to the tabulated indirect address pointing to the service routine. The pointer identifies a particular peripheral chip and/or peripheral function or event, where the chips are normally connected in a so-called daisy chain for priority resolution. Like the refresh register, this register has also sometimes been used creatively; in interrupt modes 0 and 1 it can be used as simply another 8-bit data register.

===Z80 assembly language===

====Datapoint 2200 and Intel 8008====

The first Intel 8008 assembly language was based on a very simple (but systematic) syntax inherited from the Datapoint 2200 design. This original syntax was later transformed into a new, somewhat more traditional, assembly language form for this same original 8008 chip. At about the same time, the new assembly language was also extended to accommodate the added addressing possibilities in the more advanced Intel 8080 chip (the 8008 and 8080 shared a language subset without being binary compatible; however, the 8008 was binary compatible with the Datapoint 2200).
In this process, the mnemonic L, for LOAD, was replaced by various abbreviations of the words LOAD, STORE and MOVE, intermixed with other symbolic letters. The mnemonic letter M, for memory (referenced by HL), was lifted out from within the instruction mnemonic to become a syntactically freestanding operand, while registers and combinations of registers became very inconsistently denoted; either by abbreviated operands (MVI D, LXI H and so on), within the instruction mnemonic itself (LDA, LHLD and so on), or both at the same time (LDAX B, STAX D and so on).

====New syntax====

Because Intel had a copyright on their assembly mnemonics,[tpl]cite book| title = Intel Component Data Catalog 1978 | publisher = Intel Corporation| year = 1978 | location = Santa Clara, CA | pages = 11–17| chapter = 8080A/ 8-Bit N-Channel Microprocessor | quote = All mnemonics copyright Intel Corporation 1977 [/tpl] a new assembly syntax had to be developed. This time a more systematic approach was used:
These principles made it straightforward to find names and forms for all new Z80 instructions, as well as orthogonalizations of old ones, such as LD BC,(1234).
Apart from naming differences, and despite a certain discrepancy in basic register structure, the Z80 and 8086 syntax are virtually isomorphous for a large portion of instructions. Only quite superficial similarities (such as the word MOV, or the letter X, for extended register) exist between the 8080 and 8086 assembly languages, although 8080 programs can be assembled into 8086 object code using a special assembler or translated to 8086 assembly language by a translator program.[tpl]cite book | title = 8086/8088/80286 assembly language | last = Scanlon | first = Leo J. | page = 12 | quote = The 8086 is software-compatible with the 8080 at the assembly-language level. | year = 1988| publisher=Brady Books | isbn = 978-0-13-246919-7 [/tpl][tpl]cite book | title = The 80386 book: assembly language programmer's guide for the 80386 | last = Nelson | first = Ross P. | page = 2 | quote = An Intel translator program could convert 8080 assembler programs into 8086 assembler programs | publisher = Microsoft Press | year = 1988 | isbn = 978-1-55615-138-5 [/tpl]

===Instruction set and encoding===

The Z80 uses 252 out of the available 256 codes as single byte opcodes ("root instruction"); the four remaining codes are used extensively as opcode prefixes:[tpl]cite web | url = http://www.z80.info/z80brief.htm | title = Z80 CPU Introduction | publisher = Zilog | year = 1995 | quote = It has a language of 252 root instructions and with the reserved 4 bytes as prefixes, accesses an additional 308 instructions. [/tpl] CB and ED enable extra instructions and DD or FD selects IX+d or IY+d respectively (in some cases without displacement d) in place of HL. This scheme gives the Z80 a large number of permutations of instructions and registers; Zilog categorizes these into 158 different "instruction types", 78 of which are the same as those of the Intel 8080 (allowing operation of 8080 programs on a Z80). The Zilog documentation further groups instructions into the following categories:
No multiply instruction is available in the original Z80.[tpl]cite book |title=Software Solutions for Engineers And Scientists |last=Sanchez |first=Julio |last2=Canton |first2=Maria P. |publisher=Taylor & Francis |year=2008 |page=65 |isbn=978-1-4200-4302-0 |quote=The 8-bit microprocessors that preceded the 80x86 family (such as the Intel 8080, the Zilog Z80, and the Motorola) did not include multiplication.[/tpl] Different sizes and variants of additions, shifts, and rotates have somewhat differing effects on flags because the flag-influencing properties of the 8080 were copied. Load instructions do not affect the flags (except for the special purpose I and R register loads).
The index register (IX/IY) instructions can be useful for accessing data organised in fixed structures (such as records or recursive stack frames) and can also reduce code size by removing the need for multiple short instructions using non-indexed registers. However, although they may save speed in some contexts when compared to long/complex "equivalent" sequences of simpler operations, they incur a lot of additional CPU time (e.g. 19 T-states to access one indexed memory location vs. as little as 11 to access the same memory using HL and INCrement it to point to the next). Thus, for simple or linear accesses of data, IX and IY tend to be slower. Still, they may be useful in cases where the 'main' registers are all occupied, by removing the need to save/restore registers. Their officially undocumented 8-bit halves (see below) can be especially useful in this context, for they incur less slowdown than their 16-bit parents. Similarly, instructions for 16-bit additions are not particularly fast (11 clocks) in the original Z80; nonetheless, they are about twice as fast as performing the same calculations using 8-bit operations, and equally important, they reduce register usage.
The 10-year-newer microcoded Z180 design could initially afford more "chip area", permitting a slightly more efficient implementation (using a wider ALU, among other things); similar things can be said for the Z800, Z280, and Z380. However, it was not until the fully pipelined eZ80 was launched in 2001 that those instructions finally became approximately as cycle-efficient as it is technically possible to make them, i.e. given the Z80 encodings combined with the capability to do an 8-bit read or write every clock cycle.[tpl]Citation needed|date=July 2011[/tpl]

====Undocumented instructions====

The index registers, IX and IY, were intended as flexible 16 bit pointers, enhancing the ability to manipulate memory, stack frames and data structures. Officially, they were treated as 16-bit only. In reality, they were implemented as a pair of 8-bit registers,[tpl]cite book | title = The free software catalog and directory | last = Froehlich | first = Robert A. | publisher = Crown Publishers | year = 1984| isbn=978-0-517-55448-7 | page = 133 | quote = Undocumented Z80 codes allow 8 bit operations with IX and IY registers. [/tpl] in the same fashion as the HL register, which is accessible either as 16 bits or separately as the High and Low registers. Even the binary opcodes (machine language) were identical, but preceded by a new opcode prefix.[tpl]cite web | url = http://www.z80.info/z80undoc.htm| title=Z80 Undocumented Instructions | work = Home of the Z80 CPU | last = Bot | first = Jacco J. T. | quote = If an opcode works with the registers HL, H or L then if that opcode is preceded by #DD (or #FD) it works on IX, IXH or IXL (or IY, IYH, IYL), with some exceptions. The exceptions are instructions like LD H,IXH and LD L,IYH [/tpl] Zilog published the opcodes and related mnemonics for the intended functions, but did not document the fact that every opcode that allowed manipulation of the H and L registers was equally valid for the 8 bit portions of the IX and IY registers. As an example, the opcode 26h followed by an immediate byte value (LD H,n) will load that value into the H register. Preceding this two-byte instruction with the IX register's opcode prefix, DD, would instead result in the most significant 8 bits of the IX register being loaded with that same value. A notable exception to this would be instructions similar to LD H,(IX+d) which make use of both the HL and IX or IY registers in the same instruction; in this case the DD prefix is only applied to the (IX+d) portion of the instruction.
There are several other undocumented instructions as well.Robin Nixon The Amstrad Notepad Advanced User Guide ,Robin Nixon, 1993 ISBN 1-85058-515-6, pages 219-223 Undocumented or illegal opcodes are not detected by the Z80 and have various effects, some of which are useful. However, as they are not part of the formal definition of the instruction set, different implementations of the Z80 are not guaranteed to work the same way for every undocumented opcode.

===Example code===

The following Z80 assembly source code is for a subroutine named memcpy that copies a block of data bytes of a given size from one location to another. Important: The example code does not handle a certain case where the destination block overlaps the source; a fatal bug.  The sample code is extremely inefficient, intended to illustrate various instruction types, rather than best practices for speed. In particular the Z80 has a single instruction that will execute the entire loop ("LDIR "). The data block is copied one byte at a time, and the data movement and looping logic utilizes 16-bit operations. Note that the assembled code is binary-compatible with the Intel 8080 and 8085 CPUs.

===Instruction execution===

Each instruction is executed in steps that are usually termed machine cycles (M-cycles), each of which can take between three and six clock periods (T-cycles).[tpl]cite book | title = Z80 Family CPU User Manual | author = Zilog | publisher = Zilog | year = 2005 | page = 11 | url = http://www.zilog.com/docs/z80/um0080.pdf [/tpl] Each M-cycle corresponds roughly to one memory access and/or internal operation. Many instructions actually end during the M1 of the next instruction which is known as a fetch/execute overlap.
The Z80 machine cycles are sequenced by an internal state machine which builds each M-cycle out of 3, 4, 5 or 6 T-cycles depending on context. This avoids cumbersome asynchronous logic and makes the control signals behave consistently at a wide range of clock frequencies. Naturally, it also means that a higher frequency crystal must be used than without this subdivision of machine cycles (approximately 2–3 times higher). It does not imply tighter requirements on memory access times, however, as a high resolution clock allows more precise control of memory timings and memory therefore can be active in parallel with the CPU to a greater extent (i.e. sitting less idle), allowing more efficient use of available memory bandwidth.[tpl]citation needed|date=December 2012[/tpl]
One central example of this is that, for opcode fetch, the Z80 combines two full clock cycles into a memory access period (the M1-signal). In the Z80 this signal therefore lasts for a much larger (relative) part of the typical instruction execution time than in a more asynchronous processor design such as the 6800, 6502, or similar, where this period would typically last only a (rather inprecise) fraction (typically 30-40%) of a clock cycle.[tpl]citation needed|date=November 2012[/tpl] With memory chip affordability (i.e. access times around 450-250 ns in the 1980s[tpl]citation needed|date=November 2012[/tpl]) typically determining the fastest possible access time, this meant that such designs were locked to a significantly longer clock cycle (i.e. lower internal clock speed) than the Z80.
Memory, especially EPROM, but also Flash, were generally slow as compared to the state machine sub-cycles (clock cycles) used in contemporary microprocessors. The shortest machine cycle that could safely be used in embedded designs has therefore often been limited by memory access times, not by the maximum CPU frequency (especially so during the home computer era). However, this relation has slowly changed during the last decades, particularly regarding SRAM; cacheless, single-cycle designs such as the eZ80 have therefore become much more meaningful recently.

===Compatible peripherals===

Zilog introduced a number of peripheral parts for the Z80, which all supported the Z80's interrupt handling system and I/O address space. These included the Counter/Timer Channel (CTC),[tpl]cite web |url=http://datasheet.eeworld.com.cn/pdf/ZILOG/68012_Z80.pdf |title=Z80 Family CPU Peripherals User Manual |author= |date=2001 |website=EEWORLD  Datasheet |publisher=ZiLOG |accessdate=April 2014[/tpl] the SIO (Serial Input Output), the DMA (Direct Memory Access), the PIO (Parallel Input-Output) and the DART (Dual Asynchronous Receiver Transmitter). As the product line developed, low-power, high-speed and CMOS versions of these chips were produced.
Like the 8080, 8085 and 8086 processors, but unlike processors such as the Motorola 6800 and MOS Technology 6502, the Z80 and 8080 had a separate control line and address space for I/O instructions. While some Z80-based computers such as the Osborne 1 used "Motorola-style" memory mapped input/output devices, usually the I/O space was used to address one of the many Zilog peripheral chips compatible with the Z80. Zilog I/O chips supported the Z80's new mode 2 interrupts which simplified interrupt handling for large numbers of peripherals.

===='Undocumented' 16 bit I/O-addressing====

The Z80 was officially described as supporting 16-bit (64 KB) memory addressing, and 8-bit (256 ports) I/O-addressing. Looking carefully at the hardware reference manual, it can be seen that all I/O instructions actually assert the entire 16-bit address bus. OUT (C),reg and IN reg,(C) places the contents of the entire 16 bit BC register on the address bus;[tpl]cite web | url = http://z80.info/z80undoc3.txt | title = Z80 Undocumented Features (in software behaviour) | last = Young | first = Sean | year = 1998 | quote = The I/O instructions use the whole of the address bus, not just the lower 8 bits. So in fact, you can have 65536 I/O ports in a Z80 system (the Spectrum uses this). IN r,(C), OUT (C),r and all the I/O block instructions put the whole of BC on the address bus. IN A,(n) and OUT (n),A put A*256+n on the address bus. [/tpl] OUT (n),A and IN A,(n) places the contents of the A register on b8-b15 of the address bus and n on b0-b7 of the address bus. A designer could choose to decode the entire 16 bit address bus on I/O operations in order to take advantage of this feature, or use the high half of the address bus to select subfeatures of the I/O device. This feature has also been used to minimise decoding hardware requirements, such as in the Amstrad CPC/PCW and ZX81.

==Second sources and derivatives==

===Second sources===

Mostek, who produced the first Z80 for Zilog, offered it as second-source as MK3880. SGS-Thomson (now STMicroelectronics) was a second-source, too, with their Z8400. Sharp and NEC developed second sources for the NMOS Z80, the LH0080 and µPD780C respectively. The µPD780C was used in the Sinclair ZX80 and ZX81, original versions of the ZX Spectrum, and several MSX computers, and in musical synthesizers such as Oberheim OB-8 and others. The LH0080 was used in various home computers and personal computers made by Sharp and other Japanese manufacturers, including Sony MSX computers, and a number of computers in the Sharp MZ series.[tpl]cite web|url=http://www.sharpmz.org/mzovview.htm|title=Overview of the SHARP MZ-series|work=SharpMZ.org|quote=Most MZ's use the 8bit CPU LH0080 / Z80 ...[/tpl]
Toshiba made a CMOS-version, the TMPZ84C00, which is believed[tpl]by whom | date = December 2010[/tpl] (but not verified) to be the same design also used by Zilog for its own CMOS Z84C00. There were also Z80-chips made by GoldStar (alias LG) and the BU18400 series of Z80-clones (including DMA, PIO, CTC, DART and SIO) in NMOS and CMOS made by ROHM Electronics.

====Eastern Bloc====

In East Germany, an unlicensed clone of the Z80, known as the U880, was manufactured. It was very popular and was used in Robotron's and VEB Mikroelektronik Mühlhausen's computer systems (such as the KC85-series) and also in many self-made computer systems (such as COMP JU+TER). In Romania another unlicensed clone could be found, named MMN80CPU and produced by Microelectronica, used in home computers like TIM-S, HC, COBRA.
Also, several clones of Z80 were created in the Soviet Union, notable ones being the T34BM1, also called КР1858ВМ1 (parallelling the Russian 8080-clone KR580VM80A) The first marking was used in pre-production series, while the second had to be used for a larger production. Though, due to the collapse of Soviet microelectronics in late 1980s, there are many more T34BM1s than КР1858ВМ1s.[tpl]citation needed|date=May 2013[/tpl]

===Derivatives===

===Software emulation===

Software emulation of the Z80 instruction set is easily possible on modern PCs, since their processors run much faster than any of the original Z80 family. Programs emulating the processor are common and form an essential component of many full-hardware emulators of home computers (such as Amstrad CPC, MSX and Sinclair ZX Spectrum), video game consoles, and arcade game systems (such as MAME); SIMH emulates the MITS Altair 8800 computer with Intel 8080, Zilog Z80, or Intel 8086 processors. Coding a software-based emulation of the Z80 has been done by many people, whether as part of a fuller-featured emulator or as a programming project in its own right.

==Notable uses==

===Desktop computers===

During the late 1970s and early 1980s, the Z80 was used in a great number of fairly anonymous business-oriented machines with the CP/M operating system, a combination that dominated the market at the time.[tpl]cite book | title = Computer work stations | last = Holtz | first = Herman | publisher = Chapman and Hall | year = 1985 | isbn = 978-0-412-00491-9 | page = 223 | quote = and CP/M continued to dominate the 8-bit world of microcomputers. [/tpl][tpl]cite journal | work = InfoWorld | date = 10 May 1982 | title = After CP/M, object oriented operating systems may lead the field | last = Dvorak | first = John C. | page = 20 | issue = Vol. 4, Num. 18 | issn = 0199-6649 | publisher = InfoWorld Media Group | quote = The idea of a generic operating system is still in its infancy. In many ways it begins with CP/M and the mishmash of early 8080 and Z80 computers. [/tpl]
Two well-known examples of Z80+CP/M business computers are the portable Osborne 1 and the Kaypro series. Research Machines manufactured the 380Z and 480Z microcomputers which were networked with a thin Ethernet type LAN and CP/NET in 1981. Other manufacturers of such systems included Televideo, Xerox (820 range) and a number of more obscure firms. Some systems used multi-tasking operating system software to share the one processor between several concurrent users.
In the U.S., the Radio Shack TRS-80, introduced in 1977, as well as the Models II, III, IV, and the proposed Model V, used the Z80.
In the United Kingdom, Sinclair Research used the Z80 and Z80A in its ZX80, ZX81 and, ZX Spectrum home computers.  Amstrad used them in their Amstrad CPC range and an early UK computer, the Nascom 1 and 2 also used the Z80.
The Commodore 128 featured a Z80 processor alongside its MOS Technology 8502 processor for CP/M compatibility.[tpl]cite book | title = Byte | publisher = McGraw-Hill | year = 1986 | quote = C-128 CP/M uses both the Z80 and 8502 processors. The Z80 executes most of the CP/M BIOS functions. | page = 274 [/tpl]
Other 6502 architecture computers on the market at the time, such as the BBC Micro, Apple II,[tpl]cite journal | work = InfoWorld | publisher = InfoWorld Media Group| date = 6 February 1984 | issue = Vol. 6, Num. 6 | quote = Several manufacturers, however, make Z80 coprocessor boards that plug into the Apple II. | page = 64 | title = Review: Premium Softcard IIe | last = Petersen | first = Marty [/tpl] and the 6510 based Commodore 64,[tpl]cite book | title = Popular Computing | publisher = McGraw-Hill | year = 1986 | page = 22 | quote = The Commodore 64 CP/M package contains a plug-in cartridge with a Z80 microprocessor and the CP/M operating system on a disk. [/tpl]
could make use of the Z80 with an external unit, a plug-in card, or an expansion ROM cartridge. The Microsoft Z-80 SoftCard for the Apple II was a particularly successful add-on card and one of Microsoft's few hardware products of the era.
In 1981, Multitech (later to become Acer) introduced the Microprofessor I, a simple and inexpensive training system for the Z80 microprocessor. Currently, it is still being manufactured and sold by Flite Electronics International Limited in Southampton, England.

===Embedded systems and consumer electronics===

The Zilog Z80 has long been a popular microprocessor in embedded systems and microcontroller cores, where it remains in widespread use today.[tpl]cite book | isbn = 978-0-7506-4585-0 | page = 204 | author = Ian R. Sinclair.| year=2000 | publisher = Newnes | location = Oxford, Angleterre | title = Practical electronics handbook [/tpl] The following list provides examples of such applications of the Z80, including uses in consumer electronics products.

====Industry====

====Consumer electronics====

====Musical instruments====

==See also==

==Footnotes==

==References==

| url         = http://datasheets.chipdb.org/Sharp/lh0080.pdf
| title       = Sharp LH0080 Z80 CPU Reference Manual
| accessdate  = 2009-07-15
| format      = pdf
| publisher   = Sharp Corporation
| location    = Abeno-ku, Osaka, Japan
}}

==Further reading==

==External links==


