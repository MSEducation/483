[[OSGi]]

CATEGORIES: Standards organizations, Articles with example Java code, Java, Free software programmed in Java, Silicon Valley, 1999 establishments in the United States, Embedded systems

The OSGi (Open Service Gateway initiative) specification describes a module system and service platform for the Java programming language that implements a complete and dynamic component model, something that does not exist in standalone Java/VM environments. Applications or components, coming in the form of bundles for deployment, can be remotely installed, started, stopped, updated, and uninstalled without requiring a reboot; management of Java packages/classes is specified in great detail. Application life cycle management is implemented via APIs that allow for remote downloading of management policies. The service registry allows bundles to detect the addition of new services, or the removal of services, and adapt accordingly.
The OSGi specifications have evolved beyond the original focus of service gateways, and are now used in applications ranging from mobile phones to the open-source Eclipse IDE. Other application areas include automobiles, industrial automation, building automation, PDAs, grid computing, entertainment, fleet management and  application servers.

==Sponsoring organization==

The OSGi Alliance, formerly known as the Open Services Gateway initiative, now an obsolete name, is an open standards organization founded in March 1999 that originally specified and continues to maintain the OSGi standard.

==Specification process==

The OSGi specification is developed by the members in an open process and made available to the public free of charge under the OSGi Specification License.OSGi Specification License The OSGi Alliance has a compliance program that is open to members only. As of November 2010, there are seven certified OSGi framework implementations.[tpl]cite web | url=http://www.osgi.org/Specifications/Certified | title=Certified Products | accessdate=2010-11-01 | publisher=OSGi Alliance[/tpl] A separate page lists both certified and non-certified OSGi Specification Implementations, which include OSGi frameworks and other OSGi specifications.

==Architecture==

Any framework that implements the OSGi standard provides an environment for the modularization of applications into smaller bundles.  Each bundle is a tightly coupled, dynamically loadable collection of classes, jars, and configuration files that explicitly declare their external dependencies (if any).
The framework is conceptually divided into the following areas:

==Bundles==

A bundle is a group of Java classes and additional resources equipped with a detailed manifest MANIFEST.MF file on all its contents, as well as additional services needed to give the included group of Java classes more sophisticated behaviors, to the extent of deeming the entire aggregate a component.
Below is an example of a typical MANIFEST.MF file with OSGi Headers:
 Bundle-Name: Hello World
 Bundle-SymbolicName: [tpl]Not a typo|org.wikipedia.helloworld[/tpl]
 Bundle-Description: A Hello World bundle
 Bundle-ManifestVersion: 2
 Bundle-Version: 1.0.0
 Bundle-Activator: [tpl]Not a typo|org.wikipedia.Activator[/tpl]
 Export-Package: [tpl]Not a typo|org.wikipedia.helloworld[/tpl];version="1.0.0"
 Import-Package: org.osgi.framework;version="1.3.0"
The meaning of the contents in the example is as follows:Creating OSGi bundles by Costin Leau

==Life-cycle==

A Life Cycle layer adds bundles that can be dynamically installed, started, stopped, updated and uninstalled. Bundles rely on the module layer for class loading but add an API to manage the modules in run time. The life cycle layer introduces dynamics that are normally not part of an application. Extensive dependency mechanisms are used to assure the correct operation of the environment. Life cycle operations are fully protected with the security architecture.
Below is an example of a typical Java class implementing the BundleActivator interface:

==Services==

===Standard services===

The OSGi Alliance has specified many services. Services are specified by a Java interface. Bundles can implement this interface and register the service with the Service Registry. Clients of the service can find it in the registry, or react to it when it appears or disappears.
The table below shows a description of OSGi System Services:
The table below shows a description of OSGi Protocol Services:
The table below shows a description of OSGi Miscellaneous Services:

==Organization==

The OSGi Alliance was founded by Ericsson, IBM, Motorola, Sun Microsystems and others in March 1999. Before incorporating as a nonprofit corporation it was called the Connected Alliance.
Among its members are ([tpl]As of|2013|alt=as of March 2013[/tpl]) more than 35 companies from quite different business areas, for example Adobe Systems, Deutsche Telekom, Hitachi, IBM, Makewave (formerly Gatespace Telematics), NEC, NTT, Oracle, Orange S.A., ProSyst, Salesforce.com, Siemens, Software AG and TIBCO Software.OSGi Alliance | About / Members
The Alliance has a board of directors that provides the organization's overall governance.  OSGi officers have various roles and responsibilities in supporting the alliance. Technical work is conducted within Expert Groups (EGs) chartered by the board of directors, and non-technical work is conducted in various working groups and committees. The technical work conducted within Expert Groups include developing specifications, reference implementations, and compliance tests. These Expert Groups have produced five major releases of the OSGi specifications ([tpl]as of|2012[/tpl]).
Dedicated Expert Groups exist for the enterprise, mobile, vehicle and the core platform areas.
The Enterprise Expert Group (EEG) is the newest EG and is addressing Enterprise / Server-side applications.
In November 2007 the Residential Expert Group (REG) started to work on specifications to remotely manage residential/home-gateways.
In October 2003, Nokia, Motorola, IBM, ProSyst and other OSGi members formed a Mobile Expert Group (MEG) that will specify a MIDP-based service platform for the next generation of smart mobile phones, addressing some of the needs that CLDC cannot manage - other than CDC. MEG became part of OSGi as with R4.

==Community==

In 2003, Eclipse selected OSGi as the underlying runtime for the plug-in architecture used for the Eclipse Rich Client Platform and the IDE platform.  Eclipse itself includes sophisticated tooling for developing OSGi bundles and there are a number of other Eclipse plug-ins aimed at supporting OSGi behaviour (e.g., both ProSyst and Knopflerfish have Eclipse plug-ins available specifically for OSGi developers).
There is a vibrant free software community revolving around the OSGi specification. Some widely used open source implementations are Equinox, Apache Felix and  Knopflerfish OSGi. Regarding tooling, build system support and testing, the OPS4J Pax projects provide a lot of useful components and expertise.

==Specification versions==

==New in OSGi Release 4==

The new features of OSGi R4 in brief are as follows:

===New in Release 4.1===

OSGi R4.1 was a minor revision intended to clarify certain aspects of bundle initialization and loading in order to improve third party usage.  It added no new services or major features.

===New in Release 4.2===

OSGi R4.2 was a significant release that added several new services and capabilities, including:
More information can also be specified in each bundle header, such as license information, MIME types and icons.  Additionally, changes to Declarative Services allow the easier setting of permissions.  Finally, OSGi bundles can now have their return values read.
OSGi R4.2 also introduced a new specification release for the enterprise including support for:

===New in Release 4.3===

===New in Release 5.0===

====New in Core Release 5====

====New in Enterprise Release 5====

==Related RFCs and Java specifications==

==Related standards==

==Projects using OSGi==

==Current framework implementations==

==See also==

==References==

==Further reading==

| first1    = Holly 
| last1     = Cummins
| first2    = Tim
| last2     = Ward
| date      = March 28, 2013
| title     = Enterprise OSGi in Action
| edition   = 1st
| publisher = Manning Publications
| pages     = 376 
| isbn      = 978-1617290138
| url       = 
}}
| first1    = Alexandre de Castro 
| last1     = Alves
| date      = July 28, 2011
| title     = OSGi in Depth
| edition   = 1st
| publisher = Manning Publications
| pages     = 325 
| isbn      = 1-935182-17-X
| url       = 
}}
| first1    = Jeff
| last1     = McAffer
| first2    = Paul
| last2     = VanderLei
| first3    = Simon
| last3     = Archer
| date      = February 24, 2010
| title     = OSGi and Equinox: Creating Highly Modular Java Systems
| edition   = 1st
| publisher = Addison-Wesley Professional
| pages     = 460
| isbn      = 0-321-58571-2
| url       = http://www.informit.com/store/product.aspx?isbn=0321612353
}}
| first1    = Walid
| last1     =  Joseph Gédéon
| date      = November 5, 2010
| title     = OSGi and Apache Felix 3.0 Beginner's Guide
| edition   = 1st
| publisher = Packt Publishing
| pages     = 336
| isbn      = 1-84951-138-1
| url       = https://www.packtpub.com/osgi-and-apache-felix-30-beginners-guide/book
}}
| first1    = Craig
| last1     = Walls
| date      = July 2009
| title     = Modular Java with OSGi and Spring
| edition    = 1st
| publisher = Pragmatic Bookshelf
| pages     = 250
| isbn      = 978-1-934356-40-1
| url       = http://pragprog.com/titles/cwosg/modular-java
}}
| first1    = Richard S
| last1     = Hall
| coauthors = Karl Pauls, and Stuart McCulloch
| date      = September 2009
| title     = OSGi in Action
| edition    = 1st
| publisher = Manning Publications
| pages     = 375
| isbn      = 1-933988-91-6
| url       = 
}}
| first1    = Alexandre de Castro
| last1     = Alves
| coauthors =
| date      = March 2009
| title     = OSGi Application Frameworks
| edition   = 1st
| publisher = Manning Publications
| pages     = 325
| isbn      = 978-1-935182-17-7
| url       = 
}}
| first      = Neil
| last       = Bartlett
| title      = OSGi In Practice
| date       = 2009-01-10
| edition    = DRAFT
| volume     =
| series     =
| publisher  =
| pages      = 229
| page       =
| id         =
| isbn       =
| doi        =
| oclc       =
| url        = http://s3.amazonaws.com/neilbartlett.name/osgibook_preview_20090110.pdf
| accessdate =
}}
| first1    = Jeff
| last1     = McAffer
| first2    = Paul
| last2     = VanderLei
| first3    = Simon
| last3     = Archer
| date      = September 7, 2009
| title     = Equinox and OSGi: The Power Behind Eclipse
| edition   = 1st
| publisher = Addison-Wesley Professional
| pages     = 480
| isbn      = 0-321-58571-2
| url       = http://www.informit.com/store/product.aspx?isbn=0321609425
}}
| first1    = Gary
| last1     = Mak
| year      = 2009
| title     = Pro SpringSource dm Server
| publisher = Apress
| pages     = 250
| isbn      = 1-4302-1640-9
| url       = http://www.apress.com/book/view/9781430216407
}}
| first1    = Daniel
| last1     = Rubio
| date      = 2009-02-12
| edition   = First
| title     = Pro Spring Dynamic Modules for OSGi Service Platforms
| publisher = Apress
| pages     = 392
| isbn      = 1-4302-1612-3
| url       = http://www.apress.com/book/view/1430216123
}}
| year      = 2003
| title     = OSGi Service Platform, Release 3
| publisher = IOS Press
| pages     = 604
| isbn      = 1-58603-311-5
| author      = The OSGi Alliance
}}
| year      = 2007
| title     = OSGi Service Platform, Core Specification, Release 4, Version 4.1
| publisher = OSGi Alliance.
| pages     = 228
| isbn      = 978-90-79350-01-8
}}
| year      = 2009
| title     = OSGi Service Platform, Core Specification, Release 4, Version 4.2
| publisher = OSGi Alliance.
| pages     = 332
| isbn      = 978-90-79350-04-9
}}
| year      = 2007
| title     = OSGi Service Platform, Service Compendium, Release 4, Version 4.1
| publisher = OSGi Alliance.
| pages     = 594
| isbn      = 978-90-79350-02-5
}}
| year      = 2007
| title     = OSGi Service Platform, Mobile Specification, Release 4, Version 4
| publisher = OSGi Alliance.
| pages     = 426
| isbn      = 978-90-79350-03-2
}}
| year      = 2001
| title     = Programming Open Service Gateways with Java Embedded Server(TM) Technology
| publisher = Prentice Hall PTR
| pages     = 480
| isbn      = 0-201-71102-8
| author      = Kirk Chen, Li Gong.
}}
| year      = 2010
| title     = Building an OSGI Declarative Service with Maven using Netbeans
| publisher = 
| pages     =
| isbn      =
| author    = Kayode Odeyemi
| url       = http://sinati.com/blog/2010/glassfish/building-osgi-declarative-service-maven-using-netbeans
}}
| year      = 2011
| title     = OSGi 4.3 Technical Update: What's new? 
| publisher = The Eclipse Foundation
| pages     =
| isbn      =
| author    = BJ Hargrave (IBM)
| url       = http://www.eclipsecon.org/2011/sessions/?page=sessions&id=2279
}}

==External links==


