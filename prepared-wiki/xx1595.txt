[[COBOL]]

CATEGORIES: COBOL, Object-oriented programming languages, .NET programming languages, Programming languages created in the 1950s, Programming languages with an ISO standard, Procedural programming languages, Cross-platform software, Statically typed programming languages, Class-based programming languages

COBOL ([tpl]IPAc-en|ˈ|k|oʊ|b|ɒ|l[/tpl]) is a compiled computer programming language designed for business. It is imperative, procedural and, since 2002, object-oriented. It was designed in 1959 by the Conference on Data Systems Languages (CODASYL) and was largely based on previous programming language design work by Grace Hopper. COBOL stands for COmmon Business-Oriented Language.
COBOL is primarily used in business, finance, and administrative systems for companies and governments. In 1997, Gartner Group estimated that there were a total of 200 billion lines of COBOL in existence which ran 80% of all business programs.[tpl]cite web | url=http://fcw.com/Articles/2009/07/13/TECH-COBOL-turns-50.aspx | title=Cobol remains old standby at agencies despite showing its age | publisher=Public Sector Media Group | work=FCW | accessdate=26 April 2014 | date=9 July 2009 | last=Robinson | first=Brian[/tpl]
COBOL was one of the first programming languages to be standardised: the first COBOL standard was issued by ANSI in 1968. The standard has been revised three times since then, with ISO publishing the latest standard as ISO/IEC 1989:2002.

==History and specification==

===COBOL 60===

A meeting chaired by Charles A. Phillips, director of the Data System Research Staff, was held at the Pentagon on May 28 and 29 of 1959 (exactly one year after the Zürich ALGOL 58 meeting) to discuss creating a common programming language for business. The Department of Defense was concerned about whether it could run the same data processing programs on different computers, a task which the only mainstream language, FORTRAN, could not handle. There, it was agreed to start a project to create a common, business-oriented language.[tpl]cite book | url=http://books.google.co.uk/books?id=5Jaa1BVverIC&pg=PA104 | title=Concise Encyclopedia of Computer Science | publisher=Wiley | first=Jean E. | last=Sammet | authorlink=Jean E. Sammet | oclc=249810423 | isbn=978-0470090954 | editor-first=Edwin D. | editor-last=Riley | date=23 July 2004 | section=COBOL[/tpl]
The language's objectives were to allow efficient, portable programs to be easily written, to allow users to move to new systems with minimal effort and cost, and to be suitable for inexperienced programmers. It was decided to set up three committees: short, intermediate and long range. However, in the end, the short term committee designed the language because the intermediate range committee formed, but never became operational, and the long range committee never formed. The committees eventually merged to form CODASYL.[tpl]cite book | url=https://archive.org/details/codasylcoboljour00conf | title=CODASYL COBOL Journal of Development 1968 |date=July 1969  | lccn=73601243 | author=CODASYL | authorlink=CODASYL | publisher=National Bureau of Standards[/tpl][tpl]rp|at=I.1.1[/tpl]
It was the Short Range Committee, chaired by Joseph Wegstein of the US National Bureau of Standards, that created a description of the first version of COBOL in the following months.
The committee was formed to develop a language which would take the best parts of FLOW-MATIC, AIMACO, and COMTRAN while being superior to them all.[tpl]rp|at=I.1.2[/tpl]
The committee worked under the assumption that they would be creating a stopgap which would be replaced.[tpl]cite journal | url=http://books.google.co.uk/books?id=BrEo9KtAQH4C&pg=RA1-PA61 | title=Cobol, your age is showing | journal=Computerworld | volume=18 | issue=20 | pages=ID/7-ID/18 | first=Richard L. | last=Conner | date=14 May 1984 | issn=0010-4841[/tpl][tpl]rp|ID/9[/tpl]
The specifications were greatly inspired by the FLOW-MATIC language invented by Grace Hopper,[tpl]cite book | title=Sams Teach Yourself COBOL in 24 Hours | publisher=Sams Publishing | author=Hubbel, Thane | year=1999 | isbn=0-672-31453-3 | lccn=98087215[/tpl][tpl]rp|10–11[/tpl][tpl]cite book | url=http://books.google.co.uk/books?id=KKmiw-_2gYIC&pg=PT124 | title=Grace Hopper: Admiral of the Cyber Sea | publisher=US Naval Institute Press | isbn=978-1612512655 | date=10 November 2012 | last=Williams | first=Kathleen Broome | oclc=818867202[/tpl] commonly referred to as "the mother of the COBOL language."[tpl]cite journal | url=http://books.google.co.uk/books?id=JT0EAAAAMBAJ&pg=RA1-PA33 | title=Captain Grace M. Hopper: the Mother of COBOL | journal=InfoWorld | volume=3 | issue=20 | pages=33 | first=Vicki | last=Porter Adams | date=5 October 1981 | issn=0199-6649[/tpl][tpl]cite journal | url=http://books.google.co.uk/books?id=J-_T3bxgvMwC&pg=PA14 | title=Grace Hopper, mother of Cobol, dies | journal=Computerworld | volume=26 | issue=1 | pages=14 | first=Mitch | last=Betts | date=6 Jan 1992 | issn=0010-4841[/tpl]
FLOW-MATIC's status as the only language of the bunch to have been implemented made it particularly attractive to the committee.[tpl]cite journal | last = Sammet | first = Jean | authorlink = Jean_Sammet | title = The Early History of COBOL | journal = ACM SIGPLAN Notices | volume = 13 | issue = 8 | pages = 121–161 | publisher = Association for Computing Machinery, Inc. | year = 1978 | url =http://portal.acm.org/citation.cfm?id=1198367 | doi =10.1145/960118.808378 | accessdate = 14 January 2010[/tpl]
The IBM COMTRAN language invented by Bob Bemer was also drawn upon, but some of its features were not incorporated into COBOL so that it did not look like IBM had dominated the design process.[tpl]rp|ID/9[/tpl]
The FACT language specification from Honeywell was not distributed to committee members until late in the process and had little impact.
The committee was made up of members representing six computer manufacturers and three government agencies. The six computer manufacturers were Burroughs Corporation, IBM, Minneapolis-Honeywell (Honeywell Labs), RCA, Sperry Rand, and Sylvania Electric Products. The three government agencies were the US Air Force, the Navy's David Taylor Model Basin, and the National Bureau of Standards (now National Institute of Standards and Technology).[tpl]rp|at=I.2.1.1[/tpl] It soon became apparent that the committe was too large for any progress to be made quickly. A sub-committe was formed and was made up of six individuals:[tpl]cite book | last = Wexelblat | first = Richard | title = History of Programming Languages | publisher = Academic Press | location = Boston | year = 1981 | isbn = 0-12-745040-8[/tpl]
The decision to use the name "COBOL" was made at a meeting of the committee held on 18 September 1959.[tpl]citation needed|date=April 2014[/tpl]
The subcommittee completed the specifications for COBOL in December 1959.[tpl]rp|at=I.2.1[/tpl]
The specifications approved by the full Short Range Committee were approved by the Executive Committee on January 3, 1960, and sent to the government printing office, which printed these as COBOL 60. The CODASYL Executive Committee later created the COBOL Maintenance Committee to answer questions from users and vendors and to improve and expand the specifications.[tpl]cite book | url=http://books.google.co.uk/books?id=G6a2tSuOoq8C&pg=PA47 | title=Encyclopedia of Computer Science and Technology: Volume 5 | publisher=CRC Press | isbn=978-0824722555 | date=1 December 1976 | section=COBOL | first1=Jack | last1=Belzer | first2=Holzman | last2=Albert G. | first3=Allen | last3=Kent[/tpl][tpl]rp|47[/tpl]
The first compilers for COBOL were implemented later that year, and on December 6 and 7, the same COBOL program ran on an RCA computer and a Remington-Rand Univac computer, demonstrating that compatibility could be achieved.

===COBOL-61 to COBOL-65===

COBOL 60 was replaced in 1961 by COBOL-61. This was then replaced by the COBOL-61 Extended specifications in 1963 which introduced the sort and report writer facilities.[tpl]rp|48[/tpl] COBOL, Edition 1965 brought further clarifications to the specifications and introduced facilities for handling mass storage files and tables.[tpl]rp|at=I.2.2.4[/tpl]

===ANS COBOL 1968===

Efforts began to standardise COBOL to overcome incompatibilities between versions. In late 1962, both ISO and the United States of America Standards Institute (now ANSI) formed groups to create standards. ANSI produced USA Standard COBOL X3.23 in August 1968 which became the cornerstone for further versions.[tpl]rp|at=I.2.3[/tpl] This version was known as American National Standard (ANS) COBOL.

===COBOL 1974===

In 1974, ANSI published a revised version of (ANS) COBOL, containing new features such as file organizations, the [tpl]code|DELETE[/tpl] statement[tpl]cite book | url=http://books.google.co.uk/books?id=Cs1RAQAAIAAJ&pg=PA87 | title=Programming in COBOL: A Course of Twelve Television Lectures | publisher=Manchester University Press | year=1974 | pages=87 | isbn=0-7190-0592-2 | last=Triance | first=J. M.[/tpl] and the segmentation module.[tpl]cite web | url=http://home.comcast.net/~wmklein/DOX/History.pdf | title=The History of COBOL | date=4 October 2010 | accessdate=7 January 2014 | author=Klein, William M. | section=American National Standard COBOL 1974 | page=16 | archiveurl=https://web.archive.org/web/20140107192608/http://home.comcast.net/~wmklein/DOX/History.pdf | archivedate=7 January 2013 | deadurl=no[/tpl]
Deleted features included the [tpl]code|NOTE[/tpl] statement, the [tpl]code|EXAMINE[/tpl] statement (which was replaced by [tpl]code|INSPECT[/tpl]) and the implementer-defined random access module (which was superseded by the new sequential and relative I/O modules). These made up 44 changes which rendered existing statements incompatible with the new standard.[tpl]cite web | url=http://www.dtic.mil/dtic/tr/fulltext/u2/a039740.pdf | title=Programming Language Standards — Who Needs Them? | date=May 1977 | accessdate=7 January 2014 | pages=19–21 | first1=George N. | last1=Baird | first2=Paul | last2=Oliver | section=1974 Standard (X3.23–1974) | archiveurl=https://web.archive.org/web/20140107192439/http://www.dtic.mil/dtic/tr/fulltext/u2/a039740.pdf | archivedate=7 January 2014 | deadurl=no[/tpl]
The report writer was slated to be removed from COBOL, but was reinstated before the standard was published.[tpl]cite magazine | url=http://books.google.co.uk/books?id=8pMVcgpPyVMC&pg=PA17 | title='Spotty' Availability A Problem... | pages=17 | date=23 July 1975 | author=Culleton, John R., Jr. | work=Computerworld | issn=0010-4841 | volume=9 | issue=30[/tpl][tpl]cite magazine | url=http://books.google.co.uk/books?id=X_3_D4RqzvIC&pg=PA20 | title=Does Cobol's Report Writer Really Miss the Mark? | journal=Computerworld | volume=9 | issue=25 | pages=20 | first=Williams B. | last=Simmons | date=18 June 1975 | issn=0010-4841[/tpl]

===COBOL 1985===

In June 1978, work began on revising COBOL-74. The proposed standard (commonly called COBOL-80) differed significantly from the previous one, causing concerns about incompatibility and conversion costs. In January 1981, Joseph T. Brophy, Senior Vice-President of Travelers Insurance, threatened to sue the standard committee in January 1981 because it was not upwards compatible with COBOL-74. Mr. Brophy described previous conversions of their 40 million line code base as "non-productive" and a "complete waste of our programmer resources".[tpl]cite journal | url=http://books.google.co.uk/books?id=d514ApKzvjYC | title=User Threatens Suit Over Ansi Cobol-80 | journal=Computerworld | volume=15 | issue=4 | pages=1, 8 | first=Rita | last=Shoor | issn=0010-4841 | date=26 January 1981[/tpl]
Later that year, the Data Processing Management Association (DPMA) said it was "strongly opposed" to the new standard, citing "prohibitive" conversion costs and enhancements that were "forced on the user".[tpl]cite journal | url=http://books.google.co.uk/books?id=1REkdf3I86oC | title=DPMA Takes Stand Against Cobol Draft | journal=Computerworld | volume=15 | issue=43 | pages=1–2 | date=26 October 1981 | first=Rita | last=Shoor | issn=0010-4841[/tpl][tpl]cite journal | url=http://books.google.co.uk/books?id=zrOC44tBR68C&pg=PA8 | title=Revised Cobol standard may be ready in late '85 | journal=Computerworld | volume=19 | issue=37 | pages=1, 8 | first=John | last=Gallant | date=16 September 1985 | issn=0010-4841[/tpl]
During the first public review period, the committee received 2,200 responses, of which 1,700 were negative form letters.[tpl]cite journal | url=http://books.google.co.uk/books?id=zrOC44tBR68C&pg=PA41 | title=Expert addresses Cobol 85 standard | journal=Computerworld | volume=19 | issue=37 | pages=41, 48 | author= | date=16 September 1985 | issn=0010-4841[/tpl]
Other responses were detailed analyses of the effect COBOL-80 would have on their systems; conversion costs were predicted to be at least 50 cents per line of code. Fewer than a dozen of the responses were in favor of the proposed standard.[tpl]cite journal | url=http://books.google.co.uk/books?id=Wz-oh7ZQo8MC | title=Responses to Cobol-80 Overwhelmingly Negative | journal=Computerworld | volume=16 | issue=11 | pages=1, 5 | date=15 March 1982 | first=Lois | last=Paul | issn=0010-4841[/tpl]
In 1983, the DPMA withdrew its opposition to the standard, citing the responsiveness of the committee to public concerns, and a National Bureau of Standards study concluded that the proposed standard would present few problems.[tpl]rp|41[/tpl]
In late 1984, a COBOL-80 compiler was released to DEC VAX users, who noted that conversion from COBOL-74 programs posed few problems. The new EVALUATE statement and inline PERFORM were particularly well received and improved productivity, thanks to simplified control flow and debugging.[tpl]cite journal | url=http://books.google.co.uk/books?id=1qju5_k3q9AC&pg=PA1 | title=DEC users get head start implementing Cobol-80 | journal=Computerworld | volume=18 | issue=47 | pages=1, 6 | first=Paul | last=Gillin | date=19 November 1984 | issn=0010-4841[/tpl]
The second public review drew another 1,000 (mainly negative) responses, while the last drew just 25, by which time many concerns had been addressed.
In late 1985, ANSI published the revised standard. 60 features were changed or deprecated and many[tpl]quantify|date=March 2014[/tpl] were added, such as:[tpl]rp|150[/tpl][tpl]cite book | url=https://books.google.co.uk/books?id=N066w1XgJXcC&pg=PA438&lpg=PA438#v=onepage&q&f=false | title=COBOL Programming: Problems and Solutions | publisher=McGraw-Hill Education | pages=438–451 | isbn=978-0074603185 | first1=M K | last1=Roy | first2=D Ghost | last2=Dastidar | date=1 June 1989 | edition=2nd | section=Features of COBOL - 85[/tpl]
Two amendments followed in 1989 and 1993, the first introducing intrinsic functions and the other providing corrections. The 1985 standard and its amendments were adopted by ISO who subsequently took primary ownership and development of the standard.

===COBOL 2002 and object-oriented COBOL===

In the early 1990s it was decided to add object-orientation in the next full revision of COBOL. Object-orientated features were taken from C++ and Smalltalk.[tpl]cite web | url=http://collaboration.cmc.ec.gc.ca/science/rpn/biblio/ddj/Website/articles/DDJ/1995/9510/9510e/9510e.htm | title=COBOL '97: A Status Report | work=Dr. Dobb's Journal | date=October 1995 | accessdate=21 April 2014 | last1=Saade | first1=Henry | first2=Ann | last2=Wallace[/tpl][tpl]cite book | url=http://books.google.co.uk/books?id=posN1cl6XFUC&pg=PA15 | title=Object-Oriented COBOL | publisher=Cambridge University Press | pages=15 | isbn=978-0132611404 | first1=Edmund C. | last1=Arranga | first2=Frank P. | last2=Coyle | date=February 1998 | quote=Object-Oriented COBOL's style reflects the influence of Smalltalk and C++[/tpl] The initial estimate was to have this revision completed by 1997 and an ISO Committee Draft (CD) was available by 1997. Some vendors (including Micro Focus, Fujitsu, Veryant, and IBM) introduced object-oriented syntax based on drafts of the full revision. The final approved ISO standard (adopted as an ANSI standard by INCITS) was approved and made available in 2002.
Fujitsu/GTSoftware,[tpl]cite web | url=http://www.netcobol.com/product/netcobol-for-net/ | title=NetCOBOL for .Net | publisher=GTSoftware | work=netcobol.com | date=2013 | accessdate=29 January 2014[/tpl] Micro Focus and RainCode introduced object-oriented COBOL compilers targeting the .NET Framework.
COBOL 2002 included many other features beyond object-orientation. These included:
Three corringenda have been published for the standard, two in 2006 and one in 2009. There are three technical reports which describe object finalization,  XML processing and collection classes for COBOL.[tpl]cite web | url=http://www.cobolstandard.info/wg4/wg4.html | title=JTC1/SC22/WG4 - COBOL | publisher=ISO | date=30 June 2010 | accessdate=27 April 2014[/tpl]

===COBOL 20XX===

The standard to supersede COBOL 2002 is under publication [tpl]As of|2014|lc=y[/tpl].[tpl]cite web | url=https://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=51416 | title=ISO/IEC 1989 | publisher=ISO | accessdate=9 February 2014[/tpl] It includes the following changes:[tpl]cite web | url=https://www.open-std.org/jtc1/sc22/open/ISO-IECJTC1-SC22_N4561_ISO_IEC_FCD_1989__Information_technol.pdf | title=ISO/IEC 1989:20xx FCD 1.0 - Programming language COBOL | format=PDF | publisher=ISO | date=13 July 2010 | accessdate=9 February 2014[/tpl][tpl]rp|at=Annex E[/tpl]

===Legacy===

COBOL programs are used globally in governments and businesses, and are running on diverse operating systems such as z/OS, VME, Unix and Windows.  In 1997, the Gartner Group reported that 80% of the world's business ran on COBOL with over 200 billion lines of code and 5 billion lines more being written annually.[tpl]cite journal |url=http://proc.isecon.org/2000/126/ISECON.2000.Kizior.pdf | title=Does COBOL Have a Future? |accessdate=2012-09-30 |first1=Ronald J. |last1=Kizior |first2=Donald |last2=Carr |first3=Paul |last3=Halpern |journal=The Proceedings of the Information Systems Education Conference 2000 |volume=17 |issue=126[/tpl]
Near the end of the twentieth century, the year 2000 problem (Y2K) was the focus of significant COBOL programming effort, sometimes by the same programmers who had designed the systems decades before. The particular level of effort required to fix COBOL code has been attributed[tpl]by whom|date=March 2014[/tpl] to the large amount of business-oriented COBOL, as business applications use dates heavily, and to fixed-length data fields. After the clean-up effort put into these programs for Y2K, a 2003 survey found that many remained in use.[tpl]cite web | url=http://www.microfocus.com/000/WP-20030613_tcm21-2774.pdf | title=Continued Relevance of COBOL in Business and Academia: Current Situation and Comparison to the Year 2000 Study | date=13 June 2003 | accessdate=5 January 2014 | format=PDF | last1=Carr | first1=Donald | last2=Kizior | first2=Ronald J.[/tpl][tpl]rp|16[/tpl] The authors said that the survey data suggest "a gradual decline in the importance of Cobol in application development over the following 10 years unless ... integration with other languages and technologies can be adopted".[tpl]rp|10[/tpl]
In 2006 and 2012, Computerworld surveys found that over 60% of organisations used COBOL (more than C++ and Visual Basic .NET) and that for half of those, COBOL was used for the majority of their internal software.[tpl]cite web | url=http://www.computerworld.com/s/article/266156/Cobol_Not_Dead_Yet | title=Cobol: Not Dead Yet | work=Computerworld | date=4 October 2006 | accessdate=27 April 2014 | last=Mitchell | first=Robert L.[/tpl][tpl]cite web | url=http://www.computerworld.com/s/article/9225099/Cobol_brain_drain_Survey_results | title=Cobol brain drain: Survey results | work=Computerworld | date=14 March 2012 | accessdate=27 April 2014 | author=[/tpl] 36% of managers said they planned to migrate from COBOL and 25% said they would like to if it was cheaper. Instead, some businesses have migrated their systems from expensive mainframes to cheaper, more modern systems, while maintaining their COBOL programs.

==Features==

===Syntax===

COBOL has an English-like syntax which is used to describe nearly everything in a program. For example, a condition can be expressed as  [tpl]code|x IS GREATER THAN y|lang=cobol[/tpl], although there are more concise forms such as  [tpl]code|x GREATER y|lang=cobol[/tpl]  and  [tpl]code|x > y|lang=cobol[/tpl]. More complex conditions can be shortened from  [tpl]code|1=a > b AND a > c OR a = d|lang=cobol[/tpl]  to [tpl]code|1=a > b AND c OR = d|lang=cobol[/tpl].
COBOL has over 300 reserved words,[tpl]rp|at=8.9[/tpl] called keywords. However, compiler extensions mean many implementations have far more; one implementation recognizes over 1,100 keywords.[tpl]cite web | url=http://documentation.microfocus.com/help/topic/com.microfocus.eclipse.infocenter.visualcobol.vs2013/HRLHLHARES01U005.html | title=Reserved Words Table | publisher=Micro Focus | work=Micro Focus Visual COBOL 2.2 COBOL Language Reference | accessdate=3 March 2014[/tpl]
A COBOL program is split into 4 divisions: the identification division, the environment division, the data division and the procedure division. The environment division specifies any program features that depend on the system running it, such as files and character sets. The data division is used to declare variables and parameters. The procedure division contains the program's statements. Each division is sub-divided into sections which are made up of paragraphs.
COBOL provides "named conditions" (so-called 88-levels). These are subordinate data items which are used to test whether the parent variable equals any of the values given in the named condition's VALUE clause. The SET statement can be used to make a named condition TRUE (by assigning the first of its values to the conditional variable).
COBOL allows identifiers up to 30 characters long. When COBOL was introduced, much shorter name lengths (e.g., 6 characters for FORTRAN) were prevalent.
COBOL introduced the concept of copybooks—chunks of code that can be inserted into a larger program. Copybooks are used with the COPY statement, which allows code to be selectively replaced (using the REPLACING ... BY ... clause). For instance [tpl]code|COPY foo REPLACING bar BY baz[/tpl] will replace all instances of "bar" with "baz".

===Code format===

Fixed format code is the default code format. Up to COBOL-85, fixed-format code was split into 5 areas:
In COBOL 2002, free-format code was introduced. It allowed code to be placed in any column of the file, like newer languages such as C and Pascal. The * comment indicator was replaced by *> which could be placed anywhere and be used in fixed-format source code. However, no equivalent to the / was introduced and continuation is now only allowed for string literals. Fixed-format code remains the default format, however, and the only changes to it in COBOL 2002 were that Areas A and B were merged and their size left to the implementer.[tpl]rp|at=1.6[/tpl]

===Aggregated Data===

Data items in COBOL are declared hierarchically through the use of level-numbers which indicate if a data item is part of another. An item with a higher level-number is subordinate to an item with a lower one. Data items which are not subordinate to another item are called records. Items that have no subordinate data items are called elementary items; those that do are called group items.[tpl]rp|at=5.2[/tpl]

       01  some-record.
           03  num            PIC 9(10).
           03  the-date.
               05  the-year   PIC 9(4).
               05  the-month  PIC 99.
               05  the-day    PIC 99.

In the above example, num and the-date are subordinate to the record some-record while the-year, the-month and the-day are part of the group item the-date.
Level-numbers used to describe standard data items are between 1 and 49. A level-number of 66 is used to declare a re-grouping of previously defined items, irrespective of how those items are structured.[tpl]cite book | title=A Simplified Guide to Structured COBOL Programming | publisher=Wiley | year=1988 | isbn=0-471-61054-2 | first1=Daniel D. | last1=McCracken | first2=Donald G. | last2=Golden | edition=2nd | lccn=87034608 | authorlink1=Daniel D. McCracken | section=The RENAMES Clause[/tpl] 77 indicates the item is stand-alone and in such situations, is equivalent to the level-number 1. 88 declares a condition name.[tpl]rp|40–41[/tpl]

===Data types===

Standard COBOL provides the following data types:[tpl]rp|118[/tpl]

====Numeric====

Numeric data can be stored in several formats:[tpl]rp|at=13.18.59.3[/tpl]

====Edited====

Edited data are formatted string types that are specified by a PICTURE clause. For example, a 9 indicates that there will be a numeric character at a position and a , indicates that there will be a comma character at that position unless the character after it is a space, in which case it will also be a space.[tpl]cite web | url=http://www.mycobol.net/downloads/visit.php?id=file_529638e5c84ab | title=GNU COBOL 2.0 Programmer's Guide | date=21 November 2013 | accessdate=25 February 2014 | author=Cutler, Gary | edition=2nd[/tpl][tpl]rp|5-11[/tpl] There are 3 types of edited data: alphanumeric-edited, national-edited and numeric-edited. Numeric-edited data can be represented using either the normal character set or the NATIONAL set.

====Extensions====

Most vendors provide additional types, equivalents of which are now in the standard. These extensions include:[tpl]rp|at=5.2.1.11[/tpl][tpl]cite web | url=http://pic.dhe.ibm.com/infocenter/pdthelp/v1r1/topic/com.ibm.entcobol.doc_5.1/PGandLR/ref/rldde.html | section=DATA DIVISION—Data description entry | title=Enterprise COBOL for z/OS Language Reference | publisher=IBM | date=2013 | accessdate=25 February 2014[/tpl]

===Procedures===

The sections and paragraphs in the procedure division can be used as labels and simple subroutines. Unlike in other divisions, paragraphs do not need to be in sections. Execution goes down through the procedures of a program until it is terminated. Paragraphs are declared with an identifier followed by a period and sections are declared similarly, with the word [tpl]code|SECTION[/tpl] following the identifier.
Procedures can be used with the [tpl]code|PERFORM[/tpl] statement which acts like a GOSUB in BASIC. Performing a section means that execution travels through any paragraphs it contains, even if doing so will take control flow out of the specified procedures.

===Self-modifying code===

The original COBOL specification supported the infamous "[tpl]code|ALTER X TO PROCEED TO Y[/tpl]" statement, for which many compilers generated self-modifying code. X and Y are paragraph labels, and any "[tpl]code|GO TO X[/tpl]" statements executed after such an [tpl]code|ALTER[/tpl] statement mean "[tpl]code|GO TO Y[/tpl]" instead. Many compilers still support it,[ref]Examples of compiler support for [tpl]code|ALTER[/tpl] can be seen in the following:

===Object-oriented programming===

Support for object-oriented programming was added in COBOL 2002. COBOL supports classes and interfaces. Classes have [tpl]code|FACTORY[/tpl] objects, containing class methods and variables, and [tpl]code|OBJECT[/tpl] objects, containing instance methods and variables. These objects may implement interfaces, which allows polymorphism. Objects are stored as references which may be optionally restricted to a certain type. Methods can be accessed through the [tpl]code|INVOKE[/tpl] statement or through inline method invocation.

INVOKE my-class "foo" RETURNING bar
MOVE my-class::"foo" TO bar *> Inline method invocation

Method overloading is not permitted in COBOL 2002.
COBOL does not provide a way to hide methods. Class data can be hidden, however, by declaring it without a [tpl]code|PROPERTY[/tpl] clause, which leaves the user with no way to access it.
Classes may inherit from the standard class [tpl]code|BASE[/tpl] which provides the object constructor [tpl]code|New[/tpl] and the factory object constructor [tpl]code|FactoryObject[/tpl]. A factory object constructor allows factory methods to be called on objects of an unknown type.
Support for generic programming is provided through parameterized classes, which can be instantiated to use any class or interface.

===Hello, world===

A "Hello, world" program in COBOL:

       IDENTIFICATION DIVISION.
       PROGRAM-ID. HELLO-WORLD.
       PROCEDURE DIVISION.
           DISPLAY 'Hello, world'.
           STOP RUN.

====Hello, OS/360 circa 1972====

On an IBM System/360 running OS/360 MVT 21.8f, circa 1972 (which predates the tradition of using Hello, world for introductory examples), a "Hello, world" program would have been punched onto 80-column cards, containing source code similar to:

//COBUCLG  JOB CLASS=A,MSGCLASS=A,MSGLEVEL=(1,1)
//HELOWRLD EXEC COBUCLG,PARM.COB='MAP,LIST,LET'
//COB.SYSIN DD *
  001  IDENTIFICATION DIVISION.
  002  PROGRAM-ID.  'HELLO'.
  003  ENVIRONMENT DIVISION.
  004  CONFIGURATION SECTION.
  005  SOURCE-COMPUTER.  IBM-360.
  006  OBJECT-COMPUTER.  IBM-360.
  0065 SPECIAL-NAMES.
  0066     CONSOLE IS CNSL.
  007  DATA DIVISION.
  008  WORKING-STORAGE SECTION.
  009  77  HELLO-CONST   PIC X(12) VALUE 'HELLO, WORLD'.
  075  PROCEDURE DIVISION.
  090  000-DISPLAY.
  100      DISPLAY HELLO-CONST UPON CNSL.
  110      STOP RUN.
//LKED.SYSLIB DD DSNAME=SYS1.COBLIB,DISP=SHR
//            DD DSNAME=SYS1.LINKLIB,DISP=SHR
//GO.SYSPRINT DD SYSOUT=A
//

The "//" source lines are JCL statements, surrounding the COBOL sequence-numbered source code. The ANS COBOL Compile, Link, and Go module "COBUCLG" was typically utilized to compile and execute the code.  The resulting "HELLO, WORLD" output would have then been displayed on the operator's console.

==Criticism and defense==

===Lack of structure===

In his letter to an editor in 1975 entitled "How do we tell truths that might hurt?" which was critical of several of COBOL's contemporaries, computer scientist and Turing Award recipient Edsger Dijkstra remarked that "The use of COBOL cripples the mind; its teaching should, therefore, be regarded as a criminal offense."[tpl]cite web|url=http://www.cs.utexas.edu/users/EWD/transcriptions/EWD04xx/EWD498.html|title=E. W. Dijkstra Archive: How do we tell truths that might hurt? (EWD498)|accessdate=August 29, 2007|publisher=University of Texas at Austin|year=2006|author=Dijkstra, Edsger W.[/tpl]
In his dissenting response to Dijkstra's article and the above "offensive statement," computer scientist Howard E. Tompkins defended structured COBOL: "COBOL programs with convoluted control flow indeed tend to 'cripple the mind'," but this was because "There are too many such business application programs written by programmers that have never had the benefit of structured COBOL taught well..."[tpl]cite doi|10.1145/948176.948186[/tpl]
COBOL lacked any facility for defining independent subprograms until COBOL-74. This complicated development because it meant that all variables were global and could be modified anywhere within the program. However, its varied control structures reduced the need for GO TOs; the PERFORM statement, for example, allowed programmers to easily access powerful looping facilities.[tpl]rp|349–350[/tpl]
Additionally, the introduction of OO-COBOL has added support for object-oriented programming as well as user-defined functions and user-defined data types to COBOL's repertoire.

===Compatibility issues after standardization===

COBOL-85 was not fully compatible with earlier versions, resulting in the "caesarean birth" of COBOL-85.[tpl]Clarify|date=December 2013[/tpl]  Joseph T. Brophy, the CIO of Travelers Insurance, spearheaded an effort to inform users of COBOL of the heavy reprogramming costs of implementing the new standard.[tpl]cite book | title=The COBOL 85 Example Book | first=Jerome | last=Garfunkel | publisher=Wiley-Interscience | location=New York | year=1987 | isbn=0-471-80461-4[/tpl][tpl]rp|11[/tpl]  As a result, the ANSI COBOL Committee received more than 2,200 letters from the public, mostly negative, requiring the committee to make changes.  On the other hand, conversion to COBOL-85 was thought to increase productivity in future years, thus justifying the conversion costs.

===Verbose syntax===

COBOL syntax has often been criticized for its verbosity. However, proponents note that this was intentional in the language design because it made the code self-documenting, easing program maintenance.[tpl]rp|53[/tpl] COBOL was intended to be easier for programmers to learn and use,[tpl]rp|at=II.1.1[/tpl] but while being readable to non-technical staff such as managers.[tpl]rp|ID/10[/tpl][tpl]cite journal | title=The Relationship  Between COBOL and Computer  Science | journal=Annals of the History of Computing |date=October 1985  | volume=7 | issue=4 | pages=348–352 | first=B. | last=Shneiderman | publisher=IEEE | doi=10.1109/MAHC.1985.10041[/tpl][tpl]rp|350[/tpl]
The desire for readability and good program documentation is why COBOL has English-like syntax and structural elements, such as nouns, verbs, clauses, sentences, sections, and divisions. Consequently, COBOL is considered by one source to be "The most readable, understandable and self-documenting programming language in use today. ... Not only does this readability generally assist the maintenance process but the older a program gets the more valuable this readability becomes."[tpl]cite web | url=http://www.csis.ul.ie/cobol/course/COBOLIntro.htm#part1 | title=Introduction to COBOL | date=2002 | accessdate=3 February 2014 | author=Coughlan, Michael[/tpl] On the other hand, by 1984, maintainers of COBOL programs were struggling to deal with "incomprehensible" code[tpl]rp|ID/10[/tpl] and the main changes in COBOL-85 were there to help ease maintenance.[tpl]rp|48[/tpl]
Jean Sammet, a short-range committee member, noted that "little attempt was made to cater to the professional programmer, in fact people whose main interest in programming tend to be very unhappy with COBOL" which she attributed to COBOL's verbose syntax.[tpl]rp|ID/14[/tpl]

===Alienation from the computer science community===

The COBOL community has always been isolated from the computer science community. No academic computer scientists participated in the design of COBOL; all of those on the committee from commerce or government. This was due to the differing interests of computer scientists at the time, who were more interested in fields like numerical analysis, physics and system programming instead of the commercial file-processing problems COBOL development tackled. The COBOL specification did not use the new Backus-Naur form, resulting in severe criticism at the time. COBOL suffered from a shortage of material covering it; it took until 1963 for introductory books to appeared. By 1985, there were twice as many books on Fortran and four times as many on BASIC than on COBOL in the Library of Congress.[tpl]rp|348–349[/tpl]
Later, as COBOL became a mainstream language, COBOL suffered as university professors taught more modern, state-of-the-art languages and techniques instead of COBOL which was said to have a "trade school" nature.[tpl]rp|351[/tpl]

===Flawed language features===

COBOL suffered from poor string-handling facilities, which were only fixed in COBOL-74. The hard to spot and easily mislaid scope-delimiting period was problematic and superseded in COBOL-85 by scope-terminators. Until COBOL-85, only paragraphs could be used in PERFORM statements, which made programs harder to understand as the reader had to search for the body of the statement.[tpl]rp|350[/tpl] Functions were introduced in the 1989 Amendments and user-defined functions were only introduced in COBOL 2002.

===Other defenses===

COBOL's data structures influenced subsequent programming languages. Its record and file structure influenced PL/I and Pascal, and the REDEFINES clause was a predecessor to Pascal's variant records. Explicit file structure definitions preceded the development of database management systems and aggregated data was a significant advance over Fortran's arrays.[tpl]rp|349[/tpl]
The COPY statement was a successful feature that became part of subsequent languages as an include directive.[tpl]rp|349[/tpl]
Until COBOL 2002, COBOL was a simple language with a limited scope of function (with no pointers, no user-defined types, and no user-defined functions), encouraging a straightforward coding style. This has made it well-suited to its primary domain of business computing—where the program complexity lies in the business rules that need to be encoded rather than sophisticated algorithms or data structures.
Standardization meant programs written in COBOL are portable and language has since spread on to a wide variety of hardware platforms and operating systems.[ref]This can be seen in:

==See also==

==References==

==Sources==


