[[Lint (software)]]

CATEGORIES: Static program analysis tools, Unix software

In computer programming, lint was the name originally given to a particular program that flagged some suspicious and non-portable constructs (likely to be bugs) in C language source code.  The term is now applied generically to tools that flag suspicious usage in software written in any computer language.  The term lint-like behavior is sometimes applied to the process of flagging suspicious language usage.  Lint-like tools generally perform static analysis of source code.
Lint as a term can also refer more broadly to syntactic discrepancies in general, especially in interpreted languages like JavaScript and Python. For example, modern lint checkers are often used to find code that doesn't correspond to certain style guidelines. They can also be used as simple debuggers for common errors, or hard to find errors such as heisenbugs.
==Background== 
Lint first appeared (outside of Bell Labs) in the seventh version (V7) of the Unix operating system in 1979.  It was derived from PCC, the Portable C Compiler, which was included with that system.  Lint and PCC were developed by Stephen C. Johnson, who also authored the parser generator yacc.
The term was derived from the name of the undesirable bits of fiber and fluff found in sheep's wool.

==Overview==

Suspicious constructs include: variables being used before being set, division by zero, conditions that are constant, and calculations whose result is likely to be outside the range of values representable in the type used.
Many of the forms of analysis performed by lint-like tools are also performed by optimizing compilers, whose prime motivation is to generate faster code. Modern compilers can often detect many of the constructs traditionally warned about by lint.
Writers of lint-like tools have continued to improve the range of suspicious constructs that they detect.  Modern tools perform forms of analysis that many optimizing compilers typically don't do, such as cross-module consistency checking, checking that the code will be portable to other compilers, and supporting annotations that specify intended behavior or properties of code.

==See also==

==References==

==Further reading==

==External links==


