[[Comparison of programming paradigms]]

CATEGORIES: Programming paradigms

This article attempts to set out the various similarities and differences between the various programming paradigms as a summary in both graphical and tabular format with links to the separate discussions concerning these similarities and differences in extant Wikipedia articles.

==Main paradigm approaches==

The following are considered[tpl]By whom|date=January 2010[/tpl] the main programming paradigms. There is inevitably some overlap in these paradigms but the main features or identifiable differences are summarized in the following table:
None of the main programming paradigms have a precise, globally unanimous definition, let alone an official international standard. Nor is there any agreement on which paradigm constitutes the best approach to developing software. The subroutines that actually implement OOP methods might be ultimately coded in an imperative, functional or procedural style that might, or might not, directly alter state on behalf of the invoking program.

==Differences in terminology==

Despite multiple (types of) programming paradigms existing in parallel (with sometimes apparently conflicting definitions), many of the underlying fundamental components remain more or less the same (constants, variables, datafields, subroutines, calls etc.) and must somehow therefore inevitably be incorporated into each separate paradigm with equally similar attributes or functions. The table above is not intended as a guide to precise similarities, but more an index of where to look for more information - based on the different naming of these entities - within each paradigm. Non-standardized implementations of each paradigm in numerous programming languages further complicate the overall picture, especially those languages that support multiple paradigms, each with its own jargon.

==Language support==

Syntactic sugar is the sweetening of program functionality by introducing language features that facilitate particular usage, even if the end result could be achieved without them. One example of syntactic sugar may arguably be classes in C++ (and in Java, C#, etc.). The C language can support object-oriented programming via its facilities of function pointers, type casting, and structures. However, languages such as C++ aim to make object-oriented programming more convenient by introducing syntax specific to this coding style. Moreover, the specialized syntax works to emphasize the object-oriented approach. Similarly, functions and looping syntax in C (and other procedural and structured programming languages) could be considered syntactic sugar. Assembly language can support procedural or structured programming via its facilities for modifying register values and branching execution depending on program state. However, languages such as C introduced syntax specific to these coding styles to make procedural and structured programming more convenient. Features of the C# (C Sharp) programming language, such as properties and interfaces, similarly do not enable new functionality, but are designed to make good programming practices more prominent and natural.
Some programmers feel that these features are unimportant or even frivolous. For example, Alan Perlis once quipped, in a reference to bracket-delimited languages, that "syntactic sugar causes cancer of the semicolon" (see Epigrams on Programming).
An extension of this is the syntactic saccharin, or gratuitous syntax that does not make programming easier.[tpl]cite web|url=http://www.retrologic.com/jargon/S/syntactic-sugar.html|title= The Jargon File v4.4.7: "syntactic sugar"[/tpl]

==Performance comparison==

Purely in terms of total instruction path length, a program coded in an imperative style, without using any subroutines at all, would have the lowest count. However, the binary size of such a program might be larger than the same program coded using subroutines (as in functional and procedural programming) and would reference more "non-local" physical instructions that may increase cache misses and increase instruction fetch overhead in modern processors.
The paradigms that use subroutines extensively (including functional, procedural and object-oriented) and do not also use significant inlining (via compiler optimizations) will, consequently, use a greater percentage of total resources on the subroutine linkages themselves. Object oriented programs that do not deliberately alter program state directly, instead using mutator methods (or "setters") to encapsulate these state changes, will, as a direct consequence, have a greater overhead. This is due to the fact that message passing is essentially a subroutine call, but with three more additional overheads: dynamic memory allocation, parameter copying and dynamic dispatch. Obtaining memory from the heap and copying parameters for message passing may involve significant resources that far exceed those required for the state change itself. Accessors (or "getters") that merely return the values of private member variables also depend upon similar message passing subroutines, instead of using a more direct assignment (or comparison), adding to total path length.

===Managed code===

For programs executing in a managed code environment, such as the .NET Framework, many issues affect performance that are significantly affected by the programming language paradigm and various language features used.[tpl]cite web |url=http://msdn.microsoft.com/en-us/library/ms973852 |title=Writing Faster Managed Code: Know What Things Cost |last=Gray |first=Jan |date=June 2003 |work=MSDN |publisher=Microsoft[/tpl]

===Pseudocode examples comparing various paradigms===

The advantages of procedural abstraction and object-oriented-style polymorphism are not well illustrated by a small example like the one above. This example is designed principally to illustrate some intrinsic performance differences, not abstraction or code re-use.

====Subroutine, method call overhead====

The presence of a (called) subroutine in a program contributes nothing extra to the functionality of the program regardless of paradigm, but may contribute greatly to the structuring and generality of the program, making it much easier to write, modify, and extend.Guy Lewis Steele, Jr. "Debunking the 'Expensive Procedure Call' Myth, or, Procedure Call Implementations Considered Harmful, or, Lambda: The Ultimate GOTO". MIT AI Lab. AI Lab Memo AIM-443. October 1977. http://repository.readscheme.org/ftp/papers/ai-lab-pubs/AIM-443.pdfhttp://dspace.mit.edu/handle/1721.1/5753http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.72.4404&rep=rep1&type=pdf The extent to which different paradigms utilize subroutines (and their consequent memory requirements) influences the overall performance of the complete algorithm, although as Guy Steele pointed out in a 1977 paper, a well-designed programming language implementation can have very low overheads for procedural abstraction (but laments, in most implementations, that they seldom achieve this in practice - being "rather thoughtless or careless in this regard"). In the same paper, Steele also makes a considered case for automata-based programming (utilizing procedure calls with tail recursion) and concludes that "we should have a healthy respect for procedure calls" (because they are powerful) but suggested "use them sparingly"
In terms of the frequency of subroutine calls:

====Allocation of dynamic memory for message and object storage====

Uniquely, the object-oriented paradigm involves dynamic allocation of memory from heap storage for both object creation and message passing. A 1994 benchmark - "Memory Allocation Costs in Large C and C++ Programs" conducted by Digital Equipment Corporation on a variety of software, using an instruction-level profiling tool, measured how many instructions were required per dynamic storage allocation. The results showed that the lowest absolute number of instructions executed averaged around 50 but others reached as high as 611.[tpl]cite journal |journal=SOFTWARE—PRACTICE AND EXPERIENCE |title=Memory Allocation Costs in Large C and C++ Programs; Page 532 |author=David Detlefs and Al Dosser and Benjamin Zorn |volume=24|issue=6 |pages= 527–542 |date=June 1994 | id=[tpl]citeseerx|10.1.1.30.3073[/tpl] [/tpl] See also "Heap:Pleasures and pains" by Murali R. Krishnan[tpl]cite web|url=http://msdn.microsoft.com/en-us/library/ms810466%28v=MSDN.10%29.aspx|publisher=microsoft.com|title=Heap: Pleasures and pains|last=Krishnan|first=Murali R.|date=February 1999 [/tpl] that states "Heap implementations tend to stay general for all platforms, and hence have heavy overhead". The 1996 IBM paper "Scalability of Dynamic Storage Allocation Algorithms" by Arun Iyengar of IBM [tpl]cite web | id = [tpl]citeseerx|10.1.1.3.3759[/tpl] | url=http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.3.3759 | title=Scalability of Dynamic Storage Allocation Algorithms | accessdate = 2013-09-26 [/tpl] demonstrates various dynamic storage algorithms and their respective instruction counts. Even the recommended MFLF I algorithm (H.S. Stone, RC 9674) shows instruction counts in a range between 200 and 400. The above pseudocode example does not include a realistic estimate of this memory allocation pathlength or the memory prefix overheads involved and the subsequent associated garbage collection overheads. Suggesting strongly that heap allocation is a non-trivial task, one open source microallocator, by game developer John W. Ratcliff, consists of nearly 1,000 lines of code.[tpl]cite web |url=http://code.google.com/p/microallocator/ |title=MicroAllocator.h |work=Google Code |publisher=Google |accessdate=2012-01-29[/tpl]

====Dynamically dispatched message calls v. direct procedure call overheads====

In their Abstract "Optimization of Object-Oriented Programs Using Static Class Hierarchy Analysis",[tpl]cite journal|title=Optimization of Object-Oriented Programs Using Static Class Hierarchy Analysis|author=Jeffrey Dean, David Grove, and Craig Chambers |publisher=University of Washington |doi=10.1007/3-540-49538-X_5 |id = [tpl]citeseerx|10.1.1.117.2420[/tpl] [/tpl] Jeffrey Dean, David Grove, and Craig Chambers of the Department of Computer Science and Engineering, at the University of Washington, claim that "Heavy use of inheritance and dynamically-bound messages is likely to make code more extensible and reusable, but it also imposes a significant performance overhead, compared to an equivalent but non-extensible program written in a non-object-oriented manner. In some domains, such as structured graphics packages, the performance cost of the extra flexibility provided by using a heavily object-oriented style is acceptable. However, in other domains, such as basic data structure libraries, numerical computing packages, rendering libraries, and trace-driven simulation frameworks, the cost of message passing can be too great, forcing the programmer to avoid object-oriented programming in the “hot spots” of their application."

===Serialization of objects===

Serialization imposes quite considerable overheads when passing objects from one system to another, especially when the transfer is in human-readable formats such as XML and JSON. This contrasts with compact binary formats for non object-oriented data. Both encoding and decoding of the objects data value and its attributes are involved in the serialization process (that also includes awareness of complex issues such as inheritance, encapsulation and data hiding).

===Parallel computing===

Carnegie-Mellon University Professor Robert Harper in March 2011 wrote: "This semester Dan Licata and I are co-teaching a new course on functional programming for first-year prospective CS majors... Object-oriented programming is eliminated entirely from the introductory curriculum, because it is both anti-modular and anti-parallel by its very nature, and hence unsuitable for a modern CS curriculum. A proposed new course on object-oriented design methodology will be offered at the sophomore level for those students who wish to study this topic."Teaching FP to Freshmen, from Harper's blog about teaching introductory computer science.http://existentialtype.wordpress.com/2011/03/15/getting-started/

==See also==

==References==

[tpl]Reflist|refs=[tpl]cite web| first = Asaf| last= Shelly |title = Flaws of Object-oriented Modeling| date=2008-08-22|accessdate=2010-07-04| publisher = Intel Software Network| url=http://software.intel.com/en-us/blogs/2008/08/22/flaws-of-object-oriented-modeling/[/tpl][tpl]cite web| first = Steve| last=Yegge | title = Execution in the Kingdom of Nouns| date=2006-03-30|accessdate=2010-07-03| publisher = steve-yegge.blogspot.com| url=http://steve-yegge.blogspot.com/2006/03/execution-in-kingdom-of-nouns.html[/tpl][/tpl]

==Further reading==

==External links==


