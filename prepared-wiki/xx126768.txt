[[HAL (software)]]

CATEGORIES: Human–computer interaction, Free system software, User interfaces, Freedesktop.org, Applications using D-Bus, Software using the Academic Free License

HAL (Hardware Abstraction Layer or rather Hardware Annotation Library) was a software subsystem for UNIX-like operating systems providing hardware abstraction.
HAL is now deprecated on most GNU/Linux distributions, such as parts of Ubuntuhttp://www.linux-magazine.com/Online/News/Ubuntu-10.04-Alpha-2-Removes-HAL with functionality being merged into udev as of 2008–2010. Previously, HAL was built on top of udev, which was lower level.
The concept of a hardware abstraction layer aimed to allow desktop applications to discover and use the hardware of the host system through a simple, portable and abstract API, regardless of the type of the underlying hardware.[tpl]citation|title = Making Hardware Just Work|date = 2003-07-10|first = Havoc|last = Pennington|url = http://ometer.com/hardware.html[/tpl]
HAL for GNU/Linux OS was originally envisioned by Havoc Pennington and is now a freedesktop.org project, and was a key part of the software stack of the GNOME and KDE desktop environments.  It is free software, dual-licensed under both the GNU General Public License and the Academic Free License.[tpl]citation|url = http://cgit.freedesktop.org/hal/tree/COPYING |title = HAL source code license text|quote = HAL is licensed to you under your choice of the Academic Free License version 2.1, or the GNU General Public License version 2[/tpl]
HAL is unrelated to the concept of Windows NT kernel HALs, which handle some platform-specific core functionality within the kernel, such as interrupt routing.

==Rationale==

Traditionally, the operating system kernel was responsible for providing an abstract interface to the hardware the system ran on. Applications used the system call interface, or performed file I/O on device nodes in order to communicate with hardware through these abstractions.  This sufficed for the simple hardware of early desktop computing.
Computer hardware, however, has increased in complexity and the abstractions provided by Unix kernels have not kept pace with the proliferating number of device and peripheral types now common on both server and desktop computers.  Most modern buses have also become hotplug-capable and can have non-trivial topologies.  As a result, devices are discovered or change state in ways which can be difficult to track through the system call interface or Unix IPC.  The complexity of doing so forces application authors to re-implement hardware support logic.
Some devices also require privileged helper programs to prepare them for use.  These must often be invoked in ways that can be awkward to express with the Unix permissions model (for example, allowing users to join wireless networks only if they are logged into the video console).  Application authors resort to using setuid binaries or run service daemons to provide their own access control and privilege separation, potentially introducing security holes each time.

==Design==

HAL is a single daemon responsible for discovering, enumerating and mediating access to most of the hardware on the host computer.  Applications communicate with HAL through the D-Bus IPC mechanism, which abstracts the hardware behind an object-based RPC mechanism.
Each logical hardware device is represented as a D-Bus object, and its bus address is used as a unique identifier.  Devices include abstractions like disk partitions and visible wireless networks. The device's functionality is exposed through D-Bus interfaces, and its state accessed through properties, a set of key-value pairs.
HAL broadcasts hardware events as signals on these objects: listening applications can listen for these to react on hardware events (such as a digital camera being plugged in, an optical disc spinning up or a laptop computer  closing its lid).[tpl]citation|url = http://people.freedesktop.org/~david/hal-spec/hal-spec.html|title = HAL 0.5.10 Specification|first = David|last = Zeuthen|date = 2007-06-13|accessdate = 2009-04-18|publisher = freedesktop.org|archiveurl = http://web.archive.org/web/20080406073253/http://people.freedesktop.org/~david/hal-spec/hal-spec.html |archivedate = April 6, 2008[/tpl]

==Implementations and obsolescence==

On Linux, HAL uses /sys (a virtual file system for Linux systems) to discover hardware and listen for kernel hotplug events.  Some Linux distributions also provide a udev rule to allow the udev daemon to notify HAL whenever new device nodes appear.

===Deprecated===

[tpl]as of|2011[/tpl], GNU/Linux distributions such as Ubuntu,[tpl]citation|url = https://wiki.ubuntu.com/Halsectomy|title = Halsectomy|first = |last =|date =|accessdate = 2009-11-01|publisher = ubuntu.com[/tpl] Debian,HAL Removal, Debian wiki and Fedora,Hal Removal, fedora and projects such as KDE,Retire the old HAL backend for KDE, KDE GNOME and X.org are in the process of deprecating HAL as it has "become a large monolithic unmaintainable mess". The process is largely complete, but some use of HAL remains – Debian squeeze (Feb 2011) and Ubuntu version 10.04 remove HAL from the basic system and boot process.Ubuntu lucid Beta1 HAL Removal
In GNU/Linux, it is in the process of being merged into udev (main udev, libudev, and udev-extras) and existing udev and kernel functionality. No specific replacement for non-GNU/Linux systems has been identified.
Initially a new daemon DeviceKit was planned to replace certain aspects of HAL, but in March 2009, DeviceKit was deprecated in favor of adding the same code to udev as a package: udev-extras, and some functions have now moved to udev proper.

==See also==

==References==

==External links==


