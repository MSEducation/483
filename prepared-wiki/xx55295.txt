[[Knuth–Morris–Pratt algorithm]]

CATEGORIES: String matching algorithms, Donald Knuth, Articles with example pseudocode

In computer science, the Knuth–Morris–Pratt string searching algorithm (or KMP algorithm) searches for occurrences of a "word" W within a main "text string" S by employing the observation that when a mismatch occurs, the word itself embodies sufficient information to determine where the next match could begin, thus bypassing re-examination of previously matched characters.
The algorithm was conceived in 1974 by Donald Knuth and Vaughan Pratt, and independently by James H. Morris. The three published it jointly in 1977.

==Background==

A string matching algorithm wants to find the starting index m in string S that matches the search word W.
The most straightforward algorithm is to look for a character match at successive values of the index m, the position in the string being searched, i.e. Sm. If the index m reaches the end of the string then there is no match, in which case the search is said to "fail". At each position m the algorithm first checks for equality of the first character in the searched for word, i.e. Sm =? W0. If a match is found, the algorithm tests the other characters in the searched for word by checking successive values of the word position index, i. The algorithm retrieves the character Wi in the searched for word and checks for equality of the expression Sm+i =? Wi.  If all successive characters match in W at position m then a match is found at that position in the search string.
Usually, the trial check will quickly reject the trial match. If the strings are uniformly distributed random letters, then the chance that characters match is 1 in 26. In most cases, the trial check will reject the match at the initial letter. The chance that the first two letters will match is 1 in 26^2 (1 in 676). So if the characters are random, then the expected complexity of searching string S of length k is on the order of k comparisons or O(k).  The expected performance is very good. If S is 1 billion characters and W is 1000 characters, then the string search should complete after about one billion character comparisons.
That expected performance is not guaranteed. If the strings are not random, then checking a trial m may take many character comparisons. The worst case is if the two strings match in all but the last letter. Imagine that the string S consists of 1 billion characters that are all A, and that the word W is 999 A characters terminating in a final B character. The simple string matching algorithm will now examine 1000 characters at each trial position before rejecting the match and advancing the trial position. The simple string search example would now take about 1000 character comparisons times 1 billion positions for 1 trillion character comparisons.  If the length of W is n, then the worst case performance is O(k⋅n).
The KMP algorithm does not have the horrendous worst case performance of the straightforward algorithm. KMP spends a little time precomputing a table (on the order of the size of W, O(n)), and then it uses that table to do an efficient search of the string in O(k).
The difference is that KMP makes use of previous match information that the straightforward algorithm does not. In the example above, when KMP sees a trial match fail on the 1000th character (i=999) because Sm+999≠W999, it will increment m by 1, but it will know that the first 998 characters at the new position already match.  KMP matched 999 A characters before discovering a mismatch at the 1000th character (position 999). Advancing the trial match position m by one throws away the first A, so KMP knows there are 998 A characters that match W and does not retest them; that is, KMP sets i to 998. KMP maintains its knowledge in the precomputed table and two state variables. When KMP discovers a mismatch, the table determines how much KMP will increase (variable m) and where it will resume testing (variable i).

==KMP algorithm==

===Worked example of the search algorithm===

To illustrate the algorithm's details, we work through a (relatively artificial) run of the algorithm, where W = "ABCDABD" and S = "ABC ABCDAB ABCDABCDABDE". At any given time, the algorithm is in a state determined by two integers:
In each step we compare Sm+i with Wi and advance if they are equal. This is depicted, at the start of the run, like

              1         2  
 m: 01234567890123456789012
 S: ABC ABCDAB ABCDABCDABDE
 W: ABC<span style="color:red">D</span><span style="color:gray">ABD</span>
 i: 0123456

We proceed by comparing successive characters of W to "parallel" characters of S, moving from one to the next if they match.  However, in the fourth step, we get S3 is a space and W3 = 'D', a mismatch.  Rather than beginning to search again at S1, we note that no 'A' occurs between positions 0 and 3 in S except at 0; hence, having checked all those characters previously, we know there is no chance of finding the beginning of a match if we check them again.  Therefore we move on to the next character, setting m = 4 and i = 0. 

              1         2  
 m: 01234567890123456789012
 S: ABC ABCDAB ABCDABCDABDE
 W:     ABCDAB<span style="color:red">D</span>
 i:     0123456

We quickly obtain a nearly complete match "ABCDAB" when, at W6 (S10), we again have a discrepancy.  However, just prior to the end of the current partial match, we passed an "AB" which could be the beginning of a new match, so we must take this into consideration.  As we already know that these characters match the two characters prior to the current position, we need not check them again; we simply reset m = 8, i = 2 and continue matching the current character.  Thus, not only do we omit previously matched characters of S, but also previously matched characters of W.

              1         2  
 m: 01234567890123456789012
 S: ABC ABCDAB ABCDABCDABDE
 W:         AB<span style="color:red">C</span><span style="color:gray">DABD</span>
 i:         0123456

This search fails immediately, however, as the pattern still does not contain a space, so as in the first trial, we return to the beginning of W and begin searching at the next character of S: m = 11, reset i = 0.

              1         2  
 m: 01234567890123456789012
 S: ABC ABCDAB ABCDABCDABDE
 W:            ABCDAB<span style="color:red">D</span>
 i:            0123456

Once again we immediately hit upon a match "ABCDAB" but the next character, 'C', does not match the final character 'D' of the word W.  Reasoning as before, we set m = 15, to start at the two-character string "AB" leading up to the current position, set i = 2, and continue matching from the current position.

              1         2  
 m: 01234567890123456789012
 S: ABC ABCDAB ABCD<span style="color:green">ABCDABD</span>E
 W:                ABCDABD
 i:                0123456

This time we are able to complete the match, whose first character is S15.

===Description of pseudocode for the search algorithm===

The above example contains all the elements of the algorithm.  For the moment, we assume the existence of a "partial match" table T, described below, which indicates where we need to look for the start of a new match in the event that the current one ends in a mismatch.  The entries of T are constructed so that if we have a match starting at Sm that fails when comparing S+ i to Wi, then the next possible match will start at index m + i - Ti in S (that is, Ti is the amount of "backtracking" we need to do after a mismatch).  This has two implications: first, T0 = -1, which indicates that if W0 is a mismatch, we cannot backtrack and must simply check the next character; and second, although the next possible match will begin at index m + i - Ti, as in the example above, we need not actually check any of the Ti characters after that, so that we continue searching from WTi.  The following is a sample pseudocode implementation of the KMP search algorithm.
 '''algorithm''' ''kmp_search'':
     '''input''':
         an array of characters, S (the text to be searched)
         an array of characters, W (the word sought)
     '''output''':
