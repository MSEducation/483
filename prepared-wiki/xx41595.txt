[[Command pattern]]

CATEGORIES: Software design patterns, Articles with example Java code, Articles with example C Sharp code

In object-oriented programming, the command pattern is a behavioral design pattern in which an object is used to represent and encapsulate all the information needed to call a method at a later time. This information includes the method name, the object that owns the method and values for the method parameters.
Four terms always associated with the command pattern are command, receiver, invoker and client. A command object has a receiver object and invokes a method of the receiver in a way that is specific to that receiver's class. The receiver then does the work. A command object is separately passed to an invoker object, which invokes the command, and optionally does bookkeeping about the command execution.  Any command object can be passed to the same invoker object. Both an invoker object and several command objects are held by a client object.  The client contains the decision making about which commands to execute at which points. To execute a command, it passes the command object to the invoker object. See example code below.
Using command objects makes it easier to construct general components that need to delegate, sequence or execute method calls at a time of their choosing without the need to know the class of the method or the method parameters.  Using an invoker object allows bookkeeping about command executions to be conveniently performed, as well as implementing different modes for commands, which are managed by the invoker object, without the need for the client to be aware of the existence of bookkeeping or modes.

==Uses==

Command objects are useful for implementing:

==Terminology==

The terminology used to describe command pattern implementations is not consistent and can therefore be confusing.
This is the result of ambiguity, the use of synonyms, and implementations that may obscure the original pattern by going well beyond it.

==Example==

Consider a "simple" switch. In this example we configure the Switch with two commands: to turn the light on and to turn the light off. 
A benefit of this particular implementation of the command pattern is that the switch can be used with any device, not just a light - the Switch in the following example turns a light on and off, but the Switch's constructor is able to accept any subclasses of Command for its two parameters. For example, you could configure the Switch to start an engine.

===C#===

The following code is an implementation of Command pattern in C#.

===Java===

===Python===

The following code is an implementation of Command pattern in Python.

===Scala===

===Javascript===

The following code is an implementation of Command pattern in Javascript.

==See also==

==References==

==External links==


