[[Code refactoring]]

CATEGORIES: Extreme programming, Code refactoring, Technology neologisms

Code refactoring is the process of restructuring existing computer code – changing the factoring – without changing its external behavior. Refactoring improves nonfunctional attributes of the software. Advantages include improved code readability and reduced complexity to improve source code maintainability, and create a more expressive internal architecture or object model to improve extensibility.
[tpl]quote|By continuously improving the design of code, we make it easier and easier to work with. This is in sharp contrast to what typically happens: little refactoring and a great deal of attention paid to expediently adding new features. If you get into the hygienic habit of refactoring continuously, you'll find that it is easier to extend and maintain code.|Joshua Kerievsky, Refactoring to Patterns[tpl]cite book | last = Kerievsky | first = Joshua | title = Refactoring to Patterns | publisher = Addison Wesley | year = 2004  [/tpl][/tpl]
Typically, refactoring applies a series of standardised basic micro-refactorings, each of which is (usually) a tiny change in a computer program's source code that either preserves the behaviour of the software, or at least does not modify its conformance to functional requirements. Many development environments provide automated support for performing the mechanical aspects of these basic refactorings.

==Overview==

Refactoring is usually motivated by noticing a code smell.[tpl]cite book | last = Fowler| first = Martin |title = Refactoring: Improving the design of existing code | publisher = Addison Wesley | year = 1999 [/tpl] For example the method at hand may be very long, or it may be a near duplicate of another nearby method. Once recognized, such problems can be addressed by refactoring the source code, or transforming it into a new form that behaves the same as before but that no longer "smells".  For a long routine, one or more smaller subroutines can be extracted; or for duplicate routines, the duplication can be removed and replaced with one shared function. Failure to perform refactoring can result in accumulating technical debt.
There are two general categories of benefits to the activity of refactoring.
Before applying a refactoring to a section of code, a solid set of automatic unit tests is needed. The tests are used to demonstrate that the behavior of the module is correct before the refactoring. If it inadvertently turns out that a test fails, then it's generally best to fix the test first, because otherwise it is hard to distinguish between failures introduced by refactoring and failures that were already there. After the refactoring, the tests are run again to verify the refactoring didn't break the tests. Of course, the tests can never prove that there are no bugs, but the important point is that this process can be cost-effective: good unit tests can catch enough errors to make them worthwhile and to make refactoring safe enough.
The process is then an iterative cycle of making a small program transformation, testing it to ensure correctness, and making another small transformation. If at any point a test fails, the last small change is undone and repeated in a different way. Through many small steps the program moves from where it was to where you want it to be. For this very iterative process to be practical, the tests must run very quickly, or the programmer would have to spend a large fraction of his time waiting for the tests to finish. Proponents of extreme programming and other agile methodologies describe this activity as an integral part of the software development cycle.

==List of refactoring techniques==

Here are some examples of micro-refactorings; some of these may only apply to certain languages or language types. A longer list can be found in Fowler's Refactoring book and on Fowler's Refactoring Website.Refactoring techniques in Fowler's refactoring Website Many development environments provide automated support for these micro-refactorings. For instance, a programmer could click on the name of a variable and then select the "Encapsulate field" refactoring from a context menu. The IDE would then prompt for additional details, typically with sensible defaults and a preview of the code changes. After confirmation by the programmer it would carry out the required changes throughout the code.

==Hardware refactoring==

While the term refactoring originally referred exclusively to refactoring of software code, in recent years code written in hardware description languages (HDLs) has also been refactored. The term hardware refactoring is used as a shorthand term for refactoring of code in hardware description languages. Since HDLs are not considered to be programming languages by most hardware engineers,Hardware description languages#HDL and programming languages hardware refactoring is to be considered a separate field from traditional code refactoring.
Automated refactoring of analog hardware descriptions (in VHDL-AMS) has been proposed by Zeng and Huss.Kaiping Zeng, Sorin A. Huss, "Architecture refinements by code refactoring of behavioral VHDL-AMS models". ISCAS 2006 In their approach, refactoring preserves the simulated behavior of a hardware design. The non-functional measurement that improves is that refactored code can be processed by standard synthesis tools, while the original code cannot.
Refactoring of digital HDLs, albeit manual refactoring, has also been investigated by Synopsys fellow Mike Keating.M. Keating :"Complexity, Abstraction, and the Challenges of Designing Complex Systems", in DAC'08 tutorial http://www.dac.com/events/eventdetails.aspx?id=77-130"Bridging a Verification Gap: C++ to RTL for Practical Design"M. Keating, P. Bricaud: Reuse Methodology Manual for System-on-a-Chip Designs, Kluwer Academic Publishers, 1999. His target is to make complex systems easier to understand, which increases the designers' productivity.
In the summer of 2008, there was an intense discussion about refactoring of VHDL code on the news://comp.lang.vhdl newsgroup.http://newsgroups.derkeiler.com/Archive/Comp/comp.lang.vhdl/2008-06/msg00173.html The discussion revolved around a specific manual refactoring performed by one engineer, and the question to whether or not automated tools for such refactoring exist.
As of late 2009, Sigasi is offering automated tool support for VHDL refactoring.Sigasi launches its first production release for a VHDL development environment
AMIQ DVT, an IDE for hardware design and verification, provides refactoring capabilities for e (verification language), SystemVerilog, Verilog and VHDL.www.dvteclipse.com

==History==

Although refactoring code has been done informally for years, William Griswold's 1991 Ph.D. dissertation is one of the first major academic works on refactoring functional and procedural programs, followed by William Opdyke's 1992 dissertation on the refactoring of object-oriented programs,Martin Fowler, "MF Bliki: EtymologyOfRefactoring" although all the theory and machinery have long been available as program transformation systems.  All of these resources provide a catalog of common methods for refactoring; a refactoring method has a description of how to apply the method and indicators for when you should (or should not) apply the method.
Martin Fowler's book Refactoring: Improving the Design of Existing Code  is the canonical reference.
The first known use of the term "refactoring" in the published literature was in a September, 1990 article by William F. Opdyke and Ralph E. Johnson.
Griswold's Ph.D. thesis,
Opdyke's Ph.D. thesis, published in 1992, also used this term.
The term "factoring" has been used in the Forth community since at least the early 1980s.  Chapter Six of Leo Brodie's book Thinking Forth (1984) is dedicated to the subject.
In extreme programming, the Extract Method refactoring technique has essentially the same meaning as factoring in Forth; to break down a "word" (or function) into smaller, more easily maintained functions.
Refactorings can also be reconstructed  posthoc to produce concise descriptions of complex software changes recorded in software repositories like CVS or SVN.

==Automated code refactoring==

Many software editors and IDEs have automated refactoring support. Here is a list of a few of these editors, or so-called refactoring browsers.

==See also==

==References==

==Further reading==

 | first = Martin
 | last = Fowler
 | authorlink = Martin Fowler
 | year = 1999
 | title = Refactoring. Improving the Design of Existing Code
 | publisher = Addison-Wesley
 | isbn = 0-201-48567-2
}}
 | first = William C.
 | last = Wake
 | authorlink =
 | year = 2003
 | title = Refactoring Workbook
 | publisher = Addison-Wesley
 | isbn = 0-321-10929-5
}}
 | first = Michael C
 | last = Feathers
 | authorlink =
 | year = 2004
 | title = Working Effectively with Legacy Code
 | publisher = Prentice Hall
 | isbn = 0-13-117705-2
}}
 | first = Joshua
 | last = Kerievsky
 | authorlink =
 | year = 2004
 | title = Refactoring To Patterns
 | publisher = Addison-Wesley
 | isbn = 0-321-21335-1
}}
 | first = Danijel
 | last = Arsenovski
 | authorlink =
 | year = 2008
 | title = Professional Refactoring in Visual Basic
 | publisher = Wrox
 | isbn = 0-470-17979-1
}}
 | first = Danijel
 | last = Arsenovski
 | authorlink =
 | year = 2009
 | title = Professional Refactoring in C# and ASP.NET
 | publisher = Wrox
 | isbn = 978-0-470-43452-9
}}
 | first = Peter
 | last = Ritchie
 | authorlink =
 | year = 2010
 | title = Refactoring with Visual Studio 2010
 | publisher = Packt
 | isbn = 978-1-84968-010-3
}}

==External links==


