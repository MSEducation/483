[[Observer pattern]]

CATEGORIES: Software design patterns, Articles with example Java code

The observer pattern is a software design pattern in which an object, called the subject, maintains a list of its dependents, called observers, and notifies them automatically of any state changes, usually by calling one of their methods. It is mainly used to implement distributed event handling systems. The Observer pattern is also a key part in the familiar model–view–controller (MVC) architectural pattern.[tpl]cite web|title=Model-View-Controller|publisher=MSDN|url=http://msdn.microsoft.com/en-us/library/ff649643.aspx|accessdate=01/06/2013[/tpl] In fact the observer pattern was first implemented in Smalltalk's MVC based user interface framework.Gang Of Four The observer pattern is implemented in numerous programming libraries and systems, including almost all GUI toolkits.
Related patterns: Publish–subscribe pattern, mediator, singleton.

==Structure==

==Example==

Below is an example written in Java that takes keyboard input and treats each input line as an event. The example is built upon the library classes java.util.Observer and java.util.Observable. When a string is supplied from System.in, the method notifyObservers is then called, in order to notify all observers of the event's occurrence, in the form of an invocation of their 'update' methods - in our example, ResponseHandler.update(...).
The file MyApp.java contains a main() method that might be used in order to run the code.
A similar example in Python:

==See also==

==References==

==External links==


