[[UnrealEd]]

CATEGORIES: Video game cleanup, Unreal, Video game level editors

UnrealEd (UEd for short) is the level editor used to create levels for Unreal. It was also used for other games based on the Unreal engine, such as Deus Ex and Lineage II, although it has changed along with the engine for later games. One of the first companies to do this with first person shooters,But not the first because, at the very least, Bungie did it previously when they released Forge & Anvil along with Marathon Infinity in 1996 all Unreal games on the PC had the level editor included for free, and some third party Unreal engine games did the same with an edited and specialized version. This extended the longevity of the games. Amateur level designers could now create their own levels for the game, providing a near endless amount of additional content for the game. In addition, the built-in scripting language called UnrealScript allowed for editors to customize game content.

==Versions==

With the various Unreal games, UnrealEd itself has seen many different versions. Unreal shipped with UnrealEd 1.0, which displayed most of the editing tools on a single large left bar adjacent to the four viewports. This version was extremely buggy, particularly while rebuilding maps.
Unreal Tournament also shipped with UnrealEd 1.0, and UnrealEd 2.0 being added in a later game patch. The editor underwent a major visual change from the previously colorful buttons to a more subdued green scheme. New tools and features were added (such as search capabilities and a new 2D Shape Editor), and it also underwent a significant stability upgrade.
Bundled with Unreal Tournament 2003 was UnrealEd 3, with further increased stability. It maintained the green colors, and looks virtually identical to UEd 2.0. The editor added a static mesh browser to support static meshes (known as "hardware brushes" during development), and combined the various browsers into a single browser with tabs to switch between textures, meshes, actors, etc.
Future versions of UnrealEd will be fully backwards compatible with content developed under previous versions.[tpl]Citation needed|date=July 2008[/tpl]

==Basic premise==

UnrealEd operates on the concept of brushes. Additive brushes can be solids, semisolids or nonsolids. Generally, brush geometry was used before Unreal Engine supported the use of static meshes. Ever since static meshes could be placed in a level, brush geometry tends to be less used and is generally discouraged.
Older versions of UnrealEd treated the world as a giant mass, from which the level designer subtracted space, in order to make the level walkable and, therefore, playable. Since UT3, UnrealEd can start with either a full, subtractive space (from which the designer subtracts geometry) or an empty, additive space (to which the designer adds geometry).
Some brushes may be movable or special brushes: such a denotation gives game designers, level designers, and level editors the ability to create moving objects within a game.  These special types of brushes may be used to create waterfalls, elevators, flying carpets, doors, drawbridges, and many other types of dynamic objects.  Zones can be denoted  within the various brushesâ€”after the brush has "sculpted" an area of space within the virtual 3D environment (or level) -- effectively creating wet zones, sky zones, dry zones, or fog zones.  In this way, lakes or pools can be created, interiors of buildings or exterior terrain and landscapes.  Day or night may be created, through the use of "skyboxes" and other tools in the editor.  Weather may be assigned to various levels or zones, allowing such features as snow, rain, or clear weather. 
The basic process of CSG operations within UnrealEd is markedly different from other computer game editors that treat the world as a giant space, such as Quake and Quake II game level editors.  In those and similar game editors, brushes are initially added to the vacant space within the game's 3D environment in order to create virtual terrain and architecture within the level currently being edited.  Both subtractive-based computer game editors (such as UnrealEd) or additive-based computer game editors (such as Qoole) may each produce stunning 3D computer graphics for the gameplayer. Yet, each type of editor functions in nearly diametrically-opposed manners.  Each type of level editor has its own advantages and disadvantages.  The subtractive-based computer game editor was developed after the additive-based computer game editor.  
In UnrealEd, brushes are used to compile a level into a BSP Tree for rendering and collision detection. Unfortunately, as levels become more complicated they are prone to BSP errors, resulting in visual and collision anomalies. There are several types of BSP errors:  BSP holes and hall of mirrors are two common forms.  BSP errors can be very difficult to correct.  This is partially why the use of Static Meshes was introduced in the Unreal 2 Engine.
Static Meshes are pre-created Polygon mesh geometry, created in software such as Maya or 3D Studio Max, that can be imported and positioned within levels. Although a level's foundation and basic layout is still built using brushes, Static Meshes can be used to create complex, intricate architecture that brushes are too coarse to emulate. Because Static Meshes are loaded into memory only once, even if used multiple times throughout a level, they are a more efficient way of using computer resources. Along with the fact that they can be considered as prefabs, Unreal Tournament 3 features static meshes almost exclusively.

==Kismet==

Kismet is a gameplay scripting tool for the Unreal Engine 3, the game engine developed by Epic Games. It enables level designers to create scripts in UnrealScript for gameplay events using a visual interface.

==Building designers adopt UnrealEd==

In an effort to provide realtime walkthroughs of their proposed buildings, with gravity and impact detection, building designers have begun to build models inside UnrealEd to test out their ideas. By allowing the public to pretest a building, a better result can evolve prior to construction

==External links==

==Notes==


