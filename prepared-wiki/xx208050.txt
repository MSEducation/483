[[Q (programming language from Kx Systems)]]

CATEGORIES: APL programming language family, Array programming languages, Function-level languages, Data-centric programming languages, Dynamic programming languages, Proprietary database management systems

Q is a proprietary array processing language developed by Arthur Whitney and commercialized by Kx Systems. The language serves as the query language for kdb+, a disk based and in-memory, column-based database. kdb+ is based upon K, a terse variant of APL. Q is a thin wrapper around K, providing a more readable, English-like interface.[tpl]Cite web|url=http://kx.com/q/d/q.htm|title=Abridged Q Language Manual|postscript=[/tpl]

==Overview==

The fundamental building blocks of Q are atoms, lists and functions.  Atoms are scalars and include numeric, character and temporal data types.  Lists are ordered collections of atoms (or other lists) upon which the higher level data structures dictionaries and tables are internally constructed.  A dictionary is a map of a list of keys to a list of values.  A table is a transposed dictionary of symbol keys and equal length lists (columns) as values.  A keyed table, analogous to a table with a primary key placed on it, is a dictionary where the keys and values are arranged as two tables.
The following code demonstrates the relationships of the data structures (expressions to be evaluated appear prefixed with the "q)" prompt, with the output of the evaluation shown beneath):
 
 q)`john / an atom of type symbol
`john
q)50    / an atom of type integer
50
q)`john`jack / a list of symbols
`john`jack
q)50 60 / a list of integers
50 60
q)`john`jack!50 60 / a list of symbols and a list of integers combined to form a dictionary
john| 50
jack| 60
q)`name`age!(`john`jack;50 60) / an arrangement known as a column dictionary
name| john jack
age | 50   60
q)flip `name`age!(`john`jack;50 60) / when transposed via the function "flip", the column dictionary becomes a table
name age
john 50
jack 60
q)(flip (enlist `name)!enlist `john`jack)!flip (enlist `age)!enlist 50 60  / two equal length tables combined as a dictionary become a keyed table
name| age
----| ---
john| 50
jack| 60

These entities are manipulated via functions, which include the built-in functions that come with Q (which are actually defined as K macros) and user-defined functions.  Functions are themselves a data type, and can be placed into lists, dictionaries and tables, or passed into other functions as parameters.

==Examples==

Like K, Q is interpreted and the result of the evaluation of an expression is immediately displayed, unless terminated with a semi-colon. The Hello world program is therefore trivial:
 
 q)"Hello world!"
"Hello world!"

The following expression sorts a list of strings stored in the variable x descending by their lengths:
 
 x@idesc count each x

The expression is evaluated from right to left as follows:
The factorial function can be implemented directly in Q as
 
 {prd 1+til x}

or recursively as
 
 {$x=0;1;x*.z.sx-1}

Note that in both cases the function implicitly takes a single argument called x - in general it is possible to use up to three implicit arguments, named x, y and z, or to give arguments local variable bindings explicitly.
In the direct implementation, the expression "til x" enumerates the integers from 0 to x-1, "1+" adds 1 to every element of the list and "prd" returns the product of the list.
In the recursive implementation, the syntax "$expr1; expr2" is a ternary conditional - if the condition is true then expr1 is returned; otherwise expr2 is returned. The expression ".z.s" is loosely equivalent to 'this' in Java or 'self' in Python - it is a reference to the containing object, and enables functions in q to call themselves.
When x is an integer greater than 2, the following function will return 1 if it is a prime, otherwise 0:
 
 {min x mod 2_til x}

The function is evaluated from right to left:
The Q programming language contains its own table query syntax called q-sql, which resembles traditional SQL but has important differences, mainly due to the fact that the underlying tables are column, rather than row, oriented.
 
 q)show t:( name:`john`jack`jill`jane; age: 50 60 50 20) / define a simple table and assign to "t"
name age
john 50
jack 60
jill 50
jane 20
q)select from t where name like "ja*",age>50
name age
jack 60
q)select rows:count i by age from t
age| rows
---| ----
20 | 1
50 | 2
60 | 1

==See also==

==References==

==Further reading==

==External links==


