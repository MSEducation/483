[[COBOL]]

CATEGORIES: COBOL, Object-oriented programming languages, .NET programming languages, Programming languages created in the 1950s, Programming languages with an ISO standard, Procedural programming languages, Cross-platform software, Statically typed programming languages, Class-based programming languages

COBOL () is a compiled computer programming language designed for business. It is imperative, procedural and, since 2002, object-oriented. It was designed in 1959 by the Conference on Data Systems Languages (CODASYL) and was largely based on previous programming language design work by Grace Hopper. COBOL stands for COmmon Business-Oriented Language.
COBOL is primarily used in business, finance, and administrative systems for companies and governments. In 1997, Gartner Group estimated that there were a total of 200 billion lines of COBOL in existence which ran 80% of all business programs.
COBOL was one of the first programming languages to be standardised: the first COBOL standard was issued by ANSI in 1968. The standard has been revised three times since then, with ISO publishing the latest standard as ISO/IEC 1989:2002.

History and specification

COBOL 60

A meeting chaired by Charles A. Phillips, director of the Data System Research Staff, was held at the Pentagon on May 28 and 29 of 1959 (exactly one year after the Zürich ALGOL 58 meeting) to discuss creating a common programming language for business. The Department of Defense was concerned about whether it could run the same data processing programs on different computers, a task which the only mainstream language, FORTRAN, could not handle. There, it was agreed to start a project to create a common, business-oriented language.
The language's objectives were to allow efficient, portable programs to be easily written, to allow users to move to new systems with minimal effort and cost, and to be suitable for inexperienced programmers. It was decided to set up three committees: short, intermediate and long range. However, in the end, the short term committee designed the language because the intermediate range committee formed, but never became operational, and the long range committee never formed. The committees eventually merged to form CODASYL.
It was the Short Range Committee, chaired by Joseph Wegstein of the US National Bureau of Standards, that created a description of the first version of COBOL in the following months.
The committee was formed to develop a language which would take the best parts of FLOW-MATIC, AIMACO, and COMTRAN while being superior to them all.
The committee worked under the assumption that they would be creating a stopgap which would be replaced.
The specifications were greatly inspired by the FLOW-MATIC language invented by Grace Hopper,
FLOW-MATIC's status as the only language of the bunch to have been implemented made it particularly attractive to the committee.
The IBM COMTRAN language invented by Bob Bemer was also drawn upon, but some of its features were not incorporated into COBOL so that it did not look like IBM had dominated the design process.
The FACT language specification from Honeywell was not distributed to committee members until late in the process and had little impact.
The committee was made up of members representing six computer manufacturers and three government agencies. The six computer manufacturers were Burroughs Corporation, IBM, Minneapolis-Honeywell (Honeywell Labs), RCA, Sperry Rand, and Sylvania Electric Products. The three government agencies were the US Air Force, the Navy's David Taylor Model Basin, and the National Bureau of Standards (now National Institute of Standards and Technology).
The decision to use the name "COBOL" was made at a meeting of the committee held on 18 September 1959.
The subcommittee completed the specifications for COBOL in December 1959.
The specifications approved by the full Short Range Committee were approved by the Executive Committee on January 3, 1960, and sent to the government printing office, which printed these as COBOL 60. The CODASYL Executive Committee later created the COBOL Maintenance Committee to answer questions from users and vendors and to improve and expand the specifications.
The first compilers for COBOL were implemented later that year, and on December 6 and 7, the same COBOL program ran on an RCA computer and a Remington-Rand Univac computer, demonstrating that compatibility could be achieved.

COBOL-61 to COBOL-65

COBOL 60 was replaced in 1961 by COBOL-61. This was then replaced by the COBOL-61 Extended specifications in 1963 which introduced the sort and report writer facilities.

ANS COBOL 1968

Efforts began to standardise COBOL to overcome incompatibilities between versions. In late 1962, both ISO and the United States of America Standards Institute (now ANSI) formed groups to create standards. ANSI produced USA Standard COBOL X3.23 in August 1968 which became the cornerstone for further versions. This version was known as American National Standard (ANS) COBOL.

COBOL 1974

In 1974, ANSI published a revised version of (ANS) COBOL, containing new features such as file organizations, the 
Deleted features included the 
The report writer was slated to be removed from COBOL, but was reinstated before the standard was published.

COBOL 1985

In June 1978, work began on revising COBOL-74. The proposed standard (commonly called COBOL-80) differed significantly from the previous one, causing concerns about incompatibility and conversion costs. In January 1981, Joseph T. Brophy, Senior Vice-President of Travelers Insurance, threatened to sue the standard committee in January 1981 because it was not upwards compatible with COBOL-74. Mr. Brophy described previous conversions of their 40 million line code base as "non-productive" and a "complete waste of our programmer resources".
Later that year, the Data Processing Management Association (DPMA) said it was "strongly opposed" to the new standard, citing "prohibitive" conversion costs and enhancements that were "forced on the user".
During the first public review period, the committee received 2,200 responses, of which 1,700 were negative form letters.
Other responses were detailed analyses of the effect COBOL-80 would have on their systems; conversion costs were predicted to be at least 50 cents per line of code. Fewer than a dozen of the responses were in favor of the proposed standard.
In 1983, the DPMA withdrew its opposition to the standard, citing the responsiveness of the committee to public concerns, and a National Bureau of Standards study concluded that the proposed standard would present few problems.
In late 1984, a COBOL-80 compiler was released to DEC VAX users, who noted that conversion from COBOL-74 programs posed few problems. The new EVALUATE statement and inline PERFORM were particularly well received and improved productivity, thanks to simplified control flow and debugging.
The second public review drew another 1,000 (mainly negative) responses, while the last drew just 25, by which time many concerns had been addressed.
In late 1985, ANSI published the revised standard. 60 features were changed or deprecated and many
Two amendments followed in 1989 and 1993, the first introducing intrinsic functions and the other providing corrections. The 1985 standard and its amendments were adopted by ISO who subsequently took primary ownership and development of the standard.

COBOL 2002 and object-oriented COBOL

In the early 1990s it was decided to add object-orientation in the next full revision of COBOL. Object-orientated features were taken from C++ and Smalltalk. The initial estimate was to have this revision completed by 1997 and an ISO Committee Draft (CD) was available by 1997. Some vendors (including Micro Focus, Fujitsu, Veryant, and IBM) introduced object-oriented syntax based on drafts of the full revision. The final approved ISO standard (adopted as an ANSI standard by INCITS) was approved and made available in 2002.
Fujitsu/GTSoftware, Micro Focus and RainCode introduced object-oriented COBOL compilers targeting the .
COBOL 2002 included many other features beyond object-orientation. These included:
Three corringenda have been published for the standard, two in 2006 and one in 2009. There are three technical reports which describe object finalization,  XML processing and collection classes for COBOL.

COBOL 20XX

The standard to supersede COBOL 2002 is under publication 

Legacy

COBOL programs are used globally in governments and businesses, and are running on diverse operating systems such as z/OS, VME, Unix and Windows.  In 1997, the Gartner Group reported that 80% of the world's business ran on COBOL with over 200 billion lines of code and 5 billion lines more being written annually.
Near the end of the twentieth century, the year 2000 problem (Y2K) was the focus of significant COBOL programming effort, sometimes by the same programmers who had designed the systems decades before. The particular level of effort required to fix COBOL code has been attributed
In 2006 and 2012, Computerworld surveys found that over 60% of organisations used COBOL (more than C++ and Visual Basic . 36% of managers said they planned to migrate from COBOL and 25% said they would like to if it was cheaper. Instead, some businesses have migrated their systems from expensive mainframes to cheaper, more modern systems, while maintaining their COBOL programs.

Features

Syntax

COBOL has an English-like syntax which is used to describe nearly everything in a program. For example, a condition can be expressed as  .
COBOL has over 300 reserved words,
A COBOL program is split into 4 divisions: the identification division, the environment division, the data division and the procedure division. The environment division specifies any program features that depend on the system running it, such as files and character sets. The data division is used to declare variables and parameters. The procedure division contains the program's statements. Each division is sub-divided into sections which are made up of paragraphs.
COBOL provides "named conditions" (so-called 88-levels). These are subordinate data items which are used to test whether the parent variable equals any of the values given in the named condition's VALUE clause. The SET statement can be used to make a named condition TRUE (by assigning the first of its values to the conditional variable).
COBOL allows identifiers up to 30 characters long. When COBOL was introduced, much shorter name lengths (e.g., 6 characters for FORTRAN) were prevalent.
COBOL introduced the concept of copybooks—chunks of code that can be inserted into a larger program. Copybooks are used with the COPY statement, which allows code to be selectively replaced (using the REPLACING ... BY ... clause). For instance  will replace all instances of "bar" with "baz".

Code format

Fixed format code is the default code format. Up to COBOL-85, fixed-format code was split into 5 areas:
In COBOL 2002, free-format code was introduced. It allowed code to be placed in any column of the file, like newer languages such as C and Pascal. The * comment indicator was replaced by *> which could be placed anywhere and be used in fixed-format source code. However, no equivalent to the / was introduced and continuation is now only allowed for string literals. Fixed-format code remains the default format, however, and the only changes to it in COBOL 2002 were that Areas A and B were merged and their size left to the implementer.

Aggregated Data

Data items in COBOL are declared hierarchically through the use of level-numbers which indicate if a data item is part of another. An item with a higher level-number is subordinate to an item with a lower one. Data items which are not subordinate to another item are called records. Items that have no subordinate data items are called elementary items; those that do are called group items.

       01  some-record.
           03  num            PIC 9(10).
           03  the-date.
               05  the-year   PIC 9(4).
               05  the-month  PIC 99.
               05  the-day    PIC 99.

In the above example, num and the-date are subordinate to the record some-record while the-year, the-month and the-day are part of the group item the-date.
Level-numbers used to describe standard data items are between 1 and 49. A level-number of 66 is used to declare a re-grouping of previously defined items, irrespective of how those items are structured.

Data types

Standard COBOL provides the following data types:

=Numeric=

Numeric data can be stored in several formats:

=Edited=

Edited data are formatted string types that are specified by a PICTURE clause. For example, a 9 indicates that there will be a numeric character at a position and a , indicates that there will be a comma character at that position unless the character after it is a space, in which case it will also be a space. There are 3 types of edited data: alphanumeric-edited, national-edited and numeric-edited. Numeric-edited data can be represented using either the normal character set or the NATIONAL set.

=Extensions=

Most vendors provide additional types, equivalents of which are now in the standard. These extensions include:

Procedures

The sections and paragraphs in the procedure division can be used as labels and simple subroutines. Unlike in other divisions, paragraphs do not need to be in sections. Execution goes down through the procedures of a program until it is terminated. Paragraphs are declared with an identifier followed by a period and sections are declared similarly, with the word  following the identifier.
Procedures can be used with the  statement which acts like a GOSUB in BASIC. Performing a section means that execution travels through any paragraphs it contains, even if doing so will take control flow out of the specified procedures.

Self-modifying code

The original COBOL specification supported the infamous " can be seen in the following:

Object-oriented programming

Support for object-oriented programming was added in COBOL 2002. COBOL supports classes and interfaces. Classes have  statement or through inline method invocation.

INVOKE my-class "foo" RETURNING bar
MOVE my-class::"foo" TO bar *> Inline method invocation

Method overloading is not permitted in COBOL 2002.
COBOL does not provide a way to hide methods. Class data can be hidden, however, by declaring it without a  clause, which leaves the user with no way to access it.
Classes may inherit from the standard class . A factory object constructor allows factory methods to be called on objects of an unknown type.
Support for generic programming is provided through parameterized classes, which can be instantiated to use any class or interface.

Hello, world

A "Hello, world" program in COBOL:

       IDENTIFICATION DIVISION.
       PROGRAM-ID. HELLO-WORLD.
       PROCEDURE DIVISION.
           DISPLAY 'Hello, world'.
           STOP RUN.

=Hello, OS/360 circa 1972=

On an IBM System/360 running OS/360 MVT 21.8f, circa 1972 (which predates the tradition of using Hello, world for introductory examples), a "Hello, world" program would have been punched onto 80-column cards, containing source code similar to:

//COBUCLG  JOB CLASS=A,MSGCLASS=A,MSGLEVEL=(1,1)
//HELOWRLD EXEC COBUCLG,PARM.COB='MAP,LIST,LET'
//COB.SYSIN DD *
  001  IDENTIFICATION DIVISION.
  002  PROGRAM-ID.  'HELLO'.
  003  ENVIRONMENT DIVISION.
  004  CONFIGURATION SECTION.
  005  SOURCE-COMPUTER.  IBM-360.
  006  OBJECT-COMPUTER.  IBM-360.
  0065 SPECIAL-NAMES.
  0066     CONSOLE IS CNSL.
  007  DATA DIVISION.
  008  WORKING-STORAGE SECTION.
  009  77  HELLO-CONST   PIC X(12) VALUE 'HELLO, WORLD'.
  075  PROCEDURE DIVISION.
  090  000-DISPLAY.
  100      DISPLAY HELLO-CONST UPON CNSL.
  110      STOP RUN.
//LKED.COBLIB,DISP=SHR
//            DD DSNAME=SYS1.LINKLIB,DISP=SHR
//GO.SYSPRINT DD SYSOUT=A
//

The "//" source lines are JCL statements, surrounding the COBOL sequence-numbered source code. The ANS COBOL Compile, Link, and Go module "COBUCLG" was typically utilized to compile and execute the code.  The resulting "HELLO, WORLD" output would have then been displayed on the operator's console.

Criticism and defense

Lack of structure

In his letter to an editor in 1975 entitled "How do we tell truths that might hurt?" which was critical of several of COBOL's contemporaries, computer scientist and Turing Award recipient Edsger Dijkstra remarked that "The use of COBOL cripples the mind; its teaching should, therefore, be regarded as a criminal offense."
In his dissenting response to Dijkstra's article and the above "offensive statement," computer scientist Howard E. Tompkins defended structured COBOL: "COBOL programs with convoluted control flow indeed tend to 'cripple the mind'," but this was because "There are too many such business application programs written by programmers that have never had the benefit of structured COBOL taught well..."
COBOL lacked any facility for defining independent subprograms until COBOL-74. This complicated development because it meant that all variables were global and could be modified anywhere within the program. However, its varied control structures reduced the need for GO TOs; the PERFORM statement, for example, allowed programmers to easily access powerful looping facilities.
Additionally, the introduction of OO-COBOL has added support for object-oriented programming as well as user-defined functions and user-defined data types to COBOL's repertoire.

Compatibility issues after standardization

COBOL-85 was not fully compatible with earlier versions, resulting in the "caesarean birth" of COBOL-85.  As a result, the ANSI COBOL Committee received more than 2,200 letters from the public, mostly negative, requiring the committee to make changes.  On the other hand, conversion to COBOL-85 was thought to increase productivity in future years, thus justifying the conversion costs.

Verbose syntax

COBOL syntax has often been criticized for its verbosity. However, proponents note that this was intentional in the language design because it made the code self-documenting, easing program maintenance.
The desire for readability and good program documentation is why COBOL has English-like syntax and structural elements, such as nouns, verbs, clauses, sentences, sections, and divisions. Consequently, COBOL is considered by one source to be "The most readable, understandable and self-documenting programming language in use today. ... Not only does this readability generally assist the maintenance process but the older a program gets the more valuable this readability becomes."
Jean Sammet, a short-range committee member, noted that "little attempt was made to cater to the professional programmer, in fact people whose main interest in programming tend to be very unhappy with COBOL" which she attributed to COBOL's verbose syntax.

Alienation from the computer science community

The COBOL community has always been isolated from the computer science community. No academic computer scientists participated in the design of COBOL; all of those on the committee from commerce or government. This was due to the differing interests of computer scientists at the time, who were more interested in fields like numerical analysis, physics and system programming instead of the commercial file-processing problems COBOL development tackled. The COBOL specification did not use the new Backus-Naur form, resulting in severe criticism at the time. COBOL suffered from a shortage of material covering it; it took until 1963 for introductory books to appeared. By 1985, there were twice as many books on Fortran and four times as many on BASIC than on COBOL in the Library of Congress.
Later, as COBOL became a mainstream language, COBOL suffered as university professors taught more modern, state-of-the-art languages and techniques instead of COBOL which was said to have a "trade school" nature.

Flawed language features

COBOL suffered from poor string-handling facilities, which were only fixed in COBOL-74. The hard to spot and easily mislaid scope-delimiting period was problematic and superseded in COBOL-85 by scope-terminators. Until COBOL-85, only paragraphs could be used in PERFORM statements, which made programs harder to understand as the reader had to search for the body of the statement. Functions were introduced in the 1989 Amendments and user-defined functions were only introduced in COBOL 2002.

Other defenses

COBOL's data structures influenced subsequent programming languages. Its record and file structure influenced PL/I and Pascal, and the REDEFINES clause was a predecessor to Pascal's variant records. Explicit file structure definitions preceded the development of database management systems and aggregated data was a significant advance over Fortran's arrays.
The COPY statement was a successful feature that became part of subsequent languages as an include directive.
Until COBOL 2002, COBOL was a simple language with a limited scope of function (with no pointers, no user-defined types, and no user-defined functions), encouraging a straightforward coding style. This has made it well-suited to its primary domain of business computing—where the program complexity lies in the business rules that need to be encoded rather than sophisticated algorithms or data structures.
Standardization meant programs written in COBOL are portable and language has since spread on to a wide variety of hardware platforms and operating systems.[ref]This can be seen in:





Sources


