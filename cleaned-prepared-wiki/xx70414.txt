[[Domain Name System Security Extensions]]

CATEGORIES: Internet Standards, Internet protocols, Domain name system, Public-key cryptography, Key management, DNSSEC

The Domain Name System Security Extensions (DNSSEC) is a suite of Internet Engineering Task Force (IETF) specifications for securing certain kinds of information provided by the Domain Name System (DNS) as used on Internet Protocol (IP) networks.  It is a set of extensions to DNS which provide to DNS clients (resolvers) origin authentication of DNS data, authenticated denial of existence, and data integrity, but not availability or confidentiality.



The original design of the Domain Name System (DNS) did not include security; instead it was designed to be a scalable distributed system. The Domain Name System Security Extensions (DNSSEC) attempts to add security, while maintaining backwards compatibility.  RFC 3833 documents some of the known threats to the DNS and how DNSSEC responds to those threats.
DNSSEC was designed to protect applications (and caching resolvers serving those applications) from using forged or manipulated DNS data, such as that created by DNS cache poisoning. All answers from DNSSEC protected zones are digitally signed. By checking the digital signature, a DNS resolver is able to check if the information is identical (i.e. unmodified and complete) to the information published by the zone owner and served on an authoritative DNS server. While protecting IP addresses is the immediate concern for many users, DNSSEC can protect any data published in the DNS, including text records (TXT), mail exchange records (MX), and can be used to bootstrap other security systems that publish references to cryptographic certificates stored in the DNS such as Certificate Records (CERT records, RFC 4398), SSH fingerprints (SSHFP, RFC 4255), IPSec public keys (IPSECKEY, RFC 4025), and TLS Trust Anchors (TLSA, RFC 6698).
DNSSEC does not provide confidentiality of data; in particular, all DNSSEC responses are authenticated but not encrypted. DNSSEC does not protect against DoS attacks directly, though it indirectly provides some benefit (because signature checking allows the use of potentially untrustworthy parties; this is true only if the DNS server is using a self-signed certificate,not recommended for Internet-facing DNS servers).
Other standards (not DNSSEC) are used to secure bulk data (such as a DNS zone transfer) sent between DNS servers. As documented in IETF RFC 4367, some users and developers make false assumptions about DNS names, such as assuming that a company's common name plus ". DNSSEC cannot protect against false assumptions; it can only authenticate that the data is truly from or not available from the domain owner.
The DNSSEC specifications (called DNSSEC-bis) describe the current DNSSEC protocol in great detail. See RFC 4033, RFC 4034, and RFC 4035. With the publication of these new RFCs (March 2005), an earlier RFC, RFC 2535 has become obsolete.
It is widely believedInterview with Dan Kaminsky on DNSSEC (25 Jun 2009) Kaminsky interview: DNSSEC addresses cross-organizational trust and security that securing the DNS is critically important for securing the Internet as a whole, but deployment of DNSSEC specifically has been hampered () by several difficulties:
Microsoft Windows uses a stub resolver, and Windows 7 and beyond in particular use a non-validating (but DNSSEC-aware) stub resolver. For the non-validating stub resolver to place any real reliance on DNSSEC services, the stub resolver must trust both the recursive name servers in question (which is usually controlled by the Internet Service Provider) and the communication channels between itself and those name servers, using methods such as IPsec, SIG(0), or TSIG. The use of IPsec is not widespread.

How it works

DNSSEC works by digitally signing records for DNS lookup using public-key cryptography. The correct DNSKEY record is authenticated via a chain of trust, starting with a set of verified public keys for the DNS root zone which is the trusted third party. Domain owners generate their own keys, and upload them using their DNS control panel at their domain-name registrar, which in turn pushes the keys via secDNS to the zone operator (eg: Verisign for .

Records

DNS is implemented by the use of several resource records. To implement DNSSEC, several new DNS record types were created or adapted to use with DNSSEC:
When DNSSEC is used, each answer to a DNS lookup contains an RRSIG DNS record, in addition to the record type that was requested.  The RRSIG record is a digital signature of the answer DNS resource record set.  The digital signature is verified by locating the correct public key found in a DNSKEY record. The NSEC and NSEC3 records are used to provide cryptographic evidence of the non-existence of any RR. The DS record is used in the authentication of DNSKEYs in the lookup procedure using the chain of trust. NSEC and NSEC3 records are used for robust resistance against spoofing.

=Algorithms=

DNSSEC was designed to be extensible so that as attacks are discovered against existing algorithms, new ones can be introduced in a backward-compatible fashion. As of April 2013, the following security algorithms are defined that are most often used:

The lookup procedure

From the results of a DNS lookup, a security-aware DNS resolver can determine whether the authoritative name server for the domain being queried supports DNSSEC, whether the answer it receives is secure, and whether there is some sort of error. The lookup procedure is different for recursive name servers such as those of many ISPs, and for stub resolvers such as those included by default in mainstream operating systems. Microsoft Windows uses a stub resolver, and Windows Server 2008 R2 and Windows 7 in particular use a non-validating but DNSSEC-aware stub resolver.

=Recursive name servers=

Using the chain of trust model, a Delegation Signer (DS) record in a parent domain (DNS zone) can be used to verify a DNSKEY record in a subdomain, which can then contain other DS records to verify further subdomains. Say that a recursive resolver such as an ISP name server wants to get the IP addresses (A record and/or AAAA records) of the domain "www.com".
There are several exceptions to the above example.
First, if "example.com" in the "com" zone.  If there is a DS record for "example.  Or, it could be a broken security-oblivious name server along the way that stripped the DO flag bit from the query or the RRSIG record from the answer.  Or, it could be a configuration error.
Next, it may be that there is not a domain name named "www.com", in which case instead of returning a RRSIG record in the answer, there will be either an NSEC record or an NSEC3 record.  These are "next secure" records that allow the resolver to prove that a domain name does not exist.  The NSEC/NSEC3 records have RRSIG records, which can be verified as above.
Finally, it may be that the "example. , deployment of DNSSEC to root is completed.root-dnssec.com domain was signed with valid security keys and the secure delegation was added to the root zone on 1 April 2011.v3.co.uk/v3-uk/news/2039287/verisign-adds-dnssec-com-domain-boost-online-security/

=Stub resolvers=

Stub resolvers are "minimal DNS resolvers that use recursive query mode to offload most of the work of DNS resolution to a recursive name server."[ref]
  

  An earlier definition was given in an earlier RFC:
  

[/ref] A stub resolver will simply forward a request to a recursive name server, and use the Authenticated Data (AD) bit in the response as a "hint to find out whether the recursive name server was able to validate signatures for all of the data in the Answer and Authority sections of the response." Microsoft Windows uses a stub resolver, and Windows Server 2008 R2 and Windows 7 in particular use a non-validating but AD-bit-aware stub resolver.
A validating stub resolver can also potentially perform its own signature validation by setting the Checking Disabled (CD) bit in its query messages. A validating stub resolver uses the CD bit to perform its own recursive authentication. Using such a validating stub resolver gives the client end-to-end DNS security for domains implementing DNSSEC, even if the Internet Service Provider or the connection to them is not trusted.
For the non-validating stub resolver to place any real reliance on DNSSEC services, the stub resolver must trust both the recursive name servers in question (which is usually controlled by the Internet Service Provider) and the communication channels between itself and those name servers, using methods such as IPsec, SIG(0), or TSIG.

Trust anchors and authentication chains

To be able to prove that a DNS answer is correct, you need to know at least one key or DS record that is correct from sources other than the DNS.  These starting points are known as trust anchors and are typically obtained with the operating system or via some other trusted source.  When DNSSEC was originally designed, it was thought that the only trust anchor that would be needed was for the DNS root. The root anchors were first published on 15 July 2010.root-anchors
An authentication chain is a series of linked DS and DNSKEY records, starting with a trust anchor to the authoritative name server for the domain in question.  Without a complete authentication chain, an answer to a DNS lookup cannot be securely authenticated.

Signatures and zone signing

To limit replay attacks, there are not only the normal DNS TTL values for caching purposes, but additional timestamps in RRSIG records to limit the validity of a signature. Unlike TTL values which are relative to when the records were sent, the timestamps are absolute.  This means that all security-aware DNS resolvers must have clocks that are fairly closely in sync, say to within a few minutes.
These timestamps imply that a zone must regularly be re-signed and re-distributed to secondary servers, or the signatures will be rejected by validating resolvers.

Key management

DNSSEC involves many different keys, stored both in DNSKEY records, and from other sources to form trust anchors.
In order to allow for replacement keys, a key rollover scheme is required.  Typically, this involves first rolling out new keys in new DNSKEY records, in addition to the existing old keys.  Then, when it is safe to assume that the time to live values have caused the caching of old keys to have passed, these new keys can be used.  Finally, when it is safe to assume that the caching of records using the old keys have expired, the old DNSKEY records can be deleted.   This process is more complicated for things such as the keys to trust anchors, such as at the root, which may require an update of the operating system.
Keys in DNSKEY records can be used for two different things and typically different DNSKEY records are used for each.  First, there are Key Signing Keys (KSK) which are used to sign other DNSKEY records.  Second, there are Zone Signing Keys (ZSK) which are used to sign other records.  Since the ZSKs are under complete control and use by one particular DNS zone, they can be switched more easily and more often.  As a result, ZSKs can be much shorter than KSKs and still offer the same level of protection while reducing the size of the RRSIG/DNSKEY records.
When a new KSK is created, the DS record must be transferred to the parent zone and published there.  The DS records use a message digest of the KSK instead of the complete key in order to keep the size of the records small.  This is helpful for zones such as the .  The procedure to update DS keys in the parent zone is also simpler than earlier DNSSEC versions that required DNSKEY records to be in the parent zone.

DANE Working Group

DNS-based Authentication of Named Entities (DANE) is an IETF working groupIETF: DNS-based Authentication of Named Entities (dane) with the goal of developing protocols and techniques that allow Internet applications to establish cryptographically secured communications with TLS, DTLS, SMTP, and S/MIME based on DNSSEC.
The new protocols will enable additional assurances and constraints for the traditional model based on Public Key Infrastructure. They will also enable domain holders to assert certificates for themselves, without reference to third-party certificate authorities.Grepular: DNSSEC Will Kill Commercial CAs
Support for DNSSEC stapled certificates was enabled in Google Chrome 14, while native support is currently underway.Bugzilla@Mozilla: Bug 672600 - Use DNSSEC/DANE chain stapled into TLS handshake in certificate chain validation

History

DNS is a critical and fundamental Internet service, yet in 1990 Steve Bellovin discovered serious security flaws in it.  Research into securing it began, and dramatically increased when his paper was made public in 1995."Using the Domain Name System for System Break-Ins" by Steve Bellovin, 1995  The initial RFC 2065 was published by the IETF in 1997, and initial attempts to implement that specification led to a revised (and believed fully workable) specification in 1999 as IETF RFC 2535.  Plans were made to deploy DNSSEC based on RFC 2535.
Unfortunately, the IETF RFC 2535 specification had very significant problems scaling up to the full Internet; by 2001 it became clear that this specification was unusable for large networks. In normal operation DNS servers often get out of sync with their parents. This isn't usually a problem, but when DNSSEC is enabled, this out-of-sync data could have the effect of a serious self-created denial of service.  The original DNSSEC required a complex six-message protocol and a lot of data transfers to perform key changes for a child (DNS child zones had to send all of their data up to the parent, have the parent sign each record, and then send those signatures back to the child for the child to store in a SIG record).  Also, public key changes could have absurd effects; for example, if the ".  Thus, DNSSEC as defined in RFC 2535 could not scale up to the Internet.
The IETF fundamentally modified DNSSEC, which is called DNSSEC-bis when necessary to distinguish it from the original DNSSEC approach of RFC 2535.  This new version uses "delegation signer (DS) resource records" to provide an additional level of indirection at delegation points between a parent and child zone. In the new approach, when a child's master public key changes, instead of having to have six messages for every record in the child, there is one simple message: the child sends the new public key to its parent (signed, of course). Parents simply store one master public key for each child; this is much more practical. This means that a little data is pushed to the parent, instead of massive amounts of data being exchanged between the parent and children. This does mean that clients have to do a little more work when verifying keys. More specifically, verifying a DNS zone's KEY RRset requires two signature verification operations instead of the one required by RFC 2535 (there is no impact on the number of signatures verified for other types of RRsets). Most view this as a small price to pay, since it makes DNSSEC deployment more practical.

Zone enumeration issue, controversy, and NSEC3

Although the goal of DNSSEC is to increase security, DNSSEC as defined in RFCs 4033 through 4035 introduces a new problem that many believe is a new security vulnerability: the zone enumeration (aka zone walking) issue. DNSSEC forces the exposure of information that by normal DNS best practice is kept private.  NSEC3 (RFC 5155) was developed to address this issue; it was released in March 2008.  NSEC3 mitigates, but does not eliminate, zone enumeration, since it is possible to exhaustively search the set of all possible names in a zone. Bernstein, 2009

Why DNS zone data is normally kept private

When the DNS protocol was designed, it was not intended to be a repository for hidden information. However, since the DNS does house information about the internals of a network related to a given domain, many view the contents of their DNS database as private. In particular, DNS systems are typically configured so that most users are not allowed to download the entire list of names or other information in a zone. Such a list would make an attacker's job easier, since they would otherwise need to manually collect information about what machines exist. Some administrators publish sensitive information in their DNS databases which is even more valuable to an attacker. The widely used book DNS and BIND (4th edition) by Albitz and Liu explains it this way: 
 In addition, the information from an enumerated zone can be used as a key for multiple WHOIS queries; this would reveal registrant data which many registries are under strict legal obligations to protect under various contracts.
It is unclear whether DNSSEC is legal to deploy at all in many countries, unless such lists can be kept private. DENIC has stated that DNSSEC's zone enumeration issue violates Germany's Federal Data Protection Act, and other European countries have similar privacy laws forbidding the public release of certain kinds of information.

DNSSEC reveals zone data

DNSSEC's original design required that the entire list of zone names be revealed to all. As stated in RFC 4033, 
There is an "obvious" solution, called a split-horizon DNS, which is how DNS without DNSSEC is sometimes deployed — but this approach does not work well with DNSSEC. In the "split-horizon DNS" approach, the DNS server denies the existence of names to some clients, and provides correct information to other clients. However, since DNSSEC information is cryptographically signed as authoritative, an attacker could request the signed "does not exist" record, then retransmit the record to cause a denial of service. DNSSEC fundamentally changes DNS so it can provide authoritative information; thus, it does not work well with methods based on providing false information to some users. Research has produced recommendations to properly combine these two DNS features.Split-View DNSSEC Operational Practices
DNSSEC introduced this problem because it must be able to report when a name is not found. DNS servers supporting DNSSEC must be able to sign that not-found report — otherwise a not-found report could be easily spoofed. Yet for security reasons the signing key should not be online. As a result, DNSSEC was designed to report a signed message that reports that a given range of names does not exist, which can be signed ahead-of-time offline.  Unfortunately, this information is enough for an attacker to gain much more information than would have been available to them otherwise — it is enough to enable an attacker to quickly gather all the names in a zone, and then through targeted queries on the names to reconstruct all or most of a zone's data.
As noted earlier, DNSSEC could be used as the basis for a worldwide public key infrastructure for email addresses, by using DNS to serve email certificates and DNSSEC to validate them. However, this DNSSEC issue makes this unlikely for most organizations, at least if used directly. As RFC 4398 states, "If an organization chooses to issue certificates for its employees, placing CERT RRs in the DNS by owner name, and if DNSSEC (with NSEC) is in use, it is possible for someone to enumerate all employees of the organization.  This is usually not considered desirable, for the same reason that enterprise phone listings are not often publicly published and are even marked confidential."

Initial reaction

Many of the participants on the IETF DNS Extensions working group originally stated that zone enumeration was not a significant problem, arguing that the DNS data was—or should be—public. However, registrars and many large organizations told the working group members that DNSSEC as currently defined was unacceptable, and that they would not or legally could not deploy it.

On-line signing

One approach to preventing zone enumeration was codified in RFC 4470.  Instead of signing the not-found responses in advance, a not-found response is generated for each query.  For example, if a query is received for 'b.com', instead of serving a previously signed response saying there are no names between 'a.com' and 'mail.com', which reveals the existence of 'mail.com', the response might be that 'there are no names between b.com and ba.com'.  If the next query asks about 'ba.com', the response might be 'there are no names between ba.com and baa.com'.  This makes enumerating the entire zone impractical.
This approach has some disadvantages.  It requires a signing key to be kept on-line and accessible to each DNS server.  Many zone signing keys are kept on-line anyway to support automatic re-signing or dynamic zone updates, but these functions are needed only on a single master DNS server, while to support on-line signing the zone signing key must be kept on each authoritative DNS server.  Some authoritative servers must be accessible from the Internet and ideally these will be widely dispersed, making it difficult to keep the keys under control.  Care is also required to prevent an attacker flooding the DNS server with requests for bogus names, denying service to legitimate users.

NSEC3

After deliberation, an extension was developed: "DNSSEC Hashed Authenticated Denial of Existence" (informally called "NSEC3"). In this approach, DNSSEC-aware servers can choose to send an "NSEC3" record instead of an NSEC record when a record is not found. The NSEC3 record is signed, but instead of including the name directly (which would enable zone enumeration), the NSEC3 record includes a cryptographically hashed value of the name. The NSEC3 record includes both a hash after a number of iterations and an optional salt, both of which reduce the effectiveness of pre-computed dictionary attacks. Salting increases the number of dictionaries necessary for an attack, while additional hash iterations increase the cost of computing each dictionary.
RFC 5155 formally defined NSEC3 in March 2008.

Deployment

The Internet is critical infrastructure, yet its operation depends on the fundamentally insecure DNS.
Thus, there is strong incentive to secure DNS, and deploying DNSSEC is generally considered to be a critical part of that effort.
For example, the U.S. National Strategy to Secure Cyberspace specifically identified the need to secure DNS.U.S. National Strategy to Secure Cyberspace, p. 30 February 2003
Wide-scale deployment of DNSSEC could resolve many other security problems as well, such as secure key distribution for e-mail addresses.
DNSSEC deployment in large-scale networks is also challenging. Ozment and Schechter observe that DNSSEC (and other technologies) has a "bootstrap problem": users typically only deploy a technology if they receive an immediate benefit, but if a minimal level of deployment is required before any users receive a benefit greater than their costs (as is true for DNSSEC), it is difficult to deploy. DNSSEC can be deployed at any level of a DNS hierarchy, but it must be widely available in a zone before many others will want to adopt it. DNS servers must be updated with software that supports DNSSEC, and DNSSEC data must be created and added to the DNS zone data. A TCP/IP-using client must have their DNS resolver (client) updated before it can use DNSSEC's capabilities. What is more, any resolver must have, or have a way to acquire, at least one public key that it can trust before it can start using DNSSEC.
DNSSEC implementation can add significant load to some DNS servers. Common DNSSEC-signed responses are far larger than the default UDP size of 512 bytes. In theory, this can be handled through multiple IP fragments, but many "middleboxes" in the field do not handle these correctly. This leads to the use of TCP instead. Yet many current TCP implementations store a great deal of data for each TCP connection; heavily loaded servers can run out of resources simply trying to respond to a larger number of (possibly bogus) DNSSEC requests. Some protocol extensions, such as TCP Cookie Transactions, have been developed to reduce this loading. To address these challenges, significant effort is ongoing to deploy DNSSEC, because the Internet is so vital to so many organizations.

Early deployments

Early adopters include Brazil (.bg), Czech Republic (.pr) and Sweden (. DNSSEC RIPE NCC, who have signed all the reverse lookup records (in-addr.RIPE NCC DNSSEC Policy ARIN is also signing their reverse zones.
IANA publicly tested a sample signed root since June 2007. During this period prior to the production signing of the root, there were also several alternative trust anchors. The IKS Jena introduced one on January 19, 2006,dns-wg archive: Signed zones list the Internet Systems Consortium introduced another on March 27 of the same year,ISC Launches DLV registry to kick off worldwide DNSSEC deployment while ICANN themselves announced a third on February 17, 2009.Interim Trust Anchor Repository
A wide variety of pilot projects and experiments are and have been performed. dnssec. There is also a Google Map of World Wide DNSSEC Deployment.
On June 2, 2009, the Public Interest Registry signed the .. On June 23, 2010, 13 registrars were listed as offering DNSSEC records for .
VeriSign ran a pilot project to allow .net domains to register themselves for the purpose of NSEC3 experimentation. On February 24, 2009, they announced that they would deploy DNSSEC across all their top level domains (.net, etc.) within 24 months,VeriSign: We will support DNS security in 2011 and on November 16 of the same year, they said the .net domains would be signed by the first quarter of 2011, after delays caused by technical aspects of the implementation.com Domain Finally Safe and Verisign's DNSSEC VP, Matt Larson, won InfoWorld's Technology Leadership Award for 2011 for his role in advancing DNSSEC.Verisign's Matt Larson Wins 2011 InfoWorld Technology Leadership AwardThe InfoWorld 2011 Technology Leadership Awards

Deployment at the DNS root

DNSSEC was first deployed at the root level on July 15, 2010. This is expected to greatly simplify the deployment of DNSSEC resolvers, since the root trust anchor can be used to validate any DNSSEC zone that has a complete chain of trust from the root. Since the chain of trust must be traced back to a trusted root without interruption in order to validate, trust anchors must still be configured for secure zones if any of the zones above them are not secure. For example if the zone "signed.org" was secured but the "example.org"-zone and the root are signed a trust anchor has to be deployed in order to validate the zone.
Political issues surrounding signing the root have been a continuous concern, primarily about some central issues:

=Planning=

In September 2008, ICANN and VeriSign each published implementation proposals It is unclear if the comments received affected the design of the final deployment plan.
On June 3, 2009, the National Institute of Standards and Technology (NIST) announced plans to sign the root by the end of 2009, in conjunction with ICANN, VeriSign and the NTIA.
On October 6, 2009, at the 59th RIPE Conference meeting, ICANN and VeriSign announced the planned deployment timeline for deploying DNSSEC within the root zone. This means the keys that were used to sign the zone use are deliberately unverifiable; the reason for this deployment was to monitor changes in traffic patterns caused by the larger responses to queries requesting DNSSEC resource records.
The .com, .edu later in 2010 and 2011.com TLD Country code top-level domains were able to deposit keys starting in May 2010.More security for root DNS servers Heise Online, 24 March 2010
 more than 25% of top-level domains are signed with DNSSEC.CircleID: DNSSEC Update from ICANN 42 in Dakar

=Implementation=

On January 25, 2010, the L (ell) root server began serving a Deliberately Unvalidatable Root Zone (DURZ). The zone uses signatures of a SHA-2 (SHA-256) hash created using the RSA algorithm, as defined in RFC 5702.1. "RSA public keys for use with RSA/SHA-256 are stored in DNSKEY resource records (RRs) with the algorithm number 8."RFC 5702, §3.1. "RSA/SHA-256 signatures are stored in the DNS using RRSIG resource records (RRs) with algorithm number 8." As of May 2010, all thirteen root servers have begun serving the DURZ.  On July 15, 2010, the first root full production DNSSEC root zone was signed, with the SOA serial 2010071501.   Root trust anchors are available from IANA.

Deployment at the TLD level

Underneath the root there is a large set of top level domains that must be signed in order to achieve full DNSSEC deployment.  The List of Internet top-level domains provides details about which of the existing top level domains have been signed and linked to the root.

DNSSEC Lookaside Validation

In March 2006, the Internet Systems Consortium introduced the DNSSEC Lookaside Validation registry. At the time it was imagined that a validator might have to maintain large numbers of trust anchors corresponding to signed subtrees of the DNS. The DLV registry maintains a central list of trust anchors, instead of each validator repeating the work of maintaining its own list.
To use DLV, a validator that supports it is needed, such as BIND or Unbound, configured with a trust anchor for a DLV zone. This zone contains DLV records;RFC 4431, "The DNSSEC Lookaside Validation (DLV) DNS Resource Record" these have exactly the same format as DS records, but instead of referring to a delegated sub-zone, they refer to a zone elsewhere in the DNS tree. When the validator cannot find a chain of trust from the root to the RRset it is trying to check, it searches for a DLV record that can provide an alternative chain of trust.RFC 5074, "DNSSEC Lookaside Validation (DLV)"
DLV continues to be useful after the root has been signed. While there are gaps in the chain of trust, such as unsigned top-level domains, or registrars that do not support DNSSEC delegations, hostmasters of lower-level domains can use DLV to make it easier for their users to validate their DNS data.

DNSSEC deployment initiative by the U.S. federal government

The Science and Technology Directorate of the U.S. Department of Homeland Security (DHS) sponsors the "DNSSEC Deployment Initiative".
This initiative encourages "all sectors to voluntarily adopt security measures that will improve security of the Internet's naming infrastructure, as part of a global, cooperative effort that involves many nations and organizations in the public and private sectors."
DHS also funds efforts to mature DNSSEC and get it deployed inside the U.S. federal government.
It was reportedDepartment of Homeland and Security wants master key for DNS Heise News, 30 March 2007 that on March 30, 2007, the U.S. Department of Homeland Security proposed "to have the key to sign the DNS root zone solidly in the hands of the US government."  However no U.S. Government officials were present in the meeting room and the comment that sparked the article was made by another party.  DHS later commentedAnalysis: of Owning the keys to the Internet UPI, April 21, 2007UPI Analysis: Owning the keys to the Internet  March 24, 2011 - First link is dead, this is believed to be the same content on why they believe others jumped to the false conclusion that the U.S. Government had made such a proposal: "The U.S. Department of Homeland Security is funding the development of a technical plan for implementing DNSSec, and last October distributed an initial draft of it to a long list of international experts for comments.  The draft lays out a series of options for who could be the holder, or "operator," of the Root Zone Key, essentially boiling down to a governmental agency or a contractor.  "Nowhere in the document do we make any proposal about the identity of the Root Key Operator," said Maughan, the cyber-security research and development manager for Homeland Security."

DNSSEC deployment in the U.S. federal government

The National Institute of Standards and Technology (NIST) published NIST Special Publication 800-81 Secure Domain Name System (DNS) Deployment Guide on May 16, 2006, with guidance on how to deploy DNSSEC. NIST intended to release new DNSSEC Federal Information Security Management Act (FISMA) requirements in NIST SP800-53-R1, referencing this deployment guide. U.S. agencies would then have had one year after final publication of NIST SP800-53-R1 to meet these new FISMA requirements.  NIST had suggested using split domains, a technique that is known to be possible but is difficult to deploy correctly, and has the security weaknesses noted above.
On 22 August 2008, the Office of Management and Budget (OMB) released a memorandum requiring U.S. Federal Agencies to deploy DNSSEC across .gov root must be signed by January 2009, and all subdomains under .Memorandum For Chief Information Officers Executive Office Of The President — Office Of Management And Budget, 22 August 2008  While the memo focuses on .S. Defense Information Systems Agency says it intends to meet OMB DNSSEC requirements in the .S. military) domain as well.  NetworkWorld's Carolyn Duffy Marsan stated that DNSSEC "hasn't been widely deployed because it suffers from a classic chicken-and-egg dilemma... with the OMB mandate, it appears the egg is cracking."Feds tighten security on .gov Network World, 22 September 2008

DNSSEC deployment in resolvers

Several ISPs have started to deploy DNSSEC-validating DNS recursive resolvers. Comcast became the first major ISP to do so in the United States, announcing their intentions on October 18, 2010Comcast Blog - DNS Security Rollout Begins, October 18, 2010Comcast DNSSEC Public Service Announcement Video, October 18, 2010 and completing deployment on January 11, 2012.Comcast Completes DNSSEC Deployment, January 11, 2012
According to CircleID's study, the proportion of clients who exclusively use DNS resolvers that perform DNSSEC validation has risen to 8.3% in May 2013.

=Google Public DNS=

Google Public DNS is a freely provided, public DNS service, fully supporting DNSSEC.
On its launch in 2009, Google Public DNS did not support DNSSEC. RRSIG records of course could be queried, but the AD flag (Authenticated Data, meaning the server was able to validate signatures for all of the data) was never set.
On January 28, 2013, Google's DNS servers silently started providing DNSSEC validation information,Google's Public DNS does DNSSEC validation nanog mailing list archives, 29 January 2013 but only if the client explicitly set client the DNSSEC OK (DO) flag on its query.
On May 6, 2013, Google Public DNS has enabled the DNSSEC validation by default; meaning all queries will be validated unless clients explicitly opt out.Google Public DNS Now Supports DNSSEC Validation Google  Code Blog, 1 June 2013

=Issues=

It has been known to break proper MX record lookup on Microsoft Exchange 2013 and older causing #550 4.4.7 QUEUE. 


Tools

DNSSEC deployment requires software on the server and client side. Some of the tools that support DNSSEC include:





Further reading



Organizations/websites

Standards

Other documents


