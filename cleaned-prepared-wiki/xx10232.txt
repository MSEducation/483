[[Ruby (programming language)]]

CATEGORIES: Class-based programming languages, Dynamically typed programming languages, Scripting languages, Object-oriented programming languages, Articles with example Ruby code, Ruby programming language, Programming languages created in 1995, Text-oriented programming languages, Software using the BSD license

Ruby is a dynamic, reflective, object-oriented, general-purpose programming language. It was designed and developed in the mid-1990s by Yukihiro "Matz" Matsumoto in Japan.
According to its authors, Ruby was influenced by Perl, Smalltalk, Eiffel, Ada, and Lisp. It supports multiple programming paradigms, including functional, object-oriented, and imperative. It also has a dynamic type system and automatic memory management.

History

Early concept

Ruby was conceived on February 24, 1993. In a 1999 post to the ruby-talk mailing list, Ruby author Yukihiro Matsumoto describes some of his early ideas about the language:
Matsumoto describes the design of Ruby as being like a simple Lisp language at its core, with an object system like that of Smalltalk, blocks inspired by higher-order functions, and practical utility like that of Perl.

The name "Ruby"

The name "Ruby" originated during an online chat session between Matsumoto and Keiju Ishitsuka on February 24, 1993, before any code had been written for the language.nicksieger. Matsumoto chose the latter in a later e-mail to Ishitsuka.nagaokaut.ac.rb/ruby/ruby-talk/88819 "historic The decisive moment of the language name Ruby. (Re: ANN ruby 1.8.1)" — E-mail from Hiroshi Sugihara to ruby-talk Matsumoto later noted a factor in choosing the name "Ruby" – it was the birthstone of one of his colleagues.

First publication

The first public release of Ruby 0.95 was announced on Japanese domestic newsgroups on December 21, 1995. The release coincided with the launch of the Japanese-language ruby-list mailing list, which was the first mailing list for the new language.
Already present at this stage of development were many of the features familiar in later releases of Ruby, including object-oriented design, classes with inheritance, mixins, iterators, closures, exception handling and garbage collection."TUTORIAL – ruby's features" — E-mail From Yukihiro Matsumoto to ruby-list

Early releases

Following the release of Ruby 0.95 in 1995, several stable versions of Ruby were released in the following years:
In 1997, the first article about Ruby was published on the Web. In the same year, Matsumoto was hired by netlab.
In 1998, the Ruby Application Archive was launched by Matsumoto, along with a simple English-language homepage for Ruby.
In 1999, the first English language mailing list ruby-talk began, which signaled a growing interest in the language outside of Japan.linuxdevcenter.html An Interview with the Creator of Ruby In this same year, Matsumoto and Keiju Ishitsuka wrote the first book on Ruby, The Object-oriented Scripting Language Ruby (オブジェクト指向スクリプト言語 Ruby), which was published in Japan in October 1999. It would be followed in the early 2000s by around 20 books on Ruby published in Japanese.
By 2000, Ruby was more popular than Python in Japan. In September 2000, the first English language book Programming Ruby was printed, which was later freely released to the public, further widening the adoption of Ruby amongst English speakers. In early 2002, the English-language ruby-talk mailing list was receiving more messages than the Japanese-language ruby-list, demonstrating Ruby's increasing popularity in the English-speaking world.

Ruby 1.8

Ruby 1.8 was initially released in August 2003, was stable for a long time, and was retired June 2013. Although deprecated, there is still code based on it. Ruby 1.8 is incompatible with Ruby 1.9.
Ruby 1.8 has been the subject of several industry standards. The language specifications for Ruby were developed by the Open Standards Promotion Center of the Information-Technology Promotion Agency (a Japanese government agency) for submission to the Japanese Industrial Standards Committee and then to the International Organization for Standardization. It was accepted as a Japanese Industrial Standard (JIS X 3017) in 2011プログラム言語RubyのJIS規格（JIS X 3017）制定について and an international standard (ISO/IEC 30170) in 2012.プログラム言語Ruby、国際規格として承認
Around 2005, interest in the Ruby language surged in tandem with Ruby on Rails, a popular web application framework written in Ruby. Rails is frequently credited with making Ruby "famous". Devarticles. Retrieved on 2013-07-17.

Ruby 1.9

Ruby 1.9 was released in December 2007. Effective with Ruby 1.9.3, released October 31, 2011, Ruby switched from being dual-licensed under the Ruby License and the GPL to being dual-licensed under the Ruby License and the two-clause BSD license. Adoption of 1.9 was slowed by changes from 1.8 which required many popular third party gems to be rewritten.
Ruby 1.9 introduces many significant changes over the 1.8 series.9: What to Expect. Slideshow.org. Retrieved on 2013-07-17.  Examples:

Ruby 2.0

Ruby 2.0 added several new features, including:
Ruby 2.0 is intended to be fully backward compatible with Ruby 1.9.3. As of the official 2.0.0 release on February 24, 2013, there were only five known (minor) incompatibilities. (2013-02-24) Ruby 2.0.0-p0 is released. Ruby-lang. Retrieved on 2013-07-17.

Ruby 2.1

Ruby 2.1.0 was released on Christmas Day in 2013.

Philosophy

Matsumoto has said that Ruby is designed for programmer productivity and fun, following the principles of good user interface design.com) At a Google Tech Talk in 2008 Matsumoto further stated, "I hope to see Ruby help every programmer in the world to be productive, and to enjoy programming, and to be happy. That is the primary purpose of Ruby language." He stresses that systems design needs to emphasize human, rather than computer, needs:The Philosophy of Ruby, A Conversation with Yukihiro Matsumoto, Part I by Bill Venners on 2003-09-29 (Artima Developer)
Ruby is said to follow the principle of least astonishment (POLA), meaning that the language should behave in such a way as to minimize confusion for experienced users. Matsumoto has said his primary design goal was to make a language which he himself enjoyed using, by minimizing programmer work and possible confusion. He has said that he had not applied the principle of least surprise to the design of Ruby, but nevertheless the phrase has come to be closely associated with the Ruby programming language. The phrase has itself been a source of surprise, as novice users may take it to mean that Ruby's behaviors try to closely match behaviors familiar from other languages. In a May 2005 discussion on the newsgroup comp.ruby, Matsumoto attempted to distance Ruby from POLA, explaining that because any design choice will be surprising to someone, he uses a personal standard in evaluating surprise. If that personal standard remains consistent, there would be few surprises for those familiar with the standard.Ruby Weekly News 23rd – 29th May 2005
Matsumoto defined it this way in an interview:

Features

Semantics

Ruby is object-oriented: every value is an object, including classes and instances of types that many other languages designate as primitives (such as integers, booleans, and "null"). Variables always hold references to objects. Every function is a method and methods are always called on an object. Methods defined at the top level scope become members of the Object class. Since this class is an ancestor of every other class, such methods can be called on any object. They are also visible in all scopes, effectively serving as "global" procedures. Ruby supports inheritance with dynamic dispatch,  mixins and singleton methods (belonging to, and defined for, a single instance rather than being defined on the class). Though Ruby does not support multiple inheritance, classes can import modules as mixins.
Ruby has been described as a multi-paradigm programming language: it allows procedural programming (defining functions/variables outside classes makes them part of the root, 'self' Object), with object orientation (everything is an object) or functional programming (it has anonymous functions, closures, and continuations; statements all have values, and functions return the last evaluation). It has support for introspection, reflection and metaprogramming, as well as support for interpreter-basedGreen threads threads. Ruby features dynamic typing, and supports parametric polymorphism.
According to the Ruby FAQ,Ruby FAQ "If you like Perl, you will like Ruby and be right at home with its syntax. If you like Smalltalk, you will like Ruby and be right at home with its semantics. If you like Python, you may or may not be put off by the huge difference in design philosophy between Python and Ruby/Perl."

Syntax

The syntax of Ruby is broadly similar to that of Perl and Python. Class and method definitions are signaled by keywords. In contrast to Perl, variables are not obligatorily prefixed with a sigil. When used, the sigil changes the semantics of scope of the variable. One difference from C and Perl is that keywords are typically used to define logical code blocks, without braces (i.e., pair of { and }). For practical purposes there is no distinction between expressions and statements.g. multiple assignment).  statement ... can not be part of expression unless grouped within parentheses.  Line breaks are significant and taken as the end of a statement; a semicolon may be equivalently used. Unlike Python, indentation is not significant.
One of the differences of Ruby compared to Python and Perl is that Ruby keeps all of its instance variables completely private to the class and only exposes them through accessor methods (attr_writer, attr_reader, etc.). Unlike the "getter" and "setter" methods of other languages like C++ or Java, accessor methods in Ruby can be created with a single line of code via metaprogramming; however, accessor methods can also be created in the traditional fashion of C++ and Java. As invocation of these methods does not require the use of parentheses, it is trivial to change an instance variable into a full function, without modifying a single line of code or having to do any refactoring achieving similar functionality to C# and VB.
Python's property descriptors are similar, but come with a tradeoff in the development process. If one begins in Python by using a publicly exposed instance variable, and later changes the implementation to use a private instance variable exposed through a property descriptor, code internal to the class may need to be adjusted to use the private variable rather than the public property. Ruby's design forces all instance variables to be private, but also provides a simple way to declare set and get methods. This is in keeping with the idea that in Ruby, one never directly accesses the internal members of a class from outside of it; rather, one passes a message to the class and receives a response.
See the Examples section below for samples of code demonstrating Ruby syntax.

Differences from other languages

Some features which differ notably from languages such as C or Perl:
Some features which differ notably from other languages:
A list of so-called gotchas may be found in Hal Fulton's book The Ruby Way, 2nd ed (ISBN 0-672-32884-4), Section 1.5. A similar list in the 1st edition pertained to an older version of Ruby (version 1.6), some problems of which have been fixed in the meantime. For example, retry now works with while, until, and for, as well as with iterators.

Interaction

The Ruby official distribution also includes irb, an interactive command-line interpreter which can be used to test code quickly. The following code fragment represents a sample session using irb:

Examples

The following examples can be run in a Ruby shell such as Interactive Ruby Shell, or saved in a file and run from the command line by typing ruby .
Classic Hello world example:
Some basic Ruby code:
Conversions:

Strings

There are a variety of ways to define strings in Ruby.
The following assignments are equivalent:
Strings support variable interpolation:
The following assignments are equivalent and produce raw strings:

Collections

Constructing and using an array:
Constructing and using an associative array (in Ruby, called a hash):

Blocks and iterators

The two syntaxes for creating a code block:
A code block can be passed to a method as an optional block argument.  Many built-in methods have such arguments:
Parameter-passing a block to be a closure:
Creating an anonymous function:
Returning closures from a method:
Yielding the flow of program control to a block which was provided at calling time:
Iterating over enumerations and arrays using blocks:
A method such as inject can accept both a parameter and a block. The inject method iterates over each member of a list, performing some function on it while retaining an aggregate. This is analogous to the foldl function in functional programming languages. For example:
On the first pass, the block receives 10 (the argument to inject) as sum, and 1 (the first element of the array) as element. This returns 11, which then becomes sum on the next pass.  It is added to 3 to get 14, which is then added to 5 on the third pass, to finally return 19.
Using an enumeration and a block to square the numbers 1 to 10 (using a range):
Or invoke a method on each item (map is a synonym for collect):

Classes

The following code defines a class named Person. In addition to initialize, the usual constructor to create new objects, it has two methods: one to override the  comparison operator (so Array#sort can sort by age) and the other to override the to_s method (so Kernel#puts can format its output). Here, attr_reader is an example of metaprogramming in Ruby: attr_accessor defines getter and setter methods of instance variables, but attr_reader only getter methods. The last evaluated statement in a method is its return value, allowing the omission of an explicit return statement.
The preceding code prints three names in reverse age order:
Person is a constant and is a reference to a Class object.

=Open classes=

In Ruby, classes are never closed: methods can always be added to an existing class. This applies to all classes, including the standard, built-in classes. All that is needed to do is open up a class definition for an existing class, and the new contents specified will be added to the existing contents. A simple example of adding a new method to the standard library's Time class:
Adding methods to previously defined classes is often called monkey-patching. However, if performed recklessly, this practice can lead to collisions of behavior and subsequent unexpected results, and problems with code scalability.

Exceptions

An exception is raised with a raise call:
An optional message can be added to the exception:
Exceptions can also be specified by the programmer:
Alternatively, an exception instance can be passed to the raise method:
This last construct is useful when a custom exception class featuring a constructor which takes more than one argument needs to be raised:
Exceptions are handled by the rescue clause. Such a clause can catch exceptions which inherit from StandardError. Other flow control keywords that can be used when handling exceptions are else and ensure:
It is a common mistake to attempt to catch all exceptions with a simple rescue clause. To catch all exceptions one must write:
Or catch particular exceptions:
It is also possible to specify that the exception object be made available to the handler clause:
Alternatively, the most recent exception is stored in the magic global $!.
Several exceptions can also be caught:

Metaprogramming

Ruby code can programmatically modify, at runtime, aspects of its own structure that would be fixed in more rigid languages, such as class and method definitions. This sort of metaprogramming can be used to write more concise code and effectively extend the language.
For example, the following Ruby code generates new methods for the built-in String class, based on a list of colors. The methods wrap the contents of the string with an HTML tag styled with the respective color.
The generated methods could then be used like this:
To implement the equivalent in many other languages, the programmer would have to write each method (in_black, in_red, in_green, etc.) separately.
Some other possible uses for Ruby metaprogramming include:

More examples

More sample Ruby code is available as algorithms in the following articles:

Implementations

Matz's Ruby Interpreter

The official Ruby interpreter often referred to as the Matz's Ruby Interpreter or MRI. This implementation is written in C and uses its own Ruby-specific virtual machine.
The standardized and retired Ruby 1.8 implementation was written in C, as a single-pass interpreted language.8.7 is retired
Starting with Ruby 1.9, and continuing with Ruby 2.0 and 2.1, the official Ruby interpreter has been YARV ("Yet Another Ruby VM"), and this implementation has superseded the slower virtual machine used in previous releases of MRI.

Alternate implementations

, there are a number of alternative implementations of Ruby, including JRuby, Rubinius, MagLev, IronRuby, MacRuby (and its iOS counterpart, RubyMotion), mruby, HotRuby, Topaz and Opal. Each takes a different approach, with IronRuby, JRuby, MacRuby and Rubinius providing just-in-time compilation and MacRuby and mruby also providing ahead-of-time compilation.
Ruby 1.9 has several alternate implementations:
Other Ruby implementations include:
Ruby can also run on embedded system by mruby, developing in GitHub.
The maturity of Ruby implementations tends to be measured by their ability to run the Ruby on Rails (Rails) framework, because it is complex to implement and uses many Ruby-specific features. The point when a particular implementation achieves this goal is called "the Rails singularity". The reference implementation (MRI), JRuby, and Rubinius are all able to run Rails unmodified in a production environment. IronRuby[ref]

</ref><ref>

[/ref] is starting to be able to run Rails test cases, but is still far from being production-ready.

Platform support

Matsumoto originally did Ruby development on the 4.3BSD-based Sony NEWS-OS 3.x, but later migrated his work to SunOS 4.x, and finally to Linux.
By 1999, Ruby was known to work across many different operating systems, including NEWS-OS, SunOS, AIX, SVR4, Solaris, NEC UP-UX, NeXTSTEP, BSD, Linux, Mac OS, DOS, Windows, and BeOS.
Modern Ruby versions and implementations are available on many operating systems, such as Linux, BSD, Solaris, AIX, Mac OS X, Windows, Windows Phone, Windows CE, Symbian OS, BeOS, and IBM i.

Repositories and libraries

RubyGems is Ruby's package manager. A Ruby package is called a "gem" and can easily be installed via the command line. There are over 70,000 Ruby gems hosted on RubyGems.
Many new and existing Ruby libraries are hosted on GitHub, a service that offers version control repository hosting for Git.





Further reading

| first1    = Sandi
| last1     = Metz
| date      = September 5, 2012
| title     = Practical Object-Oriented Design in Ruby
| edition   = First
| publisher = Addison-Wesley
| page      = 272
| isbn      = 0-321-72133-0
| url       = 
}}
| first1    = Jeremy
| last1     = McAnally
| first2    = Assaf
| last2     = Arkin
| date      = March 28, 2009
| title     = Ruby in Practice
| edition   = First
| publisher = Manning Publications
| page      = 360
| isbn      = 1-933988-47-9
| url       =
}}
| first1    = Dave
| last1     = Thomas
| first2    = Chad
| last2     = Fowler
| first3    = Andy
| last3     = Hunt
| date      = April 28, 2009
| title     = Programming Ruby 1.9: The Pragmatic Programmers' Guide
| edition   = Third
| publisher = Pragmatic Bookshelf
| page      = 1000
| isbn      = 1-934356-08-5
| url       = 
}}
| first1    = David
| last1     = Black
| date      = June 4, 2009
| title     = The Well-Grounded Rubyist
| edition   = First
| publisher = Manning Publications
| page      = 520
| isbn      = 1-933988-65-7
| url       =
}}
| first1    = David
| last1     = Flanagan
| first2    = Yukihiro
| last2     = Matsumoto
| date      = January 25, 2008
| title     = The Ruby Programming Language
| edition   = First
| publisher = O'Reilly Media
| page      = 446
| isbn      = 0-596-51617-7
| url       = 
}}
| first1    = Kevin
| last1     = Baird
| date      = June 8, 2007
| title     = Ruby by Example: Concepts and Code
| edition   = First
| publisher = No Starch Press
| page      = 326
| isbn      = 1-59327-148-4
| url       = 
}}
| first1    = Michael
| last1     = Fitzgerald
| date      = May 14, 2007
| title     = Learning Ruby
| edition   = First
| publisher = O'Reilly Media
| page      = 255
| isbn      = 0-596-52986-4
| url       = 
}}
| first1    = Peter
| last1     = Cooper
| date      = March 26, 2007
| title     = Beginning Ruby: From Novice to Professional
| edition   = First
| publisher = Apress
| page      = 664
| isbn      = 1-59059-766-4
| url       = 
}}
| first1    = Hal
| last1     = Fulton
| date      = November 4, 2006
| title     = The Ruby Way
| edition   = Second
| publisher = Addison-Wesley
| page      = 888
| isbn      = 0-596-52369-6
| url       = 
}}
| first1    = Lucas
| last1     = Carlson
| first2    = Leonard
| last2     = Richardson
| date      = July 19, 2006
| title     = Ruby Cookbook
| edition   = First
| publisher = O'Reilly Media
| page      = 906
| isbn      = 0-596-52369-6
| url       = 
}}




