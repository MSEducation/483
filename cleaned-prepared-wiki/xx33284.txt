[[AmigaDOS]]

CATEGORIES: AmigaOS, Disk operating systems, MorphOS

AmigaDOS is the disk operating system of the AmigaOS, which includes file systems, file and directory manipulation, the command-line interface, and file redirection.
In AmigaOS 1.x, AmigaDOS was based on a TRIPOS port by MetaComCo, written in BCPL. BCPL does not use native pointers, so the more advanced functionality of the operating system was difficult to use and error-prone. The third-party AmigaDOS Resource Project arpbase.h, available from ftp://ftp.fi/pub/amiga/ancient/ex-amiga-s/archive/ a project begun by Amiga developer Charlie Heath, replaced many of the BCPL utilities with smaller, more sophisticated equivalents written in C and assembler, and provided a wrapper library, arp. This eliminated the interfacing problems in applications by automatically performing conversions from native pointers (such as those used by C or assembler) to BCPL equivalents and vice versa for all AmigaDOS functions.
From AmigaOS 2.x onwards, AmigaDOS was rewritten in C, retaining 1.x compatibility where possible. Starting with AmigaOS 4, AmigaDOS abandoned its legacy with BCPL. Starting from AmigaOS 4.1, AmigaDOS has been extended with 64-bit file-access support.

Console

The Amiga console is a standard Amiga virtual device, normally assigned to CON: and driven by console. It was developed from a primitive interface in AmigaOS 1.1, and became stable with versions 1.2 and 1.3, when it started to be known as AmigaShell and its original handler was replaced by newconsole.
The console had various features that were considered up to date when it was created in 1985, like Command Template Help, redirection to null ("NIL:"), and ANSI color terminal. The new console handler allowed many more features, such as command history, pipelines, and automatic creation of files when output was redirected. When the Internet became popular, the console could also receive redirection from Amiga Internet stacks employing Internet-enabled Amiga device handlers (e.g., TCP:, copy file TO TCP:Site/Port).
Unlike other systems of its age, AmigaDOS did not implement a proprietary character set; the developers chose to use the ANSIâ€“ISO standard ISO-8859-1 (Latin 1), which includes the ASCII character set. As in Unix systems, the Amiga console accepts only linefeed ("LF") as an end-of-line ("EOL") character. The Amiga console has support for accented characters as well as for characters created by combinations of 'dead keys' on the keyboard.

Syntax of AmigaDOS commands

This is an example of typical AmigaDOS command syntax:
| style="vertical-align:top;"|  1> Dir DF0:
|-
|
|-
| style="vertical-align:top;"|  1> Dir SYS: ALL
|-
|
|}

Command redirection

AmigaDOS can redirect the output of a command to files, pipes, a printer, the null device, and other Amiga devices.
| style="vertical-align:top;"|  1> Dir > SPEAK: ALL
|-
|
|}

Command template

AmigaDOS commands are expected to provide a standard "template" that describes the arguments they can accept. This can be used as a basic "help" feature for commands, although third-party replacement console handlers and shells, such as Bash or Zshell (ported from Unix), or KingCON often provide more verbose help for built-in commands.
On requesting the template for the command "Copy", the following output is obtained:
| style="vertical-align:top;"|  1> Copy ?
|-
|
|-
| style="vertical-align:top;"|  FROM, TO/A, ALL/S, QUIET/S 
|-
|
|}
By reading this template, a user can know that the following syntax is acceptable for the command:
|-
| style="vertical-align:top;"|Copy DF0:Filename TO  DH0:Directory/Filename
|}

Breaking commands and pausing console output

A user can terminate a program by invoking the key combination  (which will cause the input to be processed as a command as soon as the current command stops running).

Wildcard characters

Like other operating systems, AmigaDOS also provides wildcard characters that are substitutes for any character or any sequence of random characters in a string. Here is an example of wildcard characters in AmigaDOS commands:
| style="vertical-align:top;"|  1> Dir #?.info
|-
|
|}
The parsing of this is as follows. The "?" wildcard indicates "any character". Prefixing this with a "#" indicates "Any number of repetitions". This can be viewed as analogous to the regular expression ".*".

Scripting

AmigaDOS also has the feature of dealing with batch programming, which it calls "script" programming, and has a number of commands such as Echo, If, Then, EndIf, Val, and Skip to deal with structured script programming. Scripts are text-based files and can be created with AmigaDOS's internal text editor program, called Ed (unrelated to Unix's Ed), or with any other third-party text editor. To invoke a script program, AmigaDOS uses the command Execute.
| style="vertical-align:top;"|  1> Execute myscript
|-
|
|}
This method of executing scripts keeps the console window busy until the script has finished its scheduled job. Users cannot interact with the console window until the script ends or until they interrupt it.
While:
| style="vertical-align:top;"|  1> Run Execute myscript
|-
|
|}

Protection bits

Protection bits are flags that files, links and directories have in the filesystem. To change them one can either use the command Protect, or use the Information entry from the Icons menu in Workbench on selected files. AmigaDOS supports the following set of protection bits (abbreviated as HSPARWED):
The H-bit has often been misunderstood to mean "Hide", something that doesn't make any sense as files with the H-bit set remain visible in all respects, there are no options for C:List or C:Dir to display files with H-bit set any differently from other files. Where this misunderstanding has its origin is unclear.
Demonstration of H-bit in action:
 
 AmigaPrompt> which list
Workbench:C/List
AmigaPrompt> list workbench:c/list
Directory "workbench:c" on Thursday 30-Oct-08
list                              6464 --p-rwed 25-Feb-02 22:30:00
1 file - 14 blocks used
AmigaPrompt> which list
Workbench:C/List
AmigaPrompt> protect workbench:c/list +h
AmigaPrompt> which list
Workbench:C/List
AmigaPrompt> list workbench:c/list
Directory "workbench:c" on Thursday 30-Oct-08
list                              6464 h-p-rwed 25-Feb-02 22:30:00
1 file - 14 blocks used
AmigaPrompt> which list
RES list

|-
|
|}

Local and global variables

As any other DOS, Amiga deals with environment variables as used in batch programming.
There are both global and local variables, and they are referred to with a dollar sign in front of the variable name, for example $myvar. Global variables are available system-wide; local variables are only valid in the current shell. In case of name collision, local variables have precedence over global variables. Global variables can be set using the command SetEnv, while local variables can be set using the command Set. There are also the commands GetEnv and Get that can be used to print out global and local variables.
The examples below demonstrate simple usage:
 
 1> setenv foo blapp
1> echo $foo
blapp
1> set foo bar
1> echo $foo
bar
1> getenv foo
blapp
1> get foo
bar
1> type ENV:foo
blapp
1> setenv save foo $foo
1> type ENV:foo
bar
1> type ENVARC:foo
bar

|-
|
|}
Global variables are kept as files in ENV:, and optionally saved on disk in ENVARC: to survive reboot and power cycling. ENV: is by default an assign to RAM:Env, and ENVARC: is an assign to SYS:Prefs/Env-archive where SYS: refers to the boot device. On bootup, the content of ENVARC: is copied to ENV: for accessibility.
When programming AmigaDOS scripts, one must keep in mind that global variables are system-wide. All script-internal variables shall be set using local variables, or one risks conflicts over global variables between scripts. Also, global variables require filesystem access, which typically makes them slower to access than local variables.
Since ENVARC: is also used to store other system settings than just string variables (such as system settings, default icons and more), it tends to grow large over time, and copying everything over to ENV: located on RAM disk becomes expensive. This has led to alternative ways to set up ENV: by using dedicated ramdisk handlers that only copy files over from ENVARC: when the files are requested. Examples of such handlers are 
A rather insane example demonstrating creative abuse of global variables as well as Lab and Skip, the AmigaDOS variant of the infamous GOTO.safalra.com/programming/amigados/universal-register-machine/

Case sensitivity

AmigaDOS is in general case-insensitive. Indicating a device as "Dh0:", "DH0:" or "dh0:" always refers to the same partition; however, for file and directory names, this is filesystem-dependent, and some filesystems allow case sensitivity as a flag upon formatting. An example of such a file system is Smart File System. This is very convenient when dealing with software ported over from the mostly case-sensitive Un*x world, but causes much confusion for native Amiga applications, which assume case insensitivity. Advanced users will hence typically only use the case sensitivity flag for file systems used for software originating from Un*x.
Note also that re-casing of file, directory and volume names is allowed using ordinary methods; the commands "rename foo Foo" and "relabel Bar: bAr:" are valid and do exactly what is expected, in contrast to for example on Linux, where "mv foo Foo" results in the error message "mv: `foo' and `Foo' are the same file" on case-insensitive filesystems like VFAT.

Volume naming conventions

Partitions and physical drives are typically referred to as DF0: (floppy drive 0), DH0: (hard drive 0), etc.  However, unlike many operating systems, outside of built-in physical hardware devices like DF0: or HD0:, the names of the single disks, volumes and partitions are totally arbitrary: for example a hard disk partition could be named Work or System, or anything else at the time of its creation. Volume names can be used in place of the corresponding device names, so a disk partition on device DH0: called Workbench could be accessed either with the name DH0: or Workbench:. Users must indicate to the system that "Workbench" is the volume "Workbench:" by always typing the colon ":" when they are entering information in a requester form or into AmigaShell. 
If an accessed volume name cannot be found, the operating system will prompt the user to insert the disk with the given volume name, or allow the user to cancel the operation.
In addition, logical device names can be set with the "assign" command to any directory or device; programs often assigned a virtual volume name to their installation directory (for instance, a fictional wordprocessor called Writer might assign Writer: to DH0:Productivity/Writer). This allows for easy relocation of installed programs. The default name SYS: is used to refer to the volume that the system was booted from. Various other default names are provided to refer to important system locations. e.g. S: for startup scripts, C: for AmigaDOS commands, FONTS: for installed fonts, etc.
Assignment of volume labels can also be set on multiple directories, which will be treated as a union of their contents. For example FONTS: might be assigned to SYS:Fonts, then extended to include, for example, Work:UserFonts using the add option of the AmigaDos assign command. The system would then permit use of fonts installed in either directory. Listing FONTS: would show the files from both locations.

Conventions of names and typical behaviour of virtual devices

The physical device DF0: shares the same floppy drive mechanics with PC0:, which is the CrossDOS virtual device capable of reading PC formatted floppy disks. When any PC formatted floppy disk is inserted into the floppy drive, then the DF0: floppy Amiga icon will change to indicate that the disk is unknown to the normal Amiga device, and it will show four question marks ???? as the standard "unknown" volume name, while the PC0: icon will appear revealing the name of the PC formatted disk. Any disk change with Amiga formatted disks will invert this behaviour.

File systems

AmigaDOS supports various filesystems and variants. The first filesystem was simply called Amiga FileSystem, and was suitable mainly for floppy disks, because it did not support automatic booting from hard disks (on floppy, booting was done using code from the bootblock). It was soon replaced by FastFileSystem (FFS), and hence the original filesystem was known by the name of "Old" FileSystem (OFS). It also was more efficient on space and quite measurably faster, hence the name.
With AmigaOS 2.x, FFS became an official part of the OS and was soon expanded to recognise cached partitions, international partitions allowing accented characters in file and partition names, and finally (with MorphOS and AmigaOS 4) long filenames, up to 108 characters.
Both AmigaOS 4.x and MorphOS featured a new version of FFS called FastFileSystem 2. FFS2 incorporated all of the features of the original FFS including, as its author put it, "some minor changes". In order to preserve backwards compatibility, there were no major structural changes. (However, FF2 on AmigaOS 4.1 differs in that it can expand its features and capabilities with the aid of plug-ins). As with FFS2, the AmigaOS 4 and MorphOS version of Smart FileSystem is a fork of original SFS and are not 100% compatible with it.
Other filesystems like FAT12, FAT16, FAT32 from Windows or ext2 from Linux are available through easily installable (drag and drop) system libraries or third party modules such as FAT95  MorphOS 2 has built-in support for FAT filesystems.
AmigaOS 4.1 adopted a new filesystem called JXFS capable to support partitions over a Terabyte of size.
Alternate filesystems from third party manufacturers include Professional FileSystem which is a filesystem with an easy structure, based on metadata, allowing high internal coherence, capable of defragmenting itself on the fly, and does not require to be unmounted before being mounted again; and Smart FileSystem which is a journaling filesystem which performs journaled activities during system inactivities, and has been chosen by MorphOS as its standard filesystem.

Official variants of Amiga filesystems

Old File System/Fast File System
Fast File System 2 (AmigaOS4.x/MorphOS)
Both DOS6 and DOS7 feature International filenames featured in DOS2 and DO3, but not Directory Caching, which was abandoned due to bugs in the original implementation. DOS4 and DOS5 are not recommended for use for this reason.
Dostypes are backwards compatible with each other, but not forward compatible. A DOS7 formatted disk cannot be read on original Amiga FFS, and a DOS3 disk cannot be read on a KS1.3 Amiga. However, any disk formatted with DOS0 using FFS or FFS2 can be read by any version of the Amiga operating system. For this reason, DOS0 tended to be the format of choice of software developers distributing on floppy, except where a custom filesystem and bootblock was used - a common practice in Amiga games. Where software needed AmigaOS 2 anyway, DOS3 was generally used.

FastFileSystem2 plug-ins

With the first update of AmigaOS 4.0 in 2007, the first two plug-ins for FFS2 were released:

Filename extensions

AmigaDOS has only a single mandated filename extension: ". If a file called myprog exists, then its icon file must be called myprog. In addition to image data, the icon file also records program metadata such as options and keywords, its own position on the desktop (AmigaOS can "snapshot" icons in places defined by the user), and other information about the file.
With the exception of icons, the Amiga system does not identify file types using extensions, but instead will examine either the icon associated with a file or the binary header of the file itself to determine the file type.

Notes




