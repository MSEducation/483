[[Asynchronous method invocation]]

CATEGORIES: Threads (computing), Software design patterns

In (multithreaded) object-oriented programming, asynchronous method invocation (AMI), also known as asynchronous method calls or asynchronous pattern is a design pattern for asynchronous invocation of potentially long-running methods of an object.
It is equivalent to the IOU pattern described in 1996 by Allan Vermeulen.
The event-based asynchronous pattern in . This pattern is a variant of AMI whose implementation carries more overhead, but it is useful for objects representing software components.
In most programming languages a called method is executed synchronously, i.e. in the thread of execution from which it is invoked. If the method needs a long time to completion, e.g. because it is loading data over the internet, the calling thread is blocked until the method has finished. When this is not desired, it is possible to start a "worker thread" and invoke the method from there. In most programming environments this requires many lines of code, especially if care is taken to avoid the overhead that may be caused by creating many threads. AMI solves this problem in that it augments a potentially long-running ("synchronous") object method with an "asynchronous" variant that returns immediately, along with additional methods that make it easy to receive notification of completion, or to wait for completion at a later time.
One common use of AMI is in the active object design pattern. Alternatives are synchronous method invocation and future objects.[ref]
</ref>
An example for an application that may make use of AMI is a web browser that needs to display a web page even before all images are loaded.

Example

The following example is loosely based on a standard AMI style used in the .
Given a method Accomplish, one adds two new methods BeginAccomplish and EndAccomplish:

 Class Example 
 {
   Result       Accomplish(args …)
   IAsyncResult BeginAccomplish(args …)
   Result       EndAccomplish(IAsyncResult a)
   …
 }</code>
Upon calling BeginAccomplish, the client immediately receives an object of type AsyncResult (which implements the IAsyncResult interface), so it can continue the calling thread with unrelated work. In the simplest case, eventually there is no more such work, and the client calls EndAccomplish (passing the previously received object), which blocks until the method has completed and the result is available. The AsyncResult object normally provides at least a method that allows the client to query whether the long-running method has already completed:

 Interface IAsyncResult 
 {
    bool HasCompleted()
   …
 }</code>
One can also pass a callback method to BeginAccomplish, to be invoked when the long-running method completes. It typically calls EndAccomplish to obtain the return value of the long-running method. A problem with the callback mechanism is that the callback function is naturally executed in the worker thread (rather than in the original calling thread), which may cause race conditions.
In the .NET 2.0) using a method named AccomplishAsync instead of BeginAccomplish.
A superficial difference is that in this style the return value of the long-running method is passed directly to the callback method. Much more importantly, the API uses a special mechanism to run the callback method (which resides in an event object of type AccomplishCompleted) in the same thread in which BeginAccomplish was called. This eliminates the danger of race conditions, making the API easier to use and suitable for software components; on the other hand this implementation of the pattern comes with additional object creation and synchronization overhead.



Further reading


