[[Joel Spolsky]]

CATEGORIES: 1965 births, American emigrants to Israel, Israeli bloggers, American bloggers, Living people, People from New Mexico, American computer programmers, American technology writers, American computer businesspeople, American Jews, Israeli businesspeople, Israeli Jews, Microsoft employees, University of Pennsylvania alumni, Yale University alumni

Avram Joel Spolsky (born 1965) is a software engineer and writer. He is the author of Joel on Software, a blog on software development. He was a Program Manager on the Microsoft Excel team between 1991 and 1994. He later founded Fog Creek Software in 2000 and launched the Joel on Software blog. In 2008, he launched the now-successful Stack Overflow programmer Q&A site in collaboration with Jeff Atwood. Using the Stack Exchange software product which powers Stack Overflow, The Stack Exchange Network now hosts over 100 Q&A sites.

Biography

Spolsky grew up in Albuquerque, New Mexico and lived there until he was 15. In 1987, he returned to the United States to attend college. He studied at the University of Pennsylvania for a year before transferring to Yale University, where he was a member of Pierson College and graduated in 1991 with a BS summa cum laude in Computer Science.
Spolsky started working at Microsoft in 1991
In 2005, Spolsky co-produced and appeared in Aardvark'd: 12 Weeks with Geeks, a documentary documenting Fog Creek's development of Project Aardvark, a remote assistance tool.
Spolsky also co-founded Stack Overflow,
In 2011, Spolsky launched Trello, an online project management tool inspired by Kanban methodology.
He is the author of five books, including User Interface Design for Programmers and Smart and Gets Things Done. He is also the creator of The Joel Test.
Spolsky coined the term fix it twice for a process improvement method. It implies a quick, immediate solution for fixing an incident and a second, slower fix for preventing the same problem from occurring again by targeting the root cause..
Schlemiel the Painter's algorithm== 
In software development, a Schlemiel the painter's algorithm (sometimes, Schlemiel the painter algorithm) is a reference to a method that is inefficient because the programmer has overlooked some fundamental issues at the very lowest levels of software design. The term was coined in 2001 by Spolsky.  The term is not to be confused with the Painter's algorithm (used in image compositing), as the two are entirely unrelated.

Analogy

Spolsky used a Yiddish joke to illustrate a certain poor programming practice. In the joke, Schlemiel (also rendered Shlemiel) has a job painting the dotted lines down the middle of a road. Each day, Schlemiel paints less than he painted the day before. When he is asked why, Schlemiel complains that it is because each day he gets farther away from the paint can..
The inefficiency to which Spolsky was drawing an analogy was the poor programming practice of repeated concatenation of C-style null-terminated character arrays (that is, strings) in which the position of the destination string has to be recomputed from the beginning of the string each time because it is not carried over from a previous concatenation.
Spolsky condemned such inefficiencies as typical for programmers who had not been taught basic programming techniques before they began programming using higher level languages: "Generations of graduates are descending on us and creating Schlemiel The Painter algorithms right and left and they don't even realize it, since they fundamentally have no idea that strings are, at a very deep level, difficult."
Spolsky's essays have been cited as examples of clear writing "about their insular world in a way that wins the respect of their colleagues and the attention of outsiders.".

Example

The programming practice that Spolsky used to make his point was repeated concatenation of null-terminated character arrays ("strings").
The first step in every implementation of the standard C library function for concatenating strings is determining the length of the first string by checking each character in the array, starting from the beginning, to see if it is the terminating null character. Next, the second string is copied to the end of the first, effectively concatenating the two. At the end of the concatenation, the length of the combined string is discarded upon return to the calling code.
In Spolsky's example, the "Schlemiels" occur when multiple strings are concatenated together:
After "Paul" has been appended to "John", the length of "JohnPaul" (or, more precisely, the position of the terminating null character) is known within the scope of strcat() but is discarded upon its return to the point after Paul and before George. Afterwards, when strcat() is told to append "George" to "JohnPaul", strcat() starts at the very first character of the array ("J") all over again just to find the terminating null character. Each subsequent call to strcat() has to compute the length again before concatenating another name to the buffer.
Analogous to Schlemiel not carrying the paint-bucket (or the string's length) with him, all the subsequent strcat()s have to "walk" the length of the string again to determine where the second string should be copied. As more data is added to buffer with each call to strcat(), that terminating null character also gets farther away from the beginning, meaning subsequent calls are increasingly slowâ€”just as Schlemiel's path to his bucket keeps getting longer.
The problems illustrated by Spolsky's example are not noticed by a programmer who is using a high-level language and has little or no knowledge of its underlying principles and functions. "Some of the biggest mistakes people make even at the highest architectural levels come from having a weak or broken understanding of a few simple things at the very lowest levels."



Publications




