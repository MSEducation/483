[[Busy beaver]]

CATEGORIES: Computability theory, Theory of computation, Large integers

In computability theory, a busy beaver is a Turing machine that attains the maximum number of steps performed or number of nonblank symbols finally on the tape among all Turing machines in a certain class. The Turing machines in this class must meet certain design specifications and are required to eventually halt after being started with a blank tape.
A busy beaver function quantifies these upper limits on a given measure, and is a noncomputable function.  In fact, a busy beaver function can be shown to grow faster asymptotically than does any computable function.  The concept was first introduced by Tibor Radó as the "busy beaver game" in his 1962 paper, "On Non-Computable Functions".

The busy beaver game

The ''n''-state busy beaver game (or BB-''n'' game), introduced in Tibor Radó's 1962 paper, involves a class of Turing machines, each member of which is required to meet the following design specifications:
"Running" the machine consists of starting in the starting state, with the current tape cell being any cell of a blank (all-0) tape, and then iterating the transition function until the Halt state is entered (if ever).  If, and only if, the machine eventually halts, then the number of 1s finally remaining on the tape is called the machine's score.
The n-state busy beaver (BB-n) game is a contest to find such an n-state Turing machine having the largest possible score — the largest number of 1s on its tape after halting.  A machine that attains the largest possible score among all n-state Turing machines is called an n-state busy beaver, and a machine whose score is merely the highest so far attained (perhaps not the largest possible) is called a champion n-state machine.
Radó required that each machine entered in the contest be accompanied by a statement of the exact number of steps it takes to reach the Halt state, thus allowing the score of each entry to be verified (in principle) by running the machine for the stated number of steps.  (If entries were to consist only of machine descriptions, then the problem of verifying every potential entry is undecidable, because it is equivalent to the well-known halting problem — there would be no effective way to decide whether an arbitrary machine eventually halts.)

The busy beaver function Σ

The busy beaver function, Σ: N → N, is defined such that Σ(n) is the maximum attainable score (the maximum number of 1s finally on the tape) among all halting 2-symbol n-state Turing machines of the above-described type, when started on a blank tape.
It is clear that Σ is a well-defined function: for every n, there are at most finitely many n-state Turing machines as above, up to isomorphism, hence at most finitely many possible running times.
This infinite sequence Σ is the busy beaver function, and any n-state 2-symbol Turing machine M for which σ(M) = Σ(n) (i.e., which attains the maximum score) is called a busy beaver.  Note that for each n, there exist at least two n-state busy beavers (because, given any n-state busy beaver, another is obtained by merely changing the shift direction in a halting transition).

Non-computability of Σ

Radó's 1962 paper proved that if f: N → N is any computable function, then Σ(n) > f(n) for all sufficiently large n, and hence that Σ is not a computable function.
Moreover, this implies that it is undecidable by a general algorithm whether an arbitrary Turing machine is a busy beaver.  (Such an algorithm cannot exist, because its existence would allow Σ to be computed, which is a proven impossibility.  In particular, such an algorithm could be used to construct another algorithm that would compute Σ as follows: for any given n, each of the finitely many n-state 2-symbol Turing machines would be tested until an n-state busy beaver is found; this busy beaver machine would then be simulated to determine its score, which is by definition Σ(n).)
Even though Σ(n) is an uncomputable function, there are some small n for which it is possible to obtain its values and prove that they are correct. It is not hard to show that Σ(0) = 0, Σ(1) = 1, Σ(2) = 4, and with progressively more difficulty it can be shown that Σ(3) = 6 and Σ(4) = 13 . Σ(n) has not yet been determined for any instance of n > 4, although lower bounds have been established (see the Known Values section below).

Σ, complexity and unprovability

A variant of Kolmogorov complexity is defined as follows Boolos, Burgess & Jeffrey, 2007:  The complexity of a number n is the smallest number of states needed for a BB-class Turing machine that halts with a single block of n consecutive 1s on an initially blank tape.  The corresponding variant of Chaitin's incompleteness theorem states that, in the context of a given axiomatic system for the natural numbers, there exists a number k such that no specific number can be proved to have complexity greater than k, and hence that no specific upper bound can be proven for Σ(k) (the latter is because "the complexity of n is greater than k" would be proved if "n > Σ(k)" were proved). As mentioned in the cited reference, for any axiomatic system of "ordinary mathematics" the least value k for which this is true is far less than 10↑↑10 (using Knuth up-arrow notation); consequently, in the context of ordinary mathematics, neither the value nor any upper-bound of Σ(10↑↑10) can be proven.  (Gödel's first incompleteness theorem is illustrated by this result: in an axiomatic system of ordinary mathematics, there is a true-but-unprovable sentence of the form "Σ(10↑↑10) = n", and there are infinitely many true-but-unprovable sentences of the form "Σ(10↑↑10) 
Max shifts function

In addition to the function Σ, Radó 1962 introduced another extreme function for the BB-class of Turing machines, the maximum shifts function, S, defined as follows:
Because these Turing machines are required to have a shift in each and every transition or "step" (including any transition to a Halt state), the max-shifts function is at the same time a max-steps function.
Radó showed that S is noncomputable for the same reason that Σ is noncomputable — it grows faster than any computable function.  He proved this simply by noting that for each n, S(n) ≥ Σ(n), because a shift is required to write a 1 on the tape; consequently, S grows at least as fast as Σ, which had already been proved to grow faster than any computable function.
The following connection between Σ and S was used by Lin & Radó Studies of Turing Machine Problems, 1965 to prove that Σ(3) = 6:  For a given n, if S(n) is known then all n-state Turing machines can (in principle) be run for up to S(n) steps, at which point any machine that hasn't yet halted will never halt.  At that point, by observing which machines have halted with the most 1s on the tape (i.e., the busy beavers), one obtains from their tapes the value of Σ(n).  The approach used by Lin & Radó for the case of n = 3 was to conjecture that S(3) = 21, then to simulate all the essentially different 3-state machines for up to 21 steps. By analyzing the behavior of the machines that had not halted within 21 steps, they succeeded in showing that none of those machines would ever halt, thus proving the conjecture that S''(3) = 21, and determining that Σ(3) = 6 by the procedure just described.
Inequalities relating Σ and S include the following (from et al., 1996), which are valid for all n ≥ 1:
and an asymptotically improved bound (from Petersen, 2002): there exists a constant c, such that for all n ≥ 2,

Known values

The function values for Σ(n) and S(n) are only known exactly for n 18267 1s, using over 1036534 steps (found by Pavel Kropitz in 2010).  As noted above, these busy beavers are 2-symbol Turing machines.
Milton Green, in his 1964 paper "A Lower Bound on Rado's Sigma Function for Binary Turing Machines",  constructed a set of Turing machines demonstrating that
Thus
(with 327 = 7,625,597,484,987 terms in the exponential tower), and
where the number g1 is the enormous starting value in the sequence that defines Graham's number.

Generalizations

For any model of computation there exist simple analogs of the busy beaver. For example, the generalization to Turing machines with n states and m symbols defines the following generalized busy beaver functions:
For example the longest running 3-state 3-symbol machine found so far runs   119,112,334,170,342,540 steps before halting. The longest running 6-state, 2-symbol machine which has the additional property of reversing the tape value at each step produces 6,147 1s after 47,339,970 steps. So SRTM(6) ≥ 47,339,970 and ΣRTM(6) ≥ 6,147.
It is possible to further generalize the busy beaver function by extending to more than one dimension.
Likewise we could define an analog to the Σ function for register machines as the largest number which can be present in any register on halting, for a given number of instructions.

Applications

In addition to posing a rather challenging mathematical game, the busy beaver functions offer an entirely new approach to solving pure mathematics problems. Many open problems in mathematics could in theory, but not in practice, be solved in a systematic way given the value of S(n) for a sufficiently large n.Chaitin 1987
Consider any conjecture that could be disproven via a counterexample among a countable number of cases (e.g. Goldbach's conjecture).  Write a computer program that sequentially tests this conjecture for increasing values. In the case of Goldbach's conjecture, we would consider every even number ≥ 4 sequentially and test whether or not it is the sum of two prime numbers. Suppose this program is simulated on an n-state Turing machine. If it finds a counterexample (an even number ≥ 4 that is not the sum of 2 primes in our example), it halts and notifies us. However, if the conjecture is true, then our program will never halt. (This program halts only if it finds a counterexample.)
Now, this program is simulated by an n-state Turing machine, so if we know S(n) we can decide (in a finite amount of time) whether or not it will ever halt by simply running the machine that many steps.  And if, after S(n) steps, the machine does not halt, we know that it never will and thus that there are no counterexamples to the given conjecture (i.e., no even numbers that are not the sum of two primes).  This would prove the conjecture to be true.
Thus specific values (or upper bounds) for S(n) could be used to systematically solve many open problems in mathematics (in theory).  However, current results on the busy beaver problem suggest that this will not be practical for two reasons:

Proof for uncomputability of S(n) and Σ(n)

Suppose that S(n) is a computable function and let EvalS denote a TM, evaluating S(n). Given a tape with n 1s it will produce S(n) 1s on the tape and then halt. Let Clean denote a Turing machine cleaning the sequence of 1s initially written on the tape. Let Double denote a Turing machine evaluating function n + n. Given a tape with n 1s it will produce 2n 1s on the tape and then halt. 
Let us create the composition Double | EvalS | Clean and let n0 be the number of states of this machine. Let Create_n0 denote a Turing machine creating n0 1s on an initially blank tape. This machine may be constructed in a trivial manner to have n0 states (the state i writes 1, moves the head right and switches to state i + 1, except the state n0, which halts). Let N denote the sum n0 + n0.
Let BadS denote the composition Create_n0 | Double | EvalS | Clean. Notice that this machine has N states. Starting with an initially blank tape it first creates a sequence of n0 1s and then doubles it, producing a sequence of N 1s. Then BadS will produce S(N) 1s on tape, and at last it will clear all 1s and then halt. But the phase of cleaning will continue at least S(N) steps, so the time of working of BadS is strictly greater than S(N), which contradicts to the definition of the function S(n).
The uncomputability of Σ(n) may be proved in a similar way. In the above proof, one must exchange the machine EvalS with EvalΣ and Clean with Increment - a simple TM, searching for a first 0 on the tape and replacing it with 1.
The uncomputability of S(n) can also be established by reference to the blank tape halting problem. The blank tape halting problem is the problem of deciding for any Turing machine whether or not it will halt when started on an empty tape.  The blank tape halting problem is equivalent to the standard halting problem and so it is also uncomputable.  If S(n) was computable, then we could solve the blank tape halting problem simply by running any given Turing machine with n states for S(n) steps;  if it has still not halted, it never will.  So, since the blank tape halting problem is not computable, it follows that S(n) must likewise be uncomputable.

Examples

These are tables of rules for the Turing machines that generate Σ(1) and S(1), Σ(2) and S(2), Σ(3) (but not S(3)), Σ(4) and S(4), and the best known lower bound for Σ(5) and S(5), and Σ(6) and S(6).
In the tables, columns represent the current state and rows represent the current symbol read from the tape. Each table entry is a string of three characters, indicating the symbol to write onto the tape, the direction to move, and the new state (in that order). The Halt state is shown as H.
Each machine begins in state A with an infinite tape that contains all 0s. Thus, the initial symbol read from the tape is a 0.
Result Key: (starts at the position underlined, halts at the position in bold)
Result: 0 0 1 0 0 (1 step, one "1" total)
Result: 0 0 1 1 1 1 0 0 (6 steps, four "1"s total)
Result: 0 0 1 1 1 1 1 1 0 0 (14 steps, six "1"s total).
Unlike the previous machines, this one is a busy beaver only for Σ, but not for S. (S(3) = 21.)
Result: 0 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 (107 steps, thirteen "1"s total)
Result: 4098 "1"s with 8191 "0"s interspersed in 47,176,870 steps.
Result: ≈3.515 × 1018267 "1"s in ≈7.412 × 1036534 steps.

Exact values and lower bounds for some S(n, m) and Σ(n, m)

The following table lists the exact values and some known lower bounds for S(n, m) and Σ(n, m) for the generalized busy beaver problems.  Known exact values are shown as plain integers and known lower bounds are preceded by a greater than or equal to (≥) symbol.  Note: entries listed as "???" are bounded from below by the maximum of all entries to left and above.  These machines either haven't been investigated or were subsequently surpassed by a machine preceding them.
The Turing machines that achieve these values are available on both Heiner Marxen's and Pascal Michel's webpages.  Each of these websites also contains some analysis of the Turing machines and references to the proofs of the exact values.
Values of S(''n'',''m''):
!
! width="120px" | 2-state
! width="120px" | 3-state
! width="120px" | 4-state
! width="120px" | 5-state
! width="120px" | 6-state
|-
! 2-symbol
| align="right" | 6
| align="right" | 21
| align="right" | 107
| align="right" | ≥ 47,176,870
| align="right" | > 7.4 × 1036534
|-
! 3-symbol
| align="right" | 38
| align="right" | ≥ 119,112,334,170,342,540
| align="right" | > 1.0 × 1014072
| align="center" | ???
| align="center" | ???
|-
! 4-symbol
| align="right" | ≥ 3,932,964
| align="right" | > 5.2 × 1013036
| align="center" | ???
| align="center" | ???
| align="center" | ???
|-
! 5-symbol
| align="right" | > 1.9 × 10704
| align="center" | ???
| align="center" | ???
| align="center" | ???
| align="center" | ???
|-
! 6-symbol
| align="right" | > 2.4 × 109866
| align="center" | ???
| align="center" | ???
| align="center" | ???
| align="center" | ???
|}
Values of Σ(''n'',''m''):
!
! width="120px" | 2-state
! width="120px" | 3-state
! width="120px" | 4-state
! width="120px" | 5-state
! width="120px" | 6-state
|-
! 2-symbol
| align="right" | 4
| align="right" | 6
| align="right" | 13
| align="right" | ≥ 4,098
| align="right" | > 3.5 × 1018267
|-
! 3-symbol
| align="right" | 9
| align="right" | ≥ 374,676,383
| align="right" | > 1.3 × 107036
| align="center" | ???
| align="center" | ???
|-
! 4-symbol
| align="right" | ≥ 2,050
| align="right" | > 3.7 × 106518
| align="center" | ???
| align="center" | ???
| align="center" | ???
|-
! 5-symbol
| align="right" | > 1.7 × 10352
| align="center" | ???
| align="center" | ???
| align="center" | ???
| align="center" | ???
|-
! 6-symbol
| align="right" | > 1.9 × 104933
| align="center" | ???
| align="center" | ???
| align="center" | ???
| align="center" | ???
|}



Notes



 
 




