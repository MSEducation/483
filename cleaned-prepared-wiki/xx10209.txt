[[Rich Text Format]]

CATEGORIES: Computer file formats, Technical communication, Office document file formats

The Rich Text Format (often abbreviated RTF) is a proprietary
Most word processors are able to read and write some versions of RTF. RTF specifications are changed and published with major Microsoft Word and Office versions.
It should not be confused with enriched text (mimetype "text/enriched" of RFC 1896) or its predecessor Rich Text (mimetype "text/richtext" of RFC 1341 and 1521); nor with IBM's RFT-DCA (Revisable Format Text-Document Content Architecture) which are completely different  specifications.

History

Richard Brodie, Charles Simonyi, and David Luebbert, members of the Microsoft Word development team, developed the original RTF in the middle to late 1980s. Its syntax was influenced by the TeX typesetting language. The first RTF reader and writer shipped in 1987 as part of Microsoft Word 3.0 for Macintosh, which implemented the RTF version 1.0 specification. All subsequent releases of Microsoft Word for the Macintosh and all versions for Windows can read and write files in RTF format.
Microsoft holds the rights to the RTF format , the current version is 1.9.1. According to Microsoft's Office 2010 resource kit documentation, Microsoft is discontinuing enhancements to the RTF specification. Further, some new features in Word 2010 and later versions will not save properly to the RTF format.Changes in Word 2010

Version timeline

Version changes

Microsoft Corporation anticipates no further updates to the RTF Specification 1.9.1, but is willing to consider editorial and other non-substantive modifications of the RTF Specification during an associated ISO/IEC 29500 balloting period; but it would not make changes which altered normative functions in this RTF Specification.
Rich Text Format (RTF) specifications are changed and published with major Microsoft Word and Office versions.

Code example

As an example, the following RTF code:
 {\rtf1\ansi{\fonttbl\f0\fswiss Helvetica;}\f0\pard
 This is some {\b bold} text.\par
 }
is a document which would be rendered like this when read by a program that supports RTF:
 
 This is some bold text.

Character encoding

A standard RTF file can consist of only 7-bit ASCII characters, but can encode characters beyond ASCII by escape sequences. The character escapes are of two types: code page escapes and, starting with RTF 1.5, Unicode escapes. In a code page escape, two hexadecimal digits following a backslash and typewriter apostrophe are used for denoting a character taken from a Windows code page. For example, if the code page is set to Windows-1256, the sequence \'c8 will encode the Arabic letter bāʼ (ب).
For a Unicode escape the control word \u is used, followed by a 16-bit signed decimal integer giving the Unicode UTF-16 code unit number. For the benefit of programs without Unicode support, this must be followed by the nearest representation of this character in the specified code page. For example, \u1576? would give the Arabic letter bāʼ ب, specifying that older programs which do not have Unicode support should render it as a question mark instead.
The control word \uc0 can be used to indicate that subsequent Unicode escape sequences within the current group do not specify the substitution character.
Until RTF specification version 1.5 release in 1997, RTF has only handled 7-bit characters directly and 8-bit characters encoded as hexadecimal (using \'xx). RTF control words (since RTF 1.5) generally accept signed 16-bit numbers as arguments. Unicode values greater than 32767 must be expressed as negative numbers. If a Unicode character is outside BMP, it is encoded with a surrogate pair. Support for Unicode was made due to text handling changes in Microsoft Word – Microsoft Word 97 is a partially Unicode-enabled application and it handles text using the 16-bit Unicode character encoding scheme. Microsoft Word 2000 and later versions are Unicode-enabled applications that handle text using the 16-bit Unicode character encoding scheme.
RTF files are usually 7-bit ASCII plain text. RTF consists of control words, control symbols, and groups. RTF files can be easily transmitted between PC based operating systems because they are encoded as a text file with 7-bit graphic ASCII characters. Converters that communicate with Microsoft Word for MS Windows or Macintosh should expect data transfer as 8-bit characters and binary data can contain any 8-bit values.

Human readability

Unlike many word processing formats, concise RTF code can be made human-readable. When an RTF file is viewed as a plain text file, characters within ASCII are legible and the markup language (formatting) elements not too distracting or counter-intuitive. However, the RTF files produced by most programs, such as Microsoft Word (MS Word), will contain such a large number of control codes that most files will easily be an order of magnitude larger than the corresponding plain text and very difficult to read. Formats such as MS Word's .
Also, for a standard-compliant RTF file, the human-readability of a script which is not Latin-based is not an option for the reason explained above. Where non-ASCII characters, including Latin letters with diacritics, dashes and some quotation mark glyphs, are used in an RTF document, they are difficult to read, as they appear only as escape codes, such as \'f1 for ñ or \u21563 for 吻.
RTF is a data format for expressing text documents. It is not really a markup language, as it was never meant for intuitive and easy typing. RTF also supports Microsoft OLE embedded objects and Macintosh Edition Manager subscriber objects (since RTF 1.0) which are not human-readable.
Human-readable XML-based formats are becoming more common, but during RTF's initial release, its level of readability was rare among document formats.

Common uses and interoperability

Most word processing software supports RTF format importing and exporting (following some version of RTF specification), and/or direct editing, often making it a "common" format between otherwise incompatible word processing software and operating systems.  These factors contribute to its interoperability, but it will depend on what version of RTF is being used. There are several consciously designed or accidentally born RTF dialects. Most applications which read RTF files silently ignore unknown RTF control words.
RTF is the internal markup language used by Microsoft Word.  This makes it a useful format for basic formatted text documents such as instruction manuals, résumés, letters, and modest information documents.  These documents at minimum support bold, italic, and underline text formatting.  Also typically supported are left-, center-, and right-aligned text.  Also, font specification and document margins are supported in RTF documents.
Font and margin defaults, as well as style presets and other functions will vary according to program defaults.  There may also be subtle differences perhaps between different versions of the RTF specification implemented in differing programs and program versions.  Nevertheless, the RTF format is consistent enough from computer to computer to be considered highly portable and acceptable for cross-platform use. The format supports metadata such as title, author, etc. but not all implementations support this.

Objects

Use of Microsoft Object Linking and Embedding (OLE) objects or Macintosh Edition Manager subscriber objects limits the interoperability, because these objects are not widely supported in programs for viewing or editing RTF files (e.g. embedding of other files inside the RTF, such as tables or charts from spreadsheet application).

Pictures

RTF supports inclusion of JPEG, Portable Network Graphics (PNG), Enhanced Metafile (EMF), Windows Metafile (WMF), Apple PICT, Windows Device-dependent bitmap, Windows Device Independent bitmap and OS/2 Metafile picture types in hexadecimal (the default) or binary format in a RTF file. Not all of these picture types are supported in all RTF readers. When a RTF document is opened in software that does not support the picture type of an inserted picture, such picture is not displayed at all.
RTF writers usually convert inserted pictures from an unsupported picture types (e.g. BMP, TIFF, GIF, etc.) to one of supported picture types (PNG, WMF) or they do not include pictures at all.
For better compatibility with Microsoft products, some RTF writers include the same picture in two different picture types in one RTF file:
This method increases the RTF file size rapidly. The RTF specification does not require this method and there are various implementations that include pictures without the WMF copy (e.g. Abiword or Ted).
For Microsoft Word it is also possible to set a specific registry value ("ExportPictureWithMetafile=0") in order to prevent Word from saving the WMF copy (see link "Document file size increases with EMF, PNG, GIF, or JPEG graphics in Word" at the beginning).

Fonts

RTF supports embedding of fonts used in the document, but this feature is not widely supported in software implementations.
RTF also supports generic font family names used for font substitution: roman (serif), swiss (sans-serif), modern (monospace), script, decorative, technical. This feature is not widely supported for font substitution, e.g. in OpenOffice.

Annotations

RTF specification supports annotations (comments in documents) since version 1.0. RTF 1.7 specification defined some new features for annotations: date stamp (there was previously only "time stamp") and parents of annotations.
However, many implementations do not support RTF annotations, e.g. OpenOffice.3),-3.3 or KWord support annotations in some file formats (e.g. in ODF, SXW), but do not support RTF annotations.) Some implementations may hide annotations by default or require some user action to display them - e.g. in Abiword since version 2.8 or in IBM Lotus Symphony (up to version 1.3).
Microsoft products do not support comments within footers, footnotes or headers. Inserting a comment within headers, footers, or footnotes may result in a corrupted RTF document.
RTF specification also supports footnotes (not to be confused with annotations), which are widely supported in RTF implementations (e.g. in OpenOffice.

Drawing objects

RTF 1.2 specification defined use of drawing objects such as rectangles, ellipses, lines, arrows, polygons and various other shapes. RTF 1.5 specification introduced many new control words for drawing objects. RTF drawing objects are also called "shapes" since RTF 1.5.
However, RTF drawing objects are not supported in many RTF implementations, such as OpenOffice. (For example, OpenOffice.g. in ODF, SXW, DOC), but does not support RTF drawing objects.)

Security concerns

Unlike Microsoft Word's DOC format, as well as the newer Office Open XML and OpenDocument formats, RTF does not support macros. For this reason, RTF is recommended over these formats when the spread of computer viruses is a concern. However, having the . Manual examination of a file in a plain text editor such as Notepad, or use of the file command in UNIX-like systems, is required to determine whether or not a suspect file is really RTF.

Implementations

Each RTF implementation usually implements only some versions or subsets of the RTF specification. Many of the available RTF converters cannot understand all new features in the latest RTF specifications.
The WordPad editor in Microsoft Windows creates RTF files by default. It once defaulted to the Microsoft Word 6.0 file format, but write support for Word documents (. Read support was also dropped in Windows 7. WordPad does not support some RTF features, such as headers and footers. However, WordPad can read and save many RTF features that it cannot create such as: tables, strikeout, superscript, subscript, "extra" colors, text background colors, numbered lists, right or left indent, quasi-hypertext and URL linking, and various line spacings. RTF is also the data format for "rich text controls" in MS Windows APIs.
The default text editor for Mac OS X, TextEdit, can also view, edit and save RTF files as well as RTFD files.  TextEdit currently (as of July 2009) has limited ability to edit RTF document margins.  Much older Mac word processing application programs such as MacWrite and WriteNow were able to view, edit, and save RTF files as well.
The free and open-source word processors AbiWord, OpenOffice. (Abiword and OpenOffice.6 when a new file is saved.) RTF format is also used in Ted word processor. These implementations might be interesting for those who need to learn how to implement RTF support in their project and link it to other application functionality.
Scrivener uses individual RTF files for all the text files that make up a given "project".
SIL International's Toolbox freeware application for developing and publishing dictionaries uses RTF as its most common form of document output. RTF files produced by Toolbox are designed to be used in Microsoft Word, but can also be used by other RTF-aware word processors.
RTF can be used on some ebook readers because of its interoperability, simplicity, and low CPU processing requirements, and some devices, including BeBook, work best with this format.

Libraries and convertors

The open-source script rtf2xml can partially convert RTF to XML.
GNU UnRTF is an open-source program to convert RTF into HTML, LaTeX, troff macros and other formats. pyth is a Python library to create and convert documents in RTF, XHTML and PDF format. Ruby RTF is a project to create Rich Text content via Ruby. RaTFink is a library of Tcl routines, free software, to generate RTF output, and a Cost script to convert SGML to RTF. RTF::Writer is a Perl module for generating RTF documents. PHPRtfLite is an API enabling developers to create RTF documents with PHP. RTFGen is a project to create RTF documents via pure PHP.
The Mac OS X command line tool textutil enables you to convert files between rtf, rtfd, text, doc, docx, wordml, odt, and webarchive.

Criticism

The Rich Text Format was the standard file format for text-based documents in applications developed for Microsoft Windows. Microsoft did not initially make the RTF specification publicly available, making it difficult for competitors to develop document conversion features in their applications. Because Microsoft's developers had access to the specification, Microsoft's applications had better compatibility with the format. Also, every time Microsoft changed the RTF specification, Microsoft's own applications had a lead in time-to-market, because competitors had to redevelop their applications after studying the newer version of the format. Novell alleged that Microsoft's practices were anticompetitive in its antitrust complaint against Microsoft.








