[[Fork (software development)]]

CATEGORIES: Software forks, Software project management

In software engineering, a project fork  happens when developers take a copy of source code from one software package and start independent development on it, creating a distinct piece of software. The term often implies not merely a development branch, but a split in the developer community, a form of schism."Schism", with its connotations, is a common usage, e.g. "the Lemacs/FSFmacs schism" (Jamie Zawinski, 2000), "Behind the KOffice split" (Joe Brockmeier, Linux Weekly News, 2010-12-14), "Copyright assignment - once bitten, twice shy" (Richard Hillesley, H-Online, 2010-08-06), "Forking is a feature" (Anil Dash, 2010-09-10), "The Great Software Schism" (Glyn Moody, Linux Journal, 2006-09-28), "To Fork Or Not To Fork: Lessons From Ubuntu and Debian" (Benjamin Mako Hill, 2005).
Free and open-source software is that which, by definition, may be forked from the original development team without prior permission without violating any copyright law. However, licensed forks of proprietary software (e.g. Unix) also happen.

Etymology

"Fork" in the meaning of "to divide in branches, go separate ways" has been used as early as the 14th century."The term fork is derived from the POSIX standard for operating systems: the system call used so that a process generates a copy of itself is called fork()." 
In the context of software development, the first documented use of the term "fork" in the sense of "branch" was by Eric Allman in 1980, to describe forming branches in SCCS:
 Creating a branch "forks off" a version of the program. "An Introduction to the Source Code Control System." Project Ingres, University of California at Berkeley, 1980. 
The term was in use on Usenet by 1983 for the process of creating a subgroup to move topics of discussion to.philosophy"? (John Gilmore, net.misc, 18 January 1983)
"Fork" is not known to have been used in the sense of a community schism during the origins of Lucid Emacs (now XEmacs) (1991) or the BSDs (1993–1994); Russ Nelson used the term "shattering" for this sort of fork in 1993, attributing it to John Gilmore.misc.cs.info, 21 September 1995) and was an understood usage in the GNU Project by 1996. Daniels, gnu.discuss, 7 June 1996)

Forking of free and open source software

Free and open source software may be legally forked without prior approval of those currently developing, managing, or distributing the software per both The Free Software Definition and The Open Source Definition:


In free software, forks often result from a schism over different goals or personality clashes. In a fork, both parties assume nearly identical code bases, but typically only the larger group, or whoever controls the Web site, will retain the full original name and the associated user community. Thus, there is a reputation penalty associated with forking. The relationship between the different teams can be cordial or very bitter.
Eric S. Raymond, in his essay Homesteading the Noosphere, stated that "The most important characteristic of a fork is that it spawns competing projects that cannot later exchange code, splitting the potential developer community". He notes in the Jargon File:
David A. Wheeler notesWhy Open Source Software / Free Software (OSS/FS, FLOSS, or FOSS)? Look at the Numbers!: Forking (David A. Wheeler) four possible outcomes of a fork, with examples:
More recently, distributed revision control (DVCS) tools have popularised a less emotive use of the term "fork", blurring the distinction with "branch". With a DVCS such as Mercurial or Git, the normal way to contribute to a project is to first branch the repository, and later seek to have your changes integrated with the main repository. Sites such as GitHub, Bitbucket and Launchpad provide free DVCS hosting expressly supporting independent branches, such that the technical, social and financial barriers to forking a source code repository are massively reduced.
Forks often restart version numbering from 0.1 or 1.0 even if the original software was at version 3.0, 4.0, or 5.0.  An exception is when the forked software is designed to be a drop-in replacement for the original project, e.g. MariaDB for MySQLForked a project, where do my version numbers start? or LibreOffice for OpenOffice.

Forking proprietary software

In proprietary software, the copyright is usually held by the employing entity, not by the individual software developers.  Proprietary code is thus more commonly forked when the owner needs to develop two or more versions, such as a windowed version and a command line version, or versions for differing operating systems, such as a word processor for IBM PC compatible machines and Macintosh computers. Generally, such internal forks will concentrate on having the same look, feel, data format, and behavior between platforms so that a user familiar with one can also be productive or share documents generated on the other. This is almost always an economic decision to generate a greater market share and thus pay back the associated extra development costs created by the fork.
A notable proprietary fork not of this kind is the many varieties of proprietary Unix—almost all derived from AT&T Unix and all called "Unix", but increasingly mutually incompatible.
The BSD licenses permit forks to become proprietary software, and some say that commercial incentives thus make proprietisation almost inevitable. Examples include Mac OS X (based on the proprietary Nextstep and the open source FreeBSD), Cedega and CrossOver (proprietary forks of Wine, though CrossOver tracks Wine and contributes considerably),
EnterpriseDB (a fork of PostgreSQL, adding Oracle compatibility featuresEnterpriseDB), Supported PostgreSQL 
with their proprietary ESM storage system,Fujitsu Supported PostgreSQL and Netezza'sNetezza proprietary highly scalable derivative of PostgreSQL. Some of these vendors contribute back changes to the community project, while some keep their changes as their own competitive advantages.








