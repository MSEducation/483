[[Icon (programming language)]]

CATEGORIES: SNOBOL programming language family, Pattern matching programming languages, Text-oriented programming languages, Public domain software, Programming languages created in 1977

Icon is a very high-level programming language featuring goal directed execution and many facilities for managing strings and textual patterns. It is related to SNOBOL and SL5, string processing languages. Icon is not object-oriented, but an object-oriented extension called Idol was developed in 1996 which eventually became Unicon.

Basic syntax

In many ways Icon also shares features with most scripting programming languages (as well as SNOBOL and SL5, from which they were taken): variables do not have to be declared, types are cast automatically, and numbers can be converted to strings and back automatically. Another feature common to many scripting languages, but not all, is the lack of a line-ending character; in Icon, lines not ended by a semicolon get ended by an implied semicolon if it makes sense.

Goal-directed execution

One of Icon's key concepts is that control structures are based on the "success" or "failure" of expressions, rather than on boolean logic, as in most other programming languages. Under this model, simple comparisons like if a  do not mean "if the operations to the right evaluate to true" as they would under most languages; instead it means something more like "if the operations to the right succeed". In this case the if a , a common type of comparison that in most languages must be written as a conjunction of two inequalities like if a .
The utility of this concept becomes much clearer when you consider real-world examples. Since Icon uses success or failure for all flow control, this simple code:
Success and failure are passed "up" through functions, meaning that a failure inside a nested function will cause the functions calling it to fail as well. For instance, we can write a program to copy an entire input file to output in a single line:
When the read() command fails, at the end of file for instance, the failure will be passed up the chain and write() will fail as well. The while, being a control structure, stops on failure, meaning it stops when the file is empty. For comparison, consider a similar example written in Java-based pseudocode:
Icon refers to this concept as goal-directed execution, referring to the way that execution continues until some goal is reached. In the example above the goal is to read the entire file; the read command continues to succeed while there is more information to be read, and fails when there isn't. The goal is thus coded directly in the language, instead of using statements checking return codes or similar constructs.

Generators

Expressions in Icon often return a single value, for instance, x  will evaluate and succeed if the value of x is less than 5 or fail. However several of the examples below rely on the fact that many expressions do not immediately return success or failure, returning values in the meantime. This drives the examples with every and to; every causes to to continue to return values until it fails.  
This is a key concept in Icon, known as generators. Generators drive much of the loop functionality in the language, but do so more directly; the programmer does not write a loop and then pull out and compare values, Icon will do all of this for you.
Within the parlance of Icon, the evaluation of an expression or function results in a result sequence.  A result sequence contains all the possible values that can be generated by the expression or function.  When the result sequence is exhausted (e.g. there are no more values within the result sequence), the expression or function fails.  Iteration over the result sequence is achieved either implicitly via Icon's goal directed evaluation or explicitly via the every clause.  
Icon includes several generator-builders. The alternator syntax allows a series of items to be generated in sequence until one fails: 
can generate "1", "hello", and "5" if x is less than 5. Alternators can be read as "or" in many cases, for instance:
will write out the value of y if it is smaller than x or 5. Internally Icon checks every value from left to right until one succeeds or the list empties and it returns a failure. Remember that functions will not be called unless the calls within do not fail, so this example can be shortened to:
This code will return 4, the position of the first occurrence of the word "the". To get the next instance of "the" an alternate form must be used, 
the 5 at the end saying it should look from position 5 on. In order to extract all the occurrences of "the", a loop must be used...
Under Icon the find function is a generator, and will return the next instance of the string each time it is resumed before finally failing after it passes the end of the string. The same code under Icon can be written:
find will return the index of the next instance of "the" each time it is resumed by every, eventually passing the end of the string and failing. As in the prior example, this will cause write to fail, and the (one-line) every loop to exit. 
Of course there are times where you deliberately want to find a string after some point in input, for instance, you might be scanning a text file containing data in multiple columns. Goal-directed execution works here as well, and can be used this way:
The position will only be returned if "the" appears after position 5, the comparison will fail otherwise, passing that failure to write() as before. There is one small "trick" to this code that needs to be considered: comparisons return the right hand result, so it is important to put the find on the right hand side of the comparison. If the 5 were placed on the right, 5 would be written.
Icon adds several control structures for looping through 
generators. The every operator is similar to while, looping through every item returned by a generator and exiting on failure:
Why use every instead of a while loop in this case? 
Because while re-evaluates the first result,
but every produces all results.
The every syntax actually injects values into the function in a fashion similar to blocks under Smalltalk. For instance, the above loop can be re-written this way:
Users can build new generators easily using the suspend keyword:
This example loops over theString using find to look for pattern. When one is found, and the position is odd, the location is returned from the function with suspend. Unlike return, suspend writes down where it is in the internal generators as well, allowing it to pick up where it left off on the next iteration.

Strings

In keeping with its script-like functionality, Icon adds a number of features to make working with strings easier. Most notable among these is the scanning system, which repeatedly calls functions on a string:
Substrings can be extracted from a string by using a range specification within brackets.  A range specification can return a point to a single character, or a slice of the string.  Strings can be indexed from either the right or the left. It is important to note that positions within a string are between the characters 1A2B3C4 and can be specified from the right -3A-2B-1C0
For example
Where the last example shows using a length instead of an ending position
The subscripting specification can be used as a Lvalue within an expression.  This can be used to insert strings into another string or delete parts of a string. For example,

Other structures

Icon also allows the user to easily construct their own lists (or arrays):
Icon also includes functionality for sets and tables (known as hashes, associative arrays, dictionaries, etc.):
This code creates a table that will use zero as the default value of any unknown key. It then adds two items into it, with the keys "there" and "here", and values 1 and 2.

String scanning

For example
would produce
Built-in and user defined functions can be used to move around within the string being scanned. Many of the built in functions will default to &subject and &pos (for example the find function). The following, for example, will write all blank delimited "words" in a string.
A more complicated example demonstrates the integration of generators and string scanning within the language.
The idiom of  expr1 & expr2 & expr3 returns the value of the last expression





The definitive work is The Icon Programming Language (third edition) by Griswold and Griswold, ISBN 1-57398-001-3.
It is out of print but can be downloaded in PDF form.
Icon also has co-expressions, providing non-local exits for program execution. Please see The Icon Programming language and also Shamim Mohamed's article Co-expressions in Icon. (This topic should probably be expanded).





