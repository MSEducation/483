[[OpenVMS]]

CATEGORIES: 1977 software, Cluster computing, Computing platforms, DEC operating systems, Hewlett-Packard, High-availability cluster computing, OpenVMS, Parallel computing, Quality control, Time-sharing operating systems

OpenVMS (Open Virtual Memory SystemSee the OpenVMS Software Product Description (SPD) documents for OpenVMS VAX, OpenVMS Alpha, and OpenVMS I64; see the SPD repository), previously known as VAX-11/VMS, VAX/VMS or (informally) VMS, is a computer server operating system that runs on VAX, Alpha and Itanium-based families of computers.OpenVMS source listing CD  Unlike many other mainframe-oriented operating systems, OpenVMS has a graphical user interface (GUI) with complete graphics support. This support was not available on the original VAX-11/VMS system but was included when Digital Equipment Corporation's VAXstation became available. With time DEC became one of the three top-selling workstations manufacturer, with lines spanning the 1980s and 1990s. Previously VMS access was exclusively done via VT100 compatible terminals. OpenVMS had support for professional DTP and CAE software. Software for AXP based systems was promoted by Digital's ASAP program (Association of Software and Application Partners) and could be found in the extensive "Alpha Applications Catalog". Faqs. Retrieved on 2013-07-17. and Accelerated Graphics Port (AGP) graphics adapters.
OpenVMS is a multi-user, multiprocessing virtual memory-based operating system (OS)
designed for use in
time sharing,
batch processing,
(where process priorities can be set higher than OS kernel jobs),
and transaction processing.
It offers high system availability through clustering, or the ability to distribute the system over multiple physical machines. This allows the system to be "disaster-tolerant". YouTube (2007-06-29). Retrieved on 2013-07-17. against disasters that may disable individual data-processing facilities. VMS also includes a process priority system that allows for real-time processes to run unhindered, while user processes get temporary priority "boosts" if necessary.0, Ruth Goldenberg, Saro Saravanan, Denise Dumas, ISBN 1-55558-156-0OpenVMS Alpha Internals and Data Structures: Memory Management, Ruth Goldenberg, ISBN 1-55558-159-5VAX/VMS Internals and Data Structures: Version 5.2 ("IDSM"), Ruth Goldenberg, Saro Saravanan, Denise Dumas, ISBN 1-55558-059-9
OpenVMS commercialized many features that are now considered standard requirements for any high-end server operating system. These include:
Enterprise-class environments typically select and use OpenVMS for various purposes including as a mail server, network services, manufacturing or transportation control and monitoring, critical applications and databases, and particularly environments where system uptime and data access is critical. System up-times of a decade or more have been reported, and features such as Rolling Upgrades and clustering allow clustered applications and data to remain continuously accessible while operating system software and hardware maintenance and upgrades are performed, or when a whole data center is destroyed. Customers using OpenVMS include banks and financial services, hospitals and healthcare, network information services, and large-scale industrial manufacturers of various products.

History

Origin and name changes

In April 1975, Digital Equipment Corporation embarked on a hardware project, code named Star, to design a 32-bit virtual address extension to its PDP-11 computer line. A companion software project, code named Starlet, was started in June 1975 to develop a totally new operating system, based on RSX-11M, for the Star family of processors. These two projects were tightly integrated from the beginning. Gordon BellGordon Bell Biography was the VP lead on the VAX hardware and its architecture.  Roger Gourd was the project lead for the Starlet program, with software engineers Dave Cutler (who would later lead development of Microsoft's Windows NT), Dick Hustvedt, and Peter Lippman acting as the technical project leaders, each having responsibility for a different area of the operating system. The Star and Starlet projects culminated in the VAX 11/780 computer and the VAX-11/VMS operating system. The Starlet name survived in VMS as a name of several of the main system libraries, including STARLET.MLB.
Over the years the name of the product has changed. In 1980 it was renamed, with version 2.0 release, to VAX/VMS (at the same time as the VAX-11 computer was renamed to simply VAX). With the introduction of the MicroVAX range such as the MicroVAX I, MicroVAX II and MicroVAX 2000 in the mid-to-late 1980s, DIGITAL released MicroVMS versions specifically targeted for these platforms which had much more limited memory and disk capacity; e.g. the smallest MicroVAX 2000 had a 40MB RD32 hard disk and a maximum of 6MB of RAM, and its CPU had to emulate some of the VAX floating point instructions in software. MicroVMS kits were released for VAX/VMS 4.4 to 4.7 on TK50 tapes and RX50 floppy disks, but discontinued with VAX/VMS 5.0. In 1991 it was renamed again to OpenVMS to indicate its support for industry standards such as POSIX and Unix compatibility, and to drop the hardware connection as the port to DIGITAL's 64-bit Alpha RISC processor was in process. The OpenVMS name first appeared after the version 5.4-2 release.

Port to DEC Alpha

The VMS port to Alpha resulted in the creation of a second and separate source code libraries (based on a source code management tool known as VDE) for the VAX 32-bit source code library and a second and new source code library for the Alpha (and the subsequent Itanium port) 64-bit architectures. 1992 saw the release of the first version of OpenVMS for Alpha AXP systems, designated OpenVMS AXP V1.0. The decision to use the 1.x version numbering stream for the pre-production quality releases of OpenVMS AXP caused confusion for some customers and was not repeated in the next platform port to the Itanium.
In 1994, with the release of OpenVMS version 6.1, feature (and version number) parity between the VAX and Alpha variants was achieved. This was the so-called Functional EquivalenceOpenVMS VAX and Alpha Compatibility  release, in the marketing materials of the time. Some features were missing however, e.g. based shareable images, which were implemented in later versions. Subsequent version numberings for the VAX and Alpha variants of the product have remained consistent through V7.3, though Alpha subsequently diverged with the availability of the V8.2 and V8.3 releases. For technical details on the port, see the DIGITAL Technical Journal Volume 4 Number 4.

Port to Intel Itanium

In 2001, just prior to its acquisition by Hewlett-Packard, Compaq announced the port of OpenVMS to the Intel Itanium architecture. The OpenVMS Alpha pool was chosen as the basis of the port as it was significantly more portable than the original OpenVMS VAX source code, and because the Alpha source code pool was already fully 64-bit capable (unlike the VAX source code pool). With the Alpha port, many of the VAX hardware-specific dependencies had been previously moved into the Alpha SRM firmware for OpenVMS. Features necessary for OpenVMS were then moved from SRM into OpenVMS I64 as part of the Itanium port.os.vms newsgroup postings from OpenVMS Engineers
Unlike the port from VAX to Alpha, in which a snapshot of the VAX code base circa V5.4-2 was used as the basis for the Alpha release and the 64-bit source code pool then diverged, the OpenVMS Alpha and I64 (Itanium) versions of OpenVMS are built and maintained using a common source code library and common tools. The core software source code control system used for OpenVMS is the VMS Development Environment (VDE).
Two pre-production releases, OpenVMS I64 V8.0 and V8.1, were available on June 30, 2003 and on December 18, 2003. These releases were intended for HP organizations and third-party vendors involved with porting software packages to OpenVMS I64.
The following are recent OpenVMS I64 releases:

Major release timeline

Features

Graphical user interface

OpenVMS uses the DECwindows Motif user interface (based on CDE) layered on top of OpenVMS's X11 compliant windowing system.

Clustering

OpenVMS supports clustering (first called VAXcluster and later VMScluster), where multiple systems share disk storage, processing, job queues and print queues, and are connected either by proprietary specialized hardware (Cluster Interconnect) or an industry-standard LAN (usually Ethernet). A LAN-based cluster is often called a LAVc, for Local Area Network VMScluster, and allows, among other things, bootstrapping a possibly diskless satellite node over the network using the system disk of a bootnode.
VAXcluster support was first added in VMS version 4, which was released in 1984.  This version only supported clustering over CI.  Later releases of version 4 supported clustering over LAN (LAVC), and support for LAVC was improved in VMS version 5, released in 1988.
Mixtures of cluster interconnects and technologies are permitted, including Gigabit (GbE) Ethernet, SCSI, FDDI, DSSI, CI and Memory Channel adapters.
OpenVMS supports up to 96 nodes in a single cluster, and allows mixed-architecture clusters, where VAX and Alpha systems, or Alpha and Itanium systems can co-exist in a single cluster (Various organizations have demonstrated triple-architecture clusters and cluster configurations with up to 150 nodes, but these configurations are not supported by HP).
Unlike many other clustering solutions, VMScluster offers transparent and fully distributed read-write with record-level locking, which means that the same disk and even the same file can be accessed by several cluster nodes at once; the locking occurs only at the level of a single record of a file, which would usually be one line of text or a single record in a database. This allows the construction of high-availability multiply redundant database servers.
Cluster connections can span upwards of 500 miles, allowing member nodes to be located in different buildings on an office campus, or in different cities.
Host-based volume shadowing allows volumes (of the same or of different sizes) to be shadowed (mirrored) across multiple controllers and multiple hosts, allowing the construction of disaster-tolerant environments.
Full access into the distributed lock manager (DLM) is available to application programmers, and this allows applications to coordinate arbitrary resources and activities across all cluster nodes.  This includes file-level coordination, but the resources and activities and operations that can be coordinated with the DLM are completely arbitrary.
OpenVMS V8.4 offers advances in clustering technology, including the use of industry-standard TCP/IP networking to bring efficiencies to cluster interconnect technology. Cluster over TCP/IP is supported in OpenVMS version 8.4, which was released in 2010.
With the supported capability of rolling upgrades and multiple system disks, cluster configurations can be maintained on-line and upgraded incrementally.  This allows cluster configurations to continue to provide application and data access while a subset of the member nodes are upgraded to newer software versions.  For more specific details, see the clustering-related manuals in the OpenVMS documentation set.

File system

OpenVMS has a very feature-rich file system, with support for stream and record-oriented IO, ACLs, and file versioning.  The typical user and application interface into the file system is the RMS.  Also see the available ODS2 documentation, and the VMS File Systems Internals book, by Kirby McCoy, ISBN 1-55558-056-4.

Timekeeping

OpenVMS represents system time as the 64-bit number of 100 nanosecond intervals (that is, ten million units per second; also known as a 'clunk' since the epoch. The epoch of OpenVMS is midnight preceding November 17, 1858, which is the start of Modified Julian Day numbering. The clock is not necessarily updated every 100 ns; for example, systems with a 100 Hz interval timer simply add 100 000 to the value every hundredth of a second. The operating system includes a mechanism to adjust for hardware timekeeping drift; when calibrated against a known time standard, it easily achieves an accuracy better than 0.01%.  All OpenVMS hardware platforms derive timekeeping from an internal clock not associated with the AC supply power frequency.
While the system is shut down, time is kept by a Time-of-Year ("TOY") hardware clock. This clock keeps time to a lower resolution (perhaps 1 second) and generally, a lower accuracy (often 0.025% versus 0.01%). When the system is restarted, the VMS 64-bit time value is recomputed based on the time kept by the TOY clock and the last recorded year (stored on the system disk).
The 100 nanosecond granularity implemented within OpenVMS and the 63-bit absolute time representation (the sign bit indicates absolute time when clear and relative time when set) should allow OpenVMS trouble-free time computations up to 31-JUL-31086 02:48:05.47.  At this instant, all clocks and time-keeping operations in OpenVMS will suddenly fail, since the counter will overflow and start from zero again.
Though the native OpenVMS time format can range far into the future, applications based on the C runtime library will likely encounter timekeeping problems beyond January 19, 2038 due to the Year 2038 problem.  Many components and applications may also encounter field-length-related date problems at year 10000 (see the Year 10,000 problem).

Programming

The common language programming environment is described in the OpenVMS Calling Standard and the  OpenVMS Programming Concepts manuals.com. This provides mixed-language calls, and a set of language-specific, run-time library (RTL), and system service routines.  The language calls and the RTLs are implemented in user-mode shareable images, while the system services calls are generally part of the operating system, or part of privileged-mode code.   This distinction between languages and RTLs and system services was once fairly clean and clear, but the implementations and specifics have become rather more murky over the years.
Various  utilities and tools are integrated, as are various add-on languages and tools.com.
Many Programming Examples are available via the OpenVMS FAQ.org.

=Debugging=

The VMS Debugger supports all DEC compilers and many third party languages. It allows breakpoints, watchpoints and interactive runtime program debugging either using a command line or graphical user interface. OpenVMS Debugger Manual

=Common Language Environment=

Among OpenVMS's notable features is the Common Language Environment, a strictly defined standard that specifies calling convention for functions and routines, including use of stacks, registers, etc., independently of programming language.  Because of this, it is possible to call a routine written in one language (e.g. Fortran) from another (e.g. COBOL), without needing to know the implementation details of the target language.  OpenVMS itself is implemented in a variety of different languages (primarily BLISS, VAX Macro and C) (per comp.os. This is in contrast to a system such as Unix, which is implemented nearly entirely in the C language.
For details on these compilers and libraries, see the language manuals available at OpenVMS documentation.
Macro32 (an assembler on OpenVMS VAX, and a compiler on OpenVMS Alpha and on OpenVMS I64) is available within and integrated into OpenVMS.  BLISS compilers are available for download from the OpenVMS Freeware, as are various ports of Perl, PHP, Ruby and other languages.  Java is available from the HP Java website.  C, Fortran and other languages are commercial products, and are available for purchase.

=Run-time Libraries=

Security

OpenVMS provides various security features and mechanisms, including security identifiers, resource identifiers, subsystem identifiers, ACLs, and detailed security auditing and alarms. Specific versions evaluated at DoD NCSC Class C2 and, with the SEVMS security enhanced services support, at NCSC Class B1, per the NCSC Rainbow Series. OpenVMS also holds an ITSEC E3 rating. For details on these ratings and the specific associated OpenVMS versions and ratings, see the NCSC and Common Criteria pages, and the associated product listings. Also see the OpenVMS security information.

Cross-platform applications

OpenVMS supports the following industry standard tools and applications:

Documentation

The OpenVMS operating documentation for various recent releases and for various core OpenVMS layered products is available online at the HP website 
Software Product Description (SPD) documents for many OpenVMS-related products (and for OpenVMS itself) are available at   SPDs are introductory and legal descriptions of various products, listing the various supported capabilities and product features.
The OpenVMS Frequently Asked Questions (FAQ) contains information and pointers associated with OpenVMS, and is available in various formats at 

Releases, software support status

The current OpenVMS release are OpenVMS V8.4 for Alpha and Integrity servers, and OpenVMS V7.3 for VAX servers.
HP provides Current Version Support (CVS) and Prior Version Support (PVS) for various OpenVMS releases.  The OpenVMS Roadmap guarantees PVS status for specific releases (V5.5-2, V5.5-2H4, V6.2, V6.2-1H3, V7.3-2) until 2012, and only then ending with 24 month's prior notice.  CVS is provided for the current release and for the immediately prior release.

Applicable industry standards

The following are some of the industry standards claimed in the OpenVMS Software Product Description (SPD) document:

Hobbyist programs

Despite being a proprietary commercial operating system, in 1997 OpenVMS and a number of layered products were made available free of charge for hobbyist, non-commercial use as part of the OpenVMS Hobbyist Program.vmshobbyist.OpenVMS.process.html and MVP Systems.mvpsi.aspx
In 2011, HP staff took over the administration of the hobbyist licences. Registration was simplified and remained zero cost. The process from registering to receiving Product Authorisation Keys may take only a few hours at best. Software kits for operating system and layered products were made available on request via FTP download (previously it had to be shipped on CD which was chargeable).  This process is not fully automatic and requires authorisation by HP Hobbyist Program staff.
A number of hobbyist systems are open to the public, including the Deathrow Cluster.vistech.net
An open source operating system following VMS conventions called FreeVMS is in development, FreeVMS supports the x86-64 architecture using an L4 microkernel.



OpenVMS-related terms and acronyms include:For information on layered products, see the Software Product Description (SPD) for the product. For OpenVMS components, see the OpenVMS documentation set.

Further reading








