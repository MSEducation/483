[[Software patent]]

CATEGORIES: Software patent law

A software patent has been defined by the Foundation for a Free Information Infrastructure (FFII) as being a "patent on any performance of a computer realised by means of a computer program".
Most countries place some limits on the patenting of invention involving software, but there is no legal definition of a software patent. For example, U.S. patent law excludes "abstract ideas", and this has been used to refuse some patents involving software. In Europe, "computer programs as such" are excluded from patentability and European Patent Office policy is consequently that a program for a computer is not patentable if it does not have the potential to cause a "further technical effect" beyond the inherent technical interactions between hardware and software.
There is debate over the extent to which software patents should be granted, if at all. Important issues concerning software patents include:
|url=
|format=PDF|title=Public consultation on level of the inventive step required for obtaining patents
|publisher=UK Intellectual Property Office
|accessdate=2007-06-05}}[/ref] and

Background

A patent is a set of exclusionary rights granted by a state to a patent holder for a limited period of time, usually 20 years. These rights are granted to patent applicants in exchange for their disclosure of the inventions. Once a patent is granted in a given country, no person may make, use, sell or import/export the claimed invention in that country without the permission of the patent holder. Permission, where granted, is typically in the form of a license which conditions are set by the patent owner: it may be gratis or in return for a royalty payment or lump sum fee.
Patents are territorial in nature. To obtain a patent, inventors must file patent applications in each and every country in which they want a patent. For example, separate applications must be filed in Japan, China, the United States and India if the applicant wishes to obtain patents in those countries. However, some regional offices exist, such as the European Patent Office (EPO), which act as supranational bodies with the power to grant patents which can then be brought into effect in the member states, and an international procedure also exists for filing a single international application under the Patent Cooperation Treaty (PCT), which can then give rise to patent protection in most countries.
These different countries and regional offices have different standards for granting patents. This is particularly true of software or computer-implemented inventions, especially where the software is implementing a business method.

Early example of a software patent

On 21 May 1962, a British patent application entitled "A Computer Arranged for the Automatic Solution of Linear Programming Problems" was filed.

Jurisdictions

Substantive law regarding the patentability of software and computer-implemented inventions, and case law interpreting the legal provisions, are different under different jurisdictions.
Software patents under multilateral treaties:
Software patents under national laws:

Australia

In Australia, pure or abstract methods of doing business are not considered to be patentable, but if the method is implemented using a computer, it avoids the exclusion for business methods.

Canada

In Canada, courts have held that the use of a computer alone neither lends, nor reduces patentability of an invention. However, it is the position of the Canadian Patent Office that where a computer is an "essential element" of a patent's claims, the claimed invention is generally patentable subject matter.

Europe

Within European Union member states, the EPO and other national patent offices have issued many patents for inventions involving software since the European Patent Convention (EPC) came into force in the late 1970s. 
Computer-implemented inventions which only solve a business problem using a computer, rather than a technical problem, are considered unpatentable as lacking an inventive step (see T 258/03). Nevertheless, the fact that an invention is useful in business does not mean it is not patentable if it also solves a technical problem.
A summary of the developments concerning patentability of computer programs under the European Patent Convention is given in (see G 3/08) as a response of the Enlarged Board of Appeal to questions filed by the President of the European Patent Office according to Art. 112(1)b) EPC.

=Germany=

In April 2013, the German Parliament adopted a joint motion "against the growing trend of patent offices to grant patents on software programs."

=United Kingdom=

United Kingdom patent law is interpreted to have the same effect as the European Patent Convention such that "programs for computers" are excluded from patentability to the extent that a patent application relates to a computer program "as such". Current case law in the UK states that an (alleged) invention will only be actually regarded as an invention if it provides a contribution that is not excluded and which is also technical. A computer program implementing a business process is therefore not an invention, but a computer program implementing an industrial process may well be.

India

In India, a clause to include software patents was quashed by the Indian Parliament in April 2005.

Japan

Software-related inventions are patentable. To qualify as an invention, however, there must be "a creation of technical ideas utilizing a law of nature"
In 1999, the allowance rate for business method patents at the Japan Patent Office (JPO) reached an all-time high of roughly 35 percent. Subsequently, the JPO experienced a surge in business method patent filings. This surge was met with a dramatic decrease in the average grant rate of business method patents during the following six years; it lingered around 8 percent between 2003 and 2006 (8 percent is extremely low in comparison to the average of 50 percent across all technical fields). Since 2006, the average grant rate for business method patents has risen to the current rate of roughly 25 percent.
In Japan, software patents have been successfully enforced. In 2005, for example, Matsushita won a court order barring Justsystem from infringing Matsushita's Japanese patent 2,803,236 covering word processing software. A Tokyo court ordered Justsystem to pull their product from the market. On September 30, 2005, Intellectual Property High Court of Japan, which was established in April 2005, granted Justsystems' appeal and overturned the Tokyo District Court decision in October 2005.

New Zealand

In New Zealand computer programs are to be excluded from patentability under a 2010 Patents Bill, but guidelines permitting embedded software are to be drafted once the bill has passed.

Philippines

In the Philippines, "schemes, rules and methods of performing mental acts, playing games or doing business, and programs for computers" are non-patentable inventions under Sec. 22.2 of Republic Act No. 8293, otherwise known as the "Intellectual Property Code of the Philippines."

South Africa

In South Africa, "a program for a computer" is excluded from recognition as a patentable invention by section 25 of the Patents Act.

South Korea

In South Korea, software is considered patentable and many patents directed towards "computer programs" have been issued. A ruling by the Supreme Court of Korea found that patents directed towards automatic language translation within software programs were valid and possibly violated by its software.

United States

The United States Patent and Trademark Office has granted patents that may be referred to as software patents since at least the early 1970s.
Due to different treatment of federal patent rights in different parts of the country, in 1982 the U.S. Congress created a new court (the Federal Circuit) to hear patent cases. Following several landmark decisions by this court, by the early 1990s the patentability of software was well established, and in 1996 the USPTO issued Final Computer Related Examination Guidelines stating that "A practical application of a computer-related invention is statutory subject matter. This requirement can be discerned from the variously phrased prohibitions against the patenting of abstract ideas, laws of nature or natural phenomena" (emphasis added).
The recent expansion of the Internet and e-commerce has led to many patents being applied for and being granted for business methods implemented in software and the question of whether business methods are statutory subject matter is a separate issue from the question of whether software is.  Critics of the Federal Circuit believe that the non-obviousness standard is partly responsible for the large increase in patents for software and business methods. Meurer. Patent Failure: How Judges, Bureaucrats, and Lawyers Put Innovators at Risk. Princeton, NJ: Princeton University Press, 2008 There have been several successful enforcement trials in the USA, some of which are listed in the list of software patents article.
Several successful litigations show that software patents are enforceable in the US. See List of software patents for more examples.

Purpose of patents

For the U.S., the purpose of patents is laid down in the constitutional clause that gives Congress the power "to promote the progress of science and useful arts, by securing for limited times to authors and inventors the exclusive right to their respective writings and discoveries;" (Article I, Section 8, Clause 8). For Europe, there is no similar definition. Commonly four patent justification theories are recognised, as laid down for instance by Machlup in 1958,  which include justice to the inventor and benefit for society by rewarding inventors. Disclosure is required in return for the exclusive right, and disclosure may promote further development. However, the value of disclosure should not be overestimated: some inventions could not be kept secret otherwise, and patents also prohibit independent reinventions to be exploited.
There is debate as to whether or not these aims are achieved with software patents.

Proposals

In seeking to find a balance, different countries have different policies as to where the boundary between patentable and non-patentable software should lie. In Europe, a number of different proposals for setting a boundary line were put forward during the debate concerning the proposed Directive on the patentability of computer-implemented inventions, none of which were found acceptable by the various parties to the debate. Two particular suggestions for a hurdle that software must pass to be patentable include:
In the US, Ben Klemens, a Guest Scholar at the Brookings Institution, proposed that patents should be granted only to inventions that include a physical component that is by itself nonobvious. By this rule, one would consider software loaded onto a stock PC to be an abstract algorithm with obvious postsolution activity, while a new circuit design implementing the logic would likely be a nonobvious physical device. Upholding an "insignificant postsolution activity" rule as per Justice Rehnquist's ruling would also eliminate most business method patents.

Obviousness

A common objection to software patents is that they relate to trivial inventions. A patent on an invention that many people would easily develop independently of one another should not, it is argued, be granted since this impedes development.
Different countries have different ways of dealing with the question of inventive step and non-obviousness in relation to software patents. Europe uses an 'Inventive step test'; see the Inventive step requirement in Europe and, for instance, T 258/03.

Conflicts

Compatibility

There are a number of high profile examples where the patenting of a data exchange standards forced another programming group to introduce an alternative format. For instance, the Portable Network Graphics (PNG) format was largely introduced to avoid the Graphics Interchange Format (GIF) patent problems, and Ogg Vorbis to avoid MP3. If it is discovered that these new suggested formats are themselves covered by existing patents, the final result may be a large number of incompatible formats. Creating such formats and supporting them costs money and creates inconvenience to users.

Computer-implemented invention (CII)

Under the EPC, and in particular its Article 52, when compared to their American counterpart, that does not mean that all inventions including some software are de jure not patentable.

Overlap with copyright

Protection by patent protection and copyright constitute two different means of legal protection which may cover the same subject-matter, such as computer programs, since each of these two means of protection serves its own purpose. Software is protected as works of literature under the Berne Convention. This allows the creator to prevent another entity from copying the program and there is generally no need to register code in order for it to be copyrighted.
Patents, on the other hand, give their owners the right to prevent others from using a claimed invention, even if it was independently developed and there was no copying involved. In fact, one of the most recent EPO decisions clarifies the distinction, stating that software is patentable, because it is basically only a technical method executed on a computer, which is to be distinguished from the program itself for executing the method, the program being merely an expression of the method, and thus being copyrighted.
Patents cover the underlying methodologies embodied in a given piece of software, or the function that the software is intended to serve, independent of the particular language or code that the software is written in. Copyright prevents the direct copying of some or all of a particular version of a given piece of software, but does not prevent other authors from writing their own embodiments of the underlying methodologies. Copyright can also be used to prevent a given set of data from being copied while still allowing the author to keep the contents of said set of data a trade secret.
Whether and how the numerus clausus principle shall apply to the legal hybrid software

Free and open source software

There is strong dislike in the free software community towards software patents. Much of this has been caused by free software or open source projects terminating
Several patent holders have offered royalty-free patent licenses for a very small portion of their patent portfolios.  Such actions have provoked only minor reaction from the free and open source software communities for reasons such as fear of the patent holder changing their mind or the license terms being so narrow as to have little use.  Companies that have done this include Apple Inc,
In 2005 Sun Microsystems announced that they were making a portfolio of 1,600 patents available through a patent license called Common Development and Distribution License.
In 2006, Microsoft's pledge not to sue Novell Linux customers, openSUSE contributors, and free/open source software developers over patents
and the associated collaboration agreement with Novell was met with disdain from the Software Freedom Law Center
while commentators from the Free Software Foundation stated that the agreement would not comply with GPLv3. Meanwhile, Microsoft has reached similar agreements with Dell, Inc. and Samsung,

Unisys case

In the late 1990s, Unisys claimed to have granted royalty free licenses to hundreds of not-for-profit organizations that used the patented LZW compression method and, by extension, the GIF image format. However, this did not include most software developers and Unisys were "barraged" by negative and "sometimes obscene" emails from software developers.

Licensing

thumb|right|Total US software patents by class of invention as of 2004Patenting software is widespread in the US. As of 2004, approximately 145,000 patents had issued in the 22 classes of patents covering "computer implemented inventions". (see table to the right).
Many software companies cross license their patents to each other. These agreements allow each party to practice the other party's patented inventions without the threat of being sued for patent infringement. Microsoft, for example, has agreements with IBM, Sun Microsystems, SAP, Hewlett-Packard, Siemens AG, Cisco, Autodesk and recently Novell. Microsoft cross-licensed its patents with Sun, despite being direct competitors, and with Autodesk even though Autodesk has far fewer patents than Microsoft.
The ability to negotiate cross licensing agreements is a major reason that many software companies, including those providing open source software, file patents. As of June 2006, for example, Red Hat has developed a portfolio of 10 issued US patents, 1 issued European patent, 163 pending US patent applications, and 33 pending international PCT (Patent Cooperation Treaty) patent applications. Red Hat uses this portfolio to cross license with proprietary software companies so that they can preserve their freedom to operate.
Other patent holders are in the business of inventing new "computer implemented inventions" and then commercializing the inventions by licensing the patents to other companies that manufacture the inventions. Walker Digital, for example, has generated a large patent portfolio from its research efforts, including the basic patent on the Priceline. US universities also fall into this class of patent owners. They collectively generate about $1.4 billion per year through licensing the inventions they develop to both established and start up companies in all fields of technology, including software.
Still other patent holders focus on obtaining patents from original inventors and licensing them to companies that have introduced commercial products into the marketplace after the patents were filed. Some of these patent holders, such as Intellectual Ventures, are privately held companies financed by large corporations such as Apple, Microsoft, Intel, Google, etc. Others, such as Acacia Technologies, are publicly traded companies with institutional investors being the primary shareholders.
The practice of acquiring patents merely to license them is controversial in the software industry. Companies that have this business model are pejoratively referred to as patent trolls. It is an integral part of the business model that patent licensing companies sue infringers that do not take a license. Furthermore, they may take advantage of the fact that many companies will pay a modest license fee (e.g.$100,000 to $1,000,000) for rights to a patent of questionable validity, rather than pay the high legal fees ($2,000,000 or more) to demonstrate in court that the patent is invalid.







Economic studies

 | surname1=Bessen
 | surname2=Hunt
 | title=An Empirical Look at Software Patents
 | year=2004
 | url=
}} This paper includes a method of identifying software patents that has proved popular with organisations such as the Public Patent Foundation

Books

Papers and presentations


