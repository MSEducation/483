[[DocBook]]

CATEGORIES: DocBook, Markup languages, Document-centric XML-based standards, Technical communication, Technical communication tools, Software documentation

DocBook is a semantic markup language for technical documentation. It was originally intended for writing technical documents related to computer hardware and software but it can be used for any other sort of documentation.What is DocBook?
As a semantic language, DocBook enables its users to create document content in a presentation-neutral form that captures the logical structure of the content; that content can then be published in a variety of formats, including HTML, XHTML, EPUB, PDF, man pages, Web helpDocBook WebHelp Project and HTML Help, without requiring users to make any changes to the source.



DocBook is an XML language. In its current version (5.x), DocBook's language is formally defined by a RELAX NG schema with integrated Schematron rules. (There are also W3C XML Schema+Schematron and Document Type Definition (DTD) versions of the schema available, but these are considered non-standard.)
As a semantic language, DocBook documents do not describe what their contents "look like," but rather the meaning of those contents. For example, rather than explaining how the abstract for an article might be visually formatted, DocBook simply says that a particular section is an abstract. It is up to an external processing tool or application to decide where on a page the abstract should go and what it should look like or whether or not it should be included in the final output at all.
DocBook provides a vast number of semantic element tags. They are divided into three broad categories: structural, block-level, and inline. 
Structural tags specify broad characteristics of their contents. The book element, for example, specifies that its child elements represent the parts of a book. This includes a title, chapters, glossaries, appendices, and so on. DocBook's structural tags include, but are not limited to:
Structural elements can contain other structural elements. Structural elements are the only permitted top-level elements in a DocBook document. 
Block-level tags are elements like paragraph, lists, and so forth. Not all of these elements can contain actual text directly. Sequential block-level elements are expected to be rendered one "after" another. After, in this case, can differ depending on the language. In most Western languages, "after" means below:  text paragraphs are printed down the page. Other languages' writing systems can have different directionality; for example, in Japanese, paragraphs are often printed in downward columns, with the columns running from right to left, so "after" in that case would be to the left. DocBook semantics are entirely neutral to these kinds of language-based concepts.
Inline-level tags are elements like emphasis, hyperlinks, and so forth. They wrap text within a block-level element. These elements do not cause the text to break when rendered in a paragraph format, but typically they cause the document processor to apply some kind of distinct typographical treatment to the enclosed text, by changing the font, size, or similar attributes. (The DocBook specification does say that it expects different typographical treatment, but it does not offer specific requirements as to what this treatment may be.)   That is, it is not required that a DocBook processor transform an emphasis tag into "italics." A reader-based DocBook processor could increase the volume of the words. Or, a text-based processor could use bold instead of italics.

Sample document

Semantically, this document is a "book," with a "title," that contains two "chapters" each with their own "titles." Those "chapters" contain "paragraphs" that have text in them. The markup is fairly readable in English.
In more detail, the root element of the document is book. All DocBook elements are in an XML Namespace, so the root element has an xmlns attribute to set the current namespace. Also, the root element of a DocBook document must have a version that specifies the version of the format that the document is built on.
(XML documents can include elements from multiple namespaces at once.  For simplicity, the example does not illustrate this.)
A book element must contain a title, or an info element containing a title. This must be before any child structural elements. Following the title are the structural children, in this case, two chapter elements. Each of these must have a title. They contain para block elements, which can contain free text and other inline elements like the emphasis in the second paragraph of the first chapter.

Schemas and validation

Rules such as the ones alluded to in the preceding paragraph ("a book element must contain a title, or an info element containing a title," etc.) are formally defined in the DocBook schema. Appropriate programming tools can be used to validate an XML document (DocBook or otherwise), against its corresponding schema, in order to determine if (and if so, where) the document fails to conform to that schema.  XML editing tools can also use schema information to avoid creating non-conforming documents in the first place.

DocBook authoring

Because DocBook is XML, documents can be created and edited with any text editor. A dedicated XML editor is likewise a functional DocBook editor. DocBook provides schema files for popular XML schema languages, so any XML editor that can provide content completion based on a schema can do so for DocBook. Many graphical or WYSIWYG XML editors come with the ability to edit DocBook like a word processor. 

DocBook processing

Because DocBook is an XML format, conforming to a well-defined schema, documents can be validated and processed using any tool or programming language that includes XML support.
DocBook files are used to prepare output files in a wide variety of formats.  Nearly always, this is accomplished using DocBook XSL stylesheets. These are XSLT stylesheets that transform DocBook documents into a number of formats (HTML, XSL-FO for later conversion into PDF, etc.). These  stylesheets can be sophisticated enough to generate tables of contents, glossaries, and indexes.  They can oversee the selection of particular designated portions of a master document to produce different versions of the same document (such as a "tutorial" or a "quick-reference guide," where both of these consist of a subset of the material).
Because the standard DocBook XSL stylesheets are well-formed XSL stylesheets, and DocBook is well-formed XML, users can write their own customized stylesheets or even a full-fledged program to process the DocBook into an appropriate output format as their needs dictate.

=Web help=

Web help is a chunked HTML output format in the DocBook XSL stylesheets that was introduced in version 1.76.1. The documentation for web helpWeb help documentation also provides an example of web help and is part of the DocBook XSL distribution. Its major features include CSS-based page layout without frameset, multilingual full content search, table of contents (TOC) pane with collapsible TOC tree, auto-synchronization of content pane and TOC. This web help format was originally implemented by Kasun Gajasinghe as part of the Google Summer of Code 2010 program.Web help DocBook wiki page

History

DocBook began in 1991 in discussion groups on Usenet and eventually became a joint project of HAL Computer Systems and O'Reilly & Associates and eventually spawned its own maintenance organization (the Davenport Group) before moving in 1998 to the SGML Open consortium, which subsequently became OASIS. DocBook is currently maintained by the DocBook Technical Committee at OASIS.Getting Started with DocBook
DocBook is available in both SGML and XML forms, as a DTD. RELAX NG and W3C XML Schema forms of the XML version are available. Starting with DocBook 5, the RELAX NG version is the "normative" form from which the other formats are generated.
DocBook originally started out as an SGML application, but an equivalent XML application was developed and has now replaced the SGML one for most uses. (Starting with version 4 of the SGML DTD, the XML DTD continued with this version numbering scheme.) Initially, a key group of software companies used DocBook since their representatives were involved in its initial design. Eventually, however, DocBook was adopted by the open source community where it has become a standard for creating documentation for many projects, including FreeBSD, KDE, GNOME desktop documentation, the GTK+ API references, the Linux kernel documentation, and the work of the Linux Documentation Project.
Norman Walsh and the DocBook Project development team maintain the key application for producing output from DocBook source documents: A set of XSL stylesheets (as well as a legacy set of DSSSL stylesheets) that can generate high-quality HTML and print (FO/PDF) output, as well as output in other formats, including RTF, man pages and HTML Help.
Walsh is also the principal author of the book DocBook: The Definitive Guide, the official documentation of DocBook. This book is available online under the GFDL, and also as a print publication.

Pre DocBook v5.0

The current version of DocBook, 5.1, is fairly recent. Prior versions have been and still are in widespread use, so this section provides an overview of the changes to the older 4.x formats.
Until DocBook 5, DocBook was defined normatively by a Document Type Definition (DTD). Since DocBook was built originally as an application of SGML, the DTD was the only available schema language. DocBook 4.x formats can be SGML or XML, but the XML version does not have its own namespace.
As an outgrowth of being defined by a DTD, DocBook 4.x formats were required to live within the restrictions of being defined by a DTD. The most significant for the language being that an element name uniquely defines its possible contents. That is, an element named info must contain the same information no matter where it is in the DocBook file. As such, there are many kinds of info elements in DocBook 4.x: bookinfo, chapterinfo, etc. Each of them has a slightly different content model, but they do share some of their content model. Additionally, they repeat context information. The book's info element is that because it is a direct child of the book; it does not need to be named specially for a human reader. However, because the format was defined by a DTD, it did have to be named as such.
The root element does not have or need a version, as the version is built into the DTD declaration at the top of a pre-DocBook 5 document.
DocBook 4.x documents are not compatible with DocBook 5, but they can be converted into DocBook 5 documents through the use of an XSLT stylesheet. One (db4-upgrade.Jirka Kosek, Norman Walsh, Dick Hamilton, and Michael Smith, DocBook V5.0: The Transition Guide, 16 June 2009, Converting DocBook V4.x documents to DocBook V5.0

Simplified DocBook

DocBook offers a large number of features that may be overwhelming to a new user.  For those who want the convenience of DocBook without a steep learning curve, Simplified DocBook was designed.  It is a small subset of DocBook designed for single documents such as articles or white papers (i.e., "books" are not supported).  The Simplified DocBook DTD is currently at version 1.1.Simplified DocBook





Further reading

 |    author = Norman Walsh
 |date=June 2010
 |     title = DocBook 5: The Definitive Guide
 |   edition = 2nd edition
 | publisher = O'Reilly Associates
 |        isbn = 978-0-596-80502-9
 |       url = 
 }}
 |    author = Bob Stayton
 |      year = 2005
 |     title = DocBook XSL: The Complete Guide
 |   edition = 3rd edition
 | publisher = Sagehill Enterprises
 |        isbn = 0-9741521-2-9
 |       url = 
 }}
 |    author = Joe Brockmeier
 |      year = 2001
 |     title = DocBook Publishing - A Better Way to Create Professional Documents
 | publisher = Prima Tech's Linux Series
 |        isbn = 0-7615-3331-1
 }}




