[[Autoconf]]

CATEGORIES: Computer configuration, GNU Project software, Free computer libraries, Cross-platform free software, Build automation

GNU Autoconf is a tool for producing configure scripts for building, installing and packaging software on computer systems where a Bourne shell is available.
Autoconf is agnostic about the programming languages used, but it is often used for projects using C, C++, Fortran, Fortran 77, Erlang or Objective-C.
A configure script configures a software package for installation on a particular target system.  After running a series of tests on the target system, the configure script generates header files and a makefile from templates, thus customizing the software package for the target system.  Together with Automake and Libtool, Autoconf forms the GNU build system. It comprises several other tools, notably Autoheader.

==Usage overview==

The developer specifies the desired behaviour of the configure script by writing a list of instructions in the GNU m4 language in a file called "configure.ac".  A library of pre-defined m4 macros is available to describe common configure script instructions.  Autoconf transforms the instructions in "configure.ac" into a portable configure script.
The system that will be doing the building need not have autoconf installed: autoconf is needed only to build the configure script, that is usually shipped with the software.

===configure.ac format===

The GNU Autoconf manual suggests the following format for the configure.ac file:

==History==

Autoconf was begun in the summer of 1991 by David Mackenzie to support his work at the Free Software Foundation.  In the subsequent years it grew to include enhancements from a variety of authors and became the most widely used build configuration system for writing portable free or open-source software.

==Approach==

Autoconf is similar to the Metaconfig package used by Perl.  The imake system formerly used by the X Window System (up to X11R6.9) is closely related, but has a different philosophy.
The Autoconf approach to portability is to test for features, not for versions. For example, the native C compiler on SunOS 4 did not support ISO C. However, it is possible for the user or administrator to have installed an ISO C-compliant compiler.  A pure version-based approach would not detect the presence of the ISO C compiler, but a feature-testing approach would be able to discover the ISO C compiler the user had installed. The rationale of this approach is to gain the following advantages:

==Criticism==

There is some criticism that states that Autoconf uses dated technologies, has a lot of legacy restrictions, and complicates simple scenarios unnecessarily for the author of configure.ac scripts. In particular, often cited weak points of Autoconf are:
|title = Why the KDE project switched to CMake -- and how
|first = Alexander
|last = Neundorf
|date = 2006-06-21
|url = http://lwn.net/Articles/188693/
}}[/ref]
|title = GNU Coding Standards
|url = https://www.gnu.org/prep/standards/standards.html
}}[/ref]
|first = Andrew
|last = McCall
|title = Stop the autoconf insanity! Why we need a new build system
|url = http://freshmeat.net/articles/stop-the-autoconf-insanity-why-we-need-a-new-build-system
|date = 2003-06-21
}}[/ref]
|first = Thomas 
|last = Dickey 
|title = why i still use autoconf 2.13
|url = http://invisible-island.net/autoconf/autoconf.html
}}[/ref]
Due to these limitations, several projects that used GNU Build System switched to different build systems, such as CMake and SCons.http://www.blender.org/development/release-logs/blender-233/build-systems/

==See also==

==References==

==External links==


