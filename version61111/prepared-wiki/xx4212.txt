 | year = 1989}}.</ref> describe a variation of heapsort based on a [[Cartesian tree]] that does not add an element to the heap until smaller values on both sides of it have already been included in the sorted output. As they show, this modification can allow the algorithm to sort more quickly than O(''n''&nbsp;log&nbsp;''n'') for inputs that are already nearly sorted.

==Comparison with other sorts==

Heapsort primarily competes with quicksort, another very efficient general purpose nearly-in-place comparison-based sort algorithm.
Quicksort is typically somewhat faster due to some factors, but the worst-case running time for quicksort is O(n2), which is unacceptable for large data sets and can be deliberately triggered given enough knowledge of the implementation, creating a security risk. See quicksort for a detailed discussion of this problem and possible solutions.
Thus, because of the O(n log n) upper bound on heapsort's running time and constant upper bound on its auxiliary storage, embedded systems with real-time constraints or systems concerned with security often use heapsort. 
Heapsort also competes with merge sort, which has the same time bounds. Merge sort requires Î©(n) auxiliary space, but heapsort requires only a constant amount. Heapsort typically runs faster in practice on machines with small or slow data caches. On the other hand, merge sort has several advantages over heapsort:
Introsort is an alternative to heapsort that combines quicksort and heapsort to retain advantages of both: worst case speed of heapsort and average speed of quicksort.

==Pseudocode==

The following is the "simple" way to implement the algorithm in pseudocode. Arrays are zero-based and swap is used to exchange two elements of the array. Movement 'down' means from the root towards the leaves, or from lower indices to higher. Note that during the sort, the largest element is at the root of the heap at a0, while at the end of the sort, the largest element is in aend.
 '''function''' heapsort(a, count) '''is'''
     '''input:''' an unordered array ''a'' of length ''count''
     (: Build the heap in array a so that largest value is at the root :)
     heapify(a, count)
