 Chapter 8 ''Ladder Logic Diagrams and PLC Implementations''</ref>  Implementations of ladder logic have characteristics, such as sequential execution and support for control flow features, that make the analogy to hardware somewhat inaccurate. This argument has become less relevant given that most ladder logic programmers have a software background in more conventional [[programming language]]s.
Manufacturers of programmable logic controllers generally also provide associated ladder logic programming systems. Typically the ladder logic languages from two manufacturers will not be completely compatible; ladder logic is better thought of as a set of closely related programming languages rather than one language. (The IEC 61131-3 standard has helped to reduce unnecessary differences, but translating programs between systems still requires significant work.) Even different models of programmable controllers within the same family may have different ladder notation such that programs cannot be seamlessly interchanged between models.
Ladder logic can be thought of as a rule-based language rather than a procedural language. A "rung" in the ladder represents a rule. When implemented with relays and other electromechanical devices, the various rules "execute" simultaneously and immediately. When implemented in a programmable logic controller, the rules are typically executed sequentially by software, in a continuous loop (scan). By executing the loop fast enough, typically many times per second, the effect of simultaneous and immediate execution is achieved, if considering intervals greater than the "scan time" required to execute all the rungs of the program. Proper use of programmable controllers requires understanding the limitations of the execution order of rungs.

==Example of a simple ladder logic program==

The language itself can be seen as a set of connections between logical checkers (contacts) and actuators (coils). If a path can be traced between the left side of the rung and the output, through asserted (true or "closed") contacts, the rung is true and the output coil storage bit is asserted (1) or true. If no path can be traced, then the output is false (0) and the "coil" by analogy to electromechanical relays is considered "de-energized".  The analogy between logical propositions and relay contact status is due to Claude Shannon.
Ladder logic has contacts that make or break circuits to control coils. Each coil or contact corresponds to the status of a single bit in the programmable controller's memory.  Unlike electromechanical relays, a ladder program can refer any number of times to the status of a single bit, equivalent to a relay with an indefinitely large number of contacts.
So-called "contacts" may refer to physical ("hard") inputs to the programmable controller from physical devices such as pushbuttons and limit switches via an integrated or external input module, or may represent the status of internal storage bits which may be generated elsewhere in the program.
Each rung of ladder language typically has one coil at the far right. Some manufacturers may allow more than one output coil on a rung.
The "coil" (output of a rung) may represent a physical output which operates some device connected to the programmable controller, or may represent an internal storage bit for use elsewhere in the program.

===Logical AND===

 ------[ ]--------------[ ]----------------( )
   Key Switch 1      Key Switch 2       Door Motor
The above realizes the function: Door Motor = Key Switch 1 AND Key Switch 2
This circuit shows two key switches that security guards might use to activate an electric motor on a bank vault door. When the normally open contacts of both switches close, electricity is able to flow to the motor which opens the door.

===Logical AND with NOT===

 ------[ ]--------------[\]----------------( )
   Close Door      Obstruction         Door Motor
The above realizes the function: Door Motor = Close door AND  NOT(Obstruction).
This circuit shows a pushbutton that closes a door, and an obstruction detector that senses if something is in the way of the closing door. When the normally open pushbutton contact closes and the normally closed obstruction detector is closed (no obstruction detected), electricity is able to flow to the motor which closes the door.

===Logical OR===

 --+-------[ ]-------+-----------------( )
 <nowiki>  | Exterior Unlock |</nowiki>                 Unlock<nowiki>
  |                 |
  </nowiki>+-------[ ]-------+
 <nowiki> </nowiki>   Interior Unlock<nowiki></nowiki>
The above realizes the function: Unlock = Interior Unlock OR Exterior Unlock
This circuit shows the two things that can trigger a car's power door locks. The remote receiver is always powered. The lock solenoid gets power when either set of contacts is closed.

===Industrial STOP/START===

In common industrial latching start/stop logic we have a "start" button to turn on a motor contactor, and a "stop" button to turn off the contactor.
When the "start" button is pushed the input goes true, via the "stop" button NC contact. When the "run" input becomes true the seal-in "run" NO contact in parallel with the "start" NO contact will close maintaining the input logic true (latched or sealed-in). After the circuit is latched the "stop" button may be pushed causing its NC contact to open and consequently the input to go false. The "run" NO contact then opens and the circuit logic returns to its quiescent state.
 --+----[ ]--+----[\]----( )
 <nowiki>  |   start |   stop    run
  |         |
  +----[ ]--+
       run</nowiki>
 -------[ ]--------------( )
         run             motor
The above realizes the function: run = ( start OR run ) AND ( NOT stop )
This latch configuration is a common idiom in ladder logic. In ladder logic it is referred to as seal-in logic. The key to understanding the latch is in recognizing that "start" switch is a momentary switch (once the user releases the button, the switch is open again).  As soon as the "run" solenoid engages, it closes the "run" NO contact, which latches the solenoid on. The "start" switch opening up then has no effect.
For safety reasons, an Emergency-Stop and/or Stop should be hardwired in series with the Start switch, and the relay logic should reflect this.
 --[\]----[\]----+--[ ]--+---------( )
   ES    Stop    | Start |        Motor
                 |       |
                 +--[ ]--+
                    Run

===Complex logic===

Here is an example of what two rungs in a ladder logic program might look like. In real world applications, there may be hundreds or thousands of rungs.
Typically, complex ladder logic is 'read' left to right and top to bottom. As each of the lines (or rungs) are evaluated the output coil of a rung may feed into the next stage of the ladder as an input. In a complex system there will be many "rungs" on a ladder, which are numbered in order of evaluation.
 1. ----[ ]---------+----[ ]-----+----( )
      Switch        |   HiTemp   |    A/C
                    |            |
                    +----[ ]-----+
                        Humid
 2. ----[ ]----[\]--------------------( )
        A/C    Heat                 Cooling
Line 1 realizes the function: A/C = Switch AND ( HiTemp OR Humid )
Line 2 realizes the function:  Cooling = A/C AND ( NOT Heat )
This represents a slightly more complex system for rung 2. After the first line has been evaluated, the output coil "A/C" is fed into rung 2, which is then evaluated and the output coil "Cooling" could be fed into an output device "Compressor" or into rung 3 on the ladder.
This system allows very complex logic designs to be broken down and evaluated.

===Additional functionality===

Additional functionality can be added to a ladder logic implementation by the PLC manufacturer as a special block.  When the special block is powered, it executes code on predetermined arguments.  These arguments may be displayed within the special block.
                              +-------+
  -----[ ]--------------------+  A    +----
   Remote Unlock              +-------+
                           Remote Counter
                              +-------+
  -----[ ]--------------------+  B    +----
   Interior Unlock            +-------+
                          Interior Counter
                      +--------+
  --------------------+ A + B  +-----------
                      | into C |
                      +--------+
                         Adder
In this example, the system will count the number of times that the interior and remote unlock buttons are pressed.  This information will be stored in memory locations A and B.   Memory location C will hold the total number of times that the door has been unlocked electronically.
PLCs have many types of special blocks.  They include timers, arithmetic operators and comparisons, table lookups, text processing, PID control, and filtering functions. More powerful PLCs can operate on a group of internal memory locations and execute an operation on a range of addresses, for example,to simulate a physical sequential drum controller or a finite state machine.  In some cases, users can define their own special blocks, which effectively are subroutines or macros.  The large library of special blocks along with high speed execution has allowed use of PLCs to implement very complex automation systems.

==Limitations and successor languages==

Ladder notation is best suited to control problems where only binary variables are required and where interlocking and sequencing of binary is the primary control problem. Since execution of rungs is sequential within a program and may be undefined or obscure within a rung, some logic race conditions are possible which may produce unexpected results; complex rungs are best broken into several simpler steps to avoid this problem. Some manufacturers avoid this problem by explicitly and completely defining the execution order of a rung, however programmers may still have problems fully grasping the resulting complex semantics.
Analog quantities and arithmetical operations are clumsy to express in ladder logic and each manufacturer has different ways of extending the notation for these problems.  There is usually limited support for arrays and loops, often resulting in duplication of code to express cases which in other languages would call for use of indexed variables.
As microprocessors have become  more powerful, notations such as sequential function charts and function block diagrams can replace ladder logic for some limited applications.  Very large programmable controllers may have all or part of the programming carried out in a dialect that resembles BASIC or C or other programming language with bindings appropriate for a real-time application environment.

==See also==

==References==

==External links==


