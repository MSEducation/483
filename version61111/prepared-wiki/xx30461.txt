[[Self-organizing map]]

CATEGORIES: Neural networks, Dimension reduction, Data clustering algorithms

A self-organizing map (SOM) or self-organizing feature map (SOFM) is a type of artificial neural network (ANN) that is trained using unsupervised learning to produce a low-dimensional (typically two-dimensional), discretized representation of the input space of the training samples, called a map. Self-organizing maps are different from other artificial neural networks in the sense that they use a neighborhood function to preserve the topological properties of the input space.
This makes SOMs useful for visualizing low-dimensional views of high-dimensional data, akin to multidimensional scaling. The model was first described as an artificial neural network by the Finnish professor Teuvo Kohonen, and is sometimes called a Kohonen map or network.[tpl]cite web |title=Kohonen Network |last1=Kohonen |first1=Teuvo |last2=Honkela |first2=Timo |year=2007 |work=Scholarpedia |url=http://www.scholarpedia.org/article/Kohonen_network [/tpl][tpl]cite journal |last=Kohonen |first=Teuvo |year=1982 |title=Self-Organized Formation of Topologically Correct Feature Maps |journal=Biological Cybernetics |volume=43 |number=1 |pages=59–69 |doi=10.1007/bf00337288[/tpl]
Like most artificial neural networks, SOMs operate in two modes: training and mapping. "Training" builds the map using input examples (a competitive process, also called vector quantization), while "mapping" automatically classifies a new input vector.
A self-organizing map consists of components called nodes or neurons. Associated with each node is a weight vector of the same dimension as the input data vectors and a position in the map space. The usual arrangement of nodes is a two-dimensional regular spacing in a hexagonal or rectangular grid. The self-organizing map describes a mapping from a higher-dimensional input space to a lower-dimensional map space. The procedure for placing a vector from data space onto the map is to find the node with the closest (smallest distance metric) weight vector to the data space vector.
While it is typical to consider this type of network structure as related to feedforward networks where the nodes are visualized as being attached, this type of architecture is fundamentally different in arrangement and motivation.
Useful extensions include using toroidal grids where opposite edges are connected and using large numbers of nodes. 
It has been shown that while self-organizing maps with a small number of nodes behave in a way that is similar to K-means, larger self-organizing maps rearrange data in a way that is fundamentally topological in character. [tpl]cite web |title=Self-organizing map |url=http://www.princeton.edu/~achaney/tmve/wiki100k/docs/Self-organizing_map.html [/tpl]
It is also common to use the U-Matrix.[tpl]cite book |first=Alfred |last=Ultsch |first2=H. Peter |last2=Siemon |chapter=Kohonen's Self Organizing Feature Maps for Exploratory Data Analysis |title=Proceedings of the International Neural Network Conference (INNC-90), Paris, France, July 9–13, 1990 |pages=305–308 |editor1-first=Bernard |editor1-last=Widrow |editor2-first=Bernard |editor2-last=Angeniol |publisher=Kluwer |location=Dordrecht, Netherlands |year=1990 |volume=1 |isbn=978-0-7923-0831-7 |url=http://www.uni-marburg.de/fb12/datenbionik/pdf/pubs/1990/UltschSiemon90 [/tpl] The U-Matrix value of a particular node is the average distance between the node and its closest neighbors. In a square grid, for instance, we might consider the closest 4 or 8 nodes (the Von Neumann and Moore neighborhoods, respectively), or six nodes in a hexagonal grid.
Large SOMs display emergent properties. In maps consisting of thousands of nodes, it is possible to perform cluster operations on the map itself.[tpl]cite book |first=Alfred |last=Ultsch |chapter=Emergence in Self-Organizing Feature Maps |title=Proceedings of the 6th International Workshop on Self-Organizing Maps (WSOM '07) |editor1-first=H. |editor1-last=Ritter |editor2-first=R. |editor2-last=Haschke |publisher=Neuroinformatics Group |location=Bielefeld, Germany |year=2007 |isbn=978-3-00-022473-7 [/tpl]

==Learning algorithm==

The goal of learning in the self-organizing map is to cause different parts of the network to respond similarly to certain input patterns. This is partly motivated by how visual, auditory or other sensory information is handled in separate parts of the cerebral cortex in the human brain.[tpl]cite book |first=Simon |last=Haykin |title=Neural networks - A comprehensive foundation |chapter=9. Self-organizing maps |edition=2nd |publisher=Prentice-Hall |year=1999 |isbn=0-13-908385-5 [/tpl]
The weights of the neurons are initialized either to small random values or sampled evenly from the subspace spanned by the two largest principal component eigenvectors. With the latter alternative, learning is much faster because the initial weights already give a good approximation of SOM weights.[tpl]cite web |title=Intro to SOM |first=Teuvo |last=Kohonen |work=SOM Toolbox |url=http://www.cis.hut.fi/projects/somtoolbox/theory/somalgorithm.shtml |year=2005 |accessdate=2006-06-18 [/tpl]
The network must be fed a large number of example vectors that represent, as close as possible, the kinds of vectors expected during mapping. The examples are usually administered several times as iterations.
The training utilizes competitive learning. When a training example is fed to the network, its Euclidean distance to all weight vectors is computed. The neuron whose weight vector is most similar to the input is called the best matching unit (BMU). The weights of the BMU and neurons close to it in the SOM lattice are adjusted towards the input vector. The magnitude of the change decreases with time and with distance (within the lattice) from the BMU. The update formula for a neuron with weight vector Wv(s) is
where s is the step index, t an index into the training sample, u is the index of the BMU for D(t), α(s) is a monotonically decreasing learning coefficient and D(t) is the input vector; v is assumed to visit all neurons for every value of s and t.[ref][tpl]cite web |title=Kohonen network |first1=Teuvo |last1=Kohonen |first2=Timo |last2=Honkela |work=Scholarpedia |url=http://www.scholarpedia.org/article/Kohonen_network |year=2011 |accessdate=2012-09-24 [/tpl]
[/ref] Depending on the implementations, t can scan the training data set systematically (t is 0, 1, 2...T-1, then repeat, T being the training sample's size), be randomly drawn from the data set (bootstrap sampling), or implement some other sampling method (such as jackknifing).
The neighborhood function Θ(u, v, s) depends on the lattice distance between the BMU (neuron u) and neuron v. In the simplest form it is 1 for all neurons close enough to BMU and 0 for others, but a Gaussian function is a common choice, too. Regardless of the functional form, the neighborhood function shrinks with time. At the beginning when the neighborhood is broad, the self-organizing takes place on the global scale. When the neighborhood has shrunk to just a couple of neurons, the weights are converging to local estimates. In some implementations the learning coefficient α and the neighborhood function Θ decrease steadily with increasing s, in others (in particular those where t scans the training data set) they decrease in step-wise fashion, once every T steps.
This process is repeated for each input vector for a (usually large) number of cycles λ. The network winds up associating output nodes with groups or patterns in the input data set. If these patterns can be named, the names can be attached to the associated nodes in the trained net.
During mapping, there will be one single winning neuron: the neuron whose weight vector lies closest to the input vector. This can be simply determined by calculating the Euclidean distance between input vector and weight vector.
While representing input data as vectors has been emphasized in this article, it should be noted that any kind of object which can be represented digitally, which has an appropriate distance measure associated with it, and in which the necessary operations for training are possible can be used to construct a self-organizing map. This includes matrices, continuous functions or even other self-organizing maps.

===Preliminary definitions===

Consider an n×m array of nodes, each of which contains a weight vector and is aware of its location in the array. Each weight vector is of the same dimension as the node's input vector. The weights may initially be set to random values.
Now we need input to feed the map —The generated map and the given input exist in separate subspaces. We will create three vectors to represent colors. Colors can be represented by their red, green, and blue components. Consequently our input vectors will have three components, each corresponding to a color space. The input vectors will be:
The color training vector data sets used in SOM:
The data vectors should preferably be normalized (vector length is equal to one) before training the SOM.
Neurons (40×40 square grid) are trained for 250 iterations with a learning rate of 0.1 using the normalized Iris flower data set which has four-dimensional data vectors. Shown are: a color image formed by the first three dimensions of the four-dimensional SOM weight vectors (top left), a pseudo-color image of the magnitude of the SOM weight vectors (top right), a U-Matrix (Euclidean distance between weight vectors of neighboring cells) of the SOM (bottom left), and an overlay of data points (red: I. setosa, green: I. versicolor and blue: I. virginica) on the U-Matrix based on the minimum Euclidean distance between data vectors and SOM weight vectors (bottom right).

===Variables===

These are the variables needed, with vectors in bold,

===Algorithm===

A variant algorithm:

==Interpretation==

There are two ways to interpret a SOM. Because in the training phase weights of the whole neighborhood are moved in the same direction, similar items tend to excite adjacent neurons. Therefore, SOM forms a semantic map where similar samples are mapped close together and dissimilar ones apart. This may be visualized by a U-Matrix (Euclidean distance between weight vectors of neighboring cells) of the SOM.Ultsch, Alfred (2003); U*-Matrix: A tool to visualize clusters in high dimensional data, Department of Computer Science, University of Marburg, Technical Report Nr. 36:1-12Saadatdoost, Robab, Alex Tze Hiang Sim, and Jafarkarimi, Hosein. "Application of self organizing map for knowledge discovery based in higher education data." Research and Innovation in Information Systems (ICRIIS), 2011 International Conference on. IEEE, 2011.
The other way is to think of neuronal weights as pointers to the input space. They form a discrete approximation of the distribution of training samples. More neurons point to regions with high training sample concentration and fewer where the samples are scarce.
SOM may be considered a nonlinear generalization of Principal components analysis (PCA).Yin, Hujun; Learning Nonlinear Principal Manifolds by Self-Organising Maps, in Gorban, Alexander N.; Kégl, Balázs; Wunsch, Donald C.; and Zinovyev, Andrei (Eds.); Principal Manifolds for Data Visualization and Dimension Reduction, Lecture Notes in Computer Science and Engineering (LNCSE), vol. 58, Berlin, Germany: Springer, 2007, ISBN 978-3-540-73749-0 It has been shown, using both artificial and real geophysical data, that SOM has many advantagesLiu, Yonggang; and Weisberg, Robert H. (2005); Patterns of Ocean Current Variability on the West Florida Shelf Using the Self-Organizing Map, Journal of Geophysical Research, 110, C06003, [tpl]doi|10.1029/2004JC002786[/tpl]Liu, Yonggang; Weisberg, Robert H.; and Mooers, Christopher N. K. (2006); Performance Evaluation of the Self-Organizing Map for Feature Extraction, Journal of Geophysical Research, 111, C05018, [tpl]doi|10.1029/2005jc003117[/tpl] over the conventional feature extraction methods such as Empirical Orthogonal Functions (EOF) or PCA.
Originally, SOM was not formulated as a solution to an optimisation problem. Nevertheless, there have been several attempts to modify the definition of SOM and to formulate an optimisation problem which gives similar results.Heskes, Tom; Energy Functions for Self-Organizing Maps, in Oja, Erkki; and Kaski, Samuel (Eds.), Kohonen Maps, Elsevier, 1999 For example, Elastic maps use the mechanical metaphor of elasticity to approximate principal manifolds:Gorban, Alexander N.; Kégl, Balázs; Wunsch, Donald C.; and Zinovyev, Andrei (Eds.); Principal Manifolds for Data Visualization and Dimension Reduction, Lecture Notes in Computer Science and Engineering (LNCSE), vol. 58, Berlin, Germany: Springer, 2007, ISBN 978-3-540-73749-0 the analogy is an elastic membrane and plate.

==Alternatives==

==See also==

==References==

Application of self-organising maps and multi-layer perceptron-artificial neural networks for streamflow and water level forecasting in data-poor catchments: the case of the Lower Shire floodplain, Malawi. http://www.iwaponline.com/nh/up/nh2014168.htm

==External links==


