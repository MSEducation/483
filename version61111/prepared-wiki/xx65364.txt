[[Bitboard]]

CATEGORIES: Game artificial intelligence, Video board games, Computer chess, Bit data structures

A bitboard is a data structure commonly used in computer systems that play board games.
A bitboard, often used for boardgames such as chess, checkers, othello and word games, is a specialization of the bitset data structure, where each bit represents a game position or state, designed for optimization of speed and/or memory or disk use in mass calculations. Bits in the same bitboard relate to each other in the rules of the game often forming a game position when taken together.  Other bitboards are commonly used as masks to transform or answer queries about positions.  The "game" may be any game-like system where information is tightly packed in a structured form with "rules" affecting how the individual units or pieces relate.

==Short description==

Bitboards are used in many of the world's highest-rated chess playing programs such as Houdini, Stockfish, and Critter. They help the programs analyze chess positions with few CPU instructions and hold a massive number of positions in memory efficiently.
Bitboards allow the computer to answer some questions about game state with one logical operation.  For example, if a chess program wants to know if the white player has any pawns in the center of the board (center four squares) it can just compare a bitboard for the player's pawns with one for the center of the board using a logical AND operation.  If there are no center pawns then the result will be zero.
Query results can also be represented using bitboards. For example, the query "What are the squares between X and Y?" can be represented as a bitboard. These query results are generally pre-calculated, so that a program can simply retrieve a query result with one memory load.
However, as a result of the massive compression and encoding, bitboard programs are not easy for software developers to either write or debug.

==History==

The bitboard method for holding a board game appears to have been invented in the mid-1950s, by Arthur Samuel and was used in his checkers program.  The method was published in 1959 as "Some Studies in Machine Learning Using the Game of Checkers" in the IBM Journal of Research and Development.
For the more complicated game of chess, it appears the method was independently rediscovered later by the Kaissa team in the Soviet Union in the late 1960s, although not publicly documented, and again by the authors of the U.S. Northwestern University program "Chess" in the early 1970s, and documented in 1977 in "Chess Skill in Man and Machine".

==Description for all games or applications==

A bitboard or bit field is a format that stuffs a whole group of related boolean variables into the same machine word, typically representing positions on a board game.  Each bit is a position, and when the bit is positive, a property of that position is true.  In chess, for example, there would be a bitboard for black knights.  There would be 64-bits where each bit represents a chess square.  Another bitboard might be a constant representing the center four squares of the board.  By comparing the two numbers with a bitwise logical AND instruction, we get a third bitboard which represents the black knights on the center four squares, if any. This format is generally more CPU and memory friendly than others.

==General technical advantages and disadvantages==

===Processor use===

====Pros====

The advantage of the bitboard representation is that it takes advantage of the essential logical bitwise operations available on nearly all CPUs that complete in one cycle and are fully pipelined and cached etc.  Nearly all CPUs have AND, OR, NOR, and XOR.  Many CPUs have additional bit instructions, such as finding the "first" bit, that make bitboard operations even more efficient.  If they do not have instructions well known algorithms can perform some "magic" transformations that do these quickly.
Furthermore, modern CPUs have instruction pipelines that queue instructions for execution.  A processor with multiple execution units can perform more than one instruction per cycle if more than one instruction is available in the pipeline.  Branching (the use of conditionals like if) makes it harder for the processor to fill its pipeline(s) because the CPU can't tell what it needs to do in advance.  Too much branching makes the pipeline less effective and potentially reduces the number of instructions the processor can execute per cycle.  Many bitboard operations require fewer conditionals and therefore increase pipelining and make effective use of multiple execution units on many CPUs.
CPUs have a bit width which they are designed toward and can carry out bitwise operations in one cycle in this width.  So, on a 64-bit or more CPU, 64-bit operations can occur in one instruction.  There may be support for higher or lower width instructions.  Many 32-bit CPUs may have some 64-bit instructions and those may take more than one cycle or otherwise be handicapped compared to their 32-bit instructions.
If the bitboard is larger than the width of the instruction set, then a performance hit will be the result.  So a program using 64-bit bitboards would run faster on a real 64-bit processor than on a 32-bit processor.

====Cons====

Some queries are going to take longer than they would with perhaps arrays, so bitboards are generally used in conjunction with array boards in chess programs.

===Memory use===

====Pros====

Bitboards are extremely compact. Since only a very small amount of memory is required to represent a position or a mask, more positions can find their way into registers, full speed cache, Level 2 cache, etc.  In this way, compactness translates into better performance (on most machines).  Also on some machines this might mean that more positions can be stored in main memory before going to disk.

====Cons====

For some games writing a suitable bitboard engine requires a fair amount of source code that will be longer than the straight forward implementation.  For limited devices (like cell phones) with a limited number of registers or processor instruction cache, this can cause a problem.  For full-sized computers it may cause cache misses between level one and level two cache.  This is a potential problemâ€”not a major drawback.  Most machines will have enough instruction cache so that this isn't an issue.

==Chess bitboards==

===Standard===

The first bit usually represents the square a1 (the lower left square), and the 64th bit represents the square h8 (the diagonally opposite square).
There are twelve types of pieces, and each type gets its own bitboard.  Black pawns get a board, white pawns, etc.  Together these twelve boards can represent a position.  Some trivial information also needs to be tracked elsewhere; the programmer may use boolean variables for whether each side is in check, can castle, etc.
Constants are likely available, such as WHITE_SQUARES, BLACK_SQUARES, FILE_A, RANK_4 etc.  More interesting ones might include CENTER, CORNERS, CASTLE_SQUARES, etc.
Examples of variables would be WHITE_ATTACKING, ATTACKED_BY_PAWN, WHITE_PASSED_PAWN, etc.

===Rotated===

"Rotated" bitboards are usually used in programs that use bitboards.  Rotated bitboards make certain operations more efficient.  While engines are simply referred to as "rotated bitboard engines," this is a misnomer as rotated boards are used in addition to normal boards making these hybrid standard/rotated bitboard engines.
These bitboards rotate the bitboard positions by 90 degrees, 45 degrees, and/or 315 degrees. A typical bitboard will have one byte per rank of the chess board. With this bitboard it's easy to determine rook attacks across a rank, using a table indexed by the occupied square and the occupied positions in the rank (because rook attacks stop at the first occupied square). By rotating the bitboard 90 degrees, rook attacks across a file can be examined the same way. Adding bitboards rotated 45 degrees and 315 degrees produces bitboards in which the diagonals are easy to examine. The queen can be examined by combining rook and bishop attacks. Rotated bitboards appear to have been developed separately and (essentially) simultaneously by the developers of the DarkThought and Crafty programs.[tpl]citation needed|date=October 2012[/tpl]

===Magics===

Magic move bitboard generation is a new and fast alternative to rotated move bitboard generators.[tpl]Citation needed|date=February 2012[/tpl]  These are also more versatile than rotated move bitboard generators because the generator can be used independently from any position.[tpl]Citation needed|date=February 2012[/tpl] The basic idea is that you can use a multiply, right-shift hashing function to index a move database, which can be as small as 1.5K. A speedup is gained because no rotated bitboards need to be updated, and because the lookups are more cache-friendly.[tpl]Citation needed|date=February 2012[/tpl]

==Other bitboards==

Many other games besides chess benefit from bitboards. 

==See also==

==External links==

===Calculators===

===Checkers===

===Chess===

====Articles====

====Code examples====

====Implementations====

=====Open source=====

=====Closed source=====

===Othello===

===Word Games===


