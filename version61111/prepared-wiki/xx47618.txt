[[Hoare logic]]

CATEGORIES: 1969 in computer science, Program logic, Static program analysis

Hoare logic (also known as Floyd–Hoare logic or Hoare rules) is a formal system with a set of logical rules for reasoning rigorously about the correctness of computer programs. It was proposed in 1969 by the British computer scientist and logician C. A. R. Hoare, and subsequently refined by Hoare and other researchers.[tpl]cite doi|10.1145/363235.363259[/tpl] The original ideas were seeded by the work of Robert Floyd, who had published a similar systemR. W. Floyd. "Assigning meanings to programs." Proceedings of the American Mathematical Society Symposia on Applied Mathematics. Vol. 19, pp. 19–31. 1967. for flowcharts.

==Hoare triple==

The central feature of Hoare logic is the Hoare triple. A triple describes how the execution of a piece of code changes the state of the computation. A Hoare triple is of the form
where P and Q are assertions and C is a command.Hoare originally wrote "P {C} Q" rather than "{P} C {Q}". P is named the precondition and Q the postcondition: when the precondition is met, executing the command establishes the postcondition. Assertions are formulae in predicate logic. 
Hoare logic provides axioms and inference rules for all the constructs of a simple imperative programming language. In addition to the rules for the simple language in Hoare's original paper, rules for other language constructs have been developed since then by Hoare and many other researchers. There are rules for concurrency, procedures, jumps, and pointers.

==Partial and total correctness==

Using standard Hoare logic, only partial correctness can be proven, while termination needs to be proved separately. Thus the intuitive reading of a Hoare triple is: Whenever P holds of the state before the execution of C, then Q will hold afterwards, or C does not terminate. In the latter case, there is no "after", so Q can be any statement at all. Indeed, one can choose Q to be false to express that C does not terminate.
Total correctness can also be proven with an extended version of the While rule.
In his 1969 paper, Hoare used a narrower notion of termination which also entailed absence of any run-time errors:
"Failure to terminate may be due to an infinite loop; or it may be due to violation of an implementation-defined limit, for example, the range of numeric operands, the size of storage, or an operating system time limit."p.579 upper left

==Rules==

===Empty statement axiom schema===

The empty statement rule asserts that the skip statement does not change the state of the program, thus whatever holds true before skip also holds true afterwards.This article uses a natural deduction style notation for rules. For example, [tpl]sfrac|α , β|φ[/tpl] informally means "If both α and β hold, then also φ holds"; α and β are called antecedents of the rule, φ is called its succedent. A rule without antecedents is called an axiom, and written as [tpl]sfrac| |  φ  [/tpl].

===Assignment axiom schema===

The assignment axiom states that after the assignment any predicate holds for the variable that was previously true for the right-hand side of the assignment. Formally, let P be an assertion in which the variable x is free. Then:
where PE/x denotes the assertion P in which each free occurrence of x has been replaced by the expression E.
The assignment axiom scheme means that the truth of PE/x is equivalent to the after-assignment truth of P. Thus were PE/x true prior to the assignment, by the assignment axiom, then P would be true subsequent to which. Conversely, were PE/x false (i.e. ¬PE/x true) prior to the assignment statement, P must then be false afterwards.
Examples of valid triples include:
The assignment axiom scheme is equivalent to saying that to find the precondition, first take the post-condition and replace all occurrences of the left-hand side of the assignment with the right-hand side of the assignment. Be careful not to try to do this backwards by following this incorrect way of thinking: {P} x:=E {PE/x};
this rule leads to nonsensical examples like:
Another incorrect rule looking tempting at first glance is {P} x:=E {P and x=E}; it leads to nonsensical examples like:
While a given postcondition P uniquely determines the precondition PE/x, the converse is not true. For example:
are valid instances of the assignment axiom scheme.
The assignment axiom proposed by Hoare does not apply when more than one name may refer to the same stored value. For example,
is wrong if x and y refer to the same variable (aliasing), although it is a proper instance of the assignment axiom scheme (with both {P} and {P2/x} being {y=3}).

===Rule of composition===

Hoare's rule of composition applies to sequentially executed programs S and T, where S executes prior to T and is written S;T (Q is called the midcondition):[tpl]cite book|first1=Michael|last1=Huth|first2=Mark|last2=Ryan|publisher=CUP|url=http://www.cs.bham.ac.uk/research/projects/lics/|isbn=052154310X|booktitle=Logic in Computer Science|edition=second |pages= 276[/tpl]
For example, consider the following two instances of the assignment axiom:
and
By the sequencing rule, one concludes:

===Conditional rule===

The conditional rule states that a postcondition Q common to then and else part is also a postcondition of the whole if...endif statement.
In the then and the else part, the unnegated and negated condition B can be added to the precondition P, respectively.
The condition, B, must not have side effects.
An example is given in the next section.
This rule was not contained in Hoare's original publication.
However, since a statement 
has the same effect as a one-time loop construct
the conditional rule can be derived from the other Hoare rules.
In a similar way, rules for other derived program constructs, like for loop, do...until loop, switch, break, continue can be reduced by program transformation to the rules from Hoare's original paper.

===Consequence rule===

This rule allows to strengthen the precondition and/or to weaken the postcondition.
It is used e.g. to achieve literally identical postconditions for the then and the else part.
For example, a proof of
needs to apply the conditional rule, which in turn requires to prove
for the then part, and
for the else part.
However, the assignment rule for the then part requires to chose P as 0 ≤ x ≤ 15; rule application hence yields
The consequence rule is needed to strengthen the precondition {-1 ≤ x Similarly, for the else part, the assignment rule yields
hence the consequence rule has to be applied with P1 and P2 being {x=15} and {true}, respectively, to strengthen again the precondition. Informally, the effect of the consequence rule is to "forget" that x=15 is known at the entry of the else part, since the assignment rule used for the else part doesn't need that information.

===While rule===

Here P is the loop invariant, which is to be preserved by the loop body S.
After the loop is finished, this invariant P still holds, and moreover ¬B must have caused the loop to end.
As in the conditional rule, B must not have side effects.
For example, a proof of 
by the while rule requires to prove
which is easily obtained by the assignment rule.
Finally, the postcondition {¬xFor another example, the while rule can be used to formally verify the following strange program to compute the exact square root x of an arbitrary number a - even if x is an integer variable and a is not a square number:
After applying the while rule with P being true, it remains to prove
which follows from the skip rule and the consequence rule.
In fact, the strange program is partially correct: if it happened to terminate, it is certain that x must have contained (by chance) the value of a 's square root.
However, it is not totally correct, since it obviously will not terminate under almost all circumstances.

===While rule for total correctness===

If the above ordinary while rule is replaced by the following one, the Hoare calculus can also be used to prove total correctness, i.e. termination"Termination" here is meant in the broader sense that computation will eventually be finished; it does not imply that no limit violation (e.g. zero divide) can stop the program prematurely. as well as partial correctness. Commonly, square brackets are used here instead of curly braces to indicate the different notion of program correctness.
In this rule, in addition to maintaining the loop invariant, one also proves termination by way of an expression t, called the loop variant, whose value strictly decreases with respect to a well-founded relation Given the loop invariant P, the condition B must imply that t is not a minimal element of D, for otherwise the body SHoare's 1969 paper didn't provide a total correctness rule; cf. his discussion on p.579 (top left). For example Reynolds' textbook ([tpl]cite book|title=Theory of Programming Languages|author=John C. Reynolds|publisher=Cambridge University Press|year=2009[/tpl]), Sect.3.4, p.64 gives the following version of a total correctness rule: {{sfrac| 1=P ∧ B ⇒ 0≤t   ,   ∧ B ∧ t=z S ∧ t when z is an integer variable that doesn't occur free in P, B, S, or t, and t is an integer expression (Reynolds' variables renamed to fit with this article's settings).
Resuming the first example of the previous section, for a total-correctness proof of
the while rule for total correctness can be applied with e.g. D being the positive integers with the usual order, and the expression t being  10 - x, which then in turn requires to prove
Informally speaking, we have to prove that the distance 10-x decreases in every loop cycle, while it always remains non-negative; this process can go on only for a finite number of cycles.
The previous proof goal can be simplfied to
which can be proven as follows:
For the second example of the previous section, of course no expression t can be found that is decreased by the empty loop body, hence termination cannot be proved.

==See also==

==Notes==

==References==

==Further reading==

==External links==



