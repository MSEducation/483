[[Apple DOS]]

CATEGORIES: Apple II software, Apple Inc. operating systems, Disk operating systems, Discontinued operating systems

Apple DOS was the family of disk operating systems for the Apple II series of microcomputers from late 1978 through early 1983. Apple DOS had three major releases: DOS 3.1, DOS 3.2, and DOS 3.3; each one of these three releases was followed by a second, minor "bug-fix" release, but only in the case of Apple DOS 3.2 did that minor release receive its own version number, Apple DOS 3.2.1. The best-known and most-used version was Apple DOS 3.3 in the 1980 and 1983 releases. Prior to the release of Apple DOS 3.1, Apple users had to rely on audio cassette tapes for data storage and retrieval, but that method was notoriously slow, inconvenient, and unreliable.

==Version history==

When Apple Computer introduced the Apple II in April 1977, the new computer had no disk drive or disk operating system (DOS). Although Apple co-founder Steve Wozniak designed the Disk II controller late that year, and believed that he could have written a DOS, fellow founder Steve Jobs decided to outsource the task. The company considered using Digital Research's CP/M, but Wozniak sought an operating system that was easier to use. On 10 April 1978 Apple signed a $13,000 contract with Shepardson Microsystems to write a DOS and deliver it within 35 days. Apple provided detailed specifications, and early Apple employee Randy Wigginton worked closely with Shepardson's Paul Laughton as the latter wrote the operating system with punched cards and a minicomputer.[tpl]cite web | url=http://news.cnet.com/8301-13579_3-57577597-37/the-untold-story-behind-apples-$13000-operating-system/ | title=The untold story behind Apple's $13,000 operating system | work=CNET | date=2013-04-03 | accessdate=April 4, 2013 | author=Terdiman, Daniel[/tpl]
There was no Apple DOS 1 or 2, per se.  Versions 0.1 through 2.8 were serially enumerated revisions during development, which might as well have been called builds 1 through 28. Apple DOS 3.0, a renamed issue of version 2.8, was never publicly released due to bugs. To the dismay of many programmers, Apple published no official documentation until release 3.2.[tpl]cite web|url=http://www.laughton.com/Apple/Apple.html |title=Apple Computer |publisher=Laughton.com |date= |accessdate=2013-06-14[/tpl][tpl]cite web|url=http://apple2history.org/history/ah14.html#03 |title=Apple II History » 14-DOS |publisher=Apple2history.org |date= |accessdate=2013-06-14[/tpl]
Apple DOS 3.1 was publicly released in June 1978, slightly less than one year after the Apple II was introduced, becoming the first disk-based operating system for any Apple computer. A  bug-fix release came later, addressing a problem with its [tpl]code|MASTER[/tpl] [tpl]code|CREATE[/tpl] utility, which was used to create Apple DOS master disks: The built-in [tpl]code|INIT[/tpl] command created disks that could be booted only on machines with at least the same amount of memory as the one that had created them. [tpl]code|MASTER[/tpl] [tpl]code|CREATE[/tpl] included a self-relocating version of DOS that would boot on Apples with any memory configuration.
Apple DOS 3.2 was released in 1979 to reflect major changes in computer booting methods that were built into the successor of the Apple II, the Apple II Plus. Instead of the original Integer BASIC, the Apple II Plus firmware included the newer Applesoft II floating point BASIC. The new firmware also had an auto-start feature which would automatically find a disk controller and boot from it when the system was powered up—earning it the name Autostart ROM.
Apple DOS 3.3 was released in 1980. It improved various functions of release 3.2, while also allowing for large gains in available floppy disk storage; the newer P5A/P6A PROMs in the disk controller could read and write data at a higher density, so that instead of 13 sectors (3.25 kB), 16 sectors (4 kB) of data could be stored per disk track, increasing the capacity from 113.75 kB to 140 kB per disk side — 16 kB of which was used by filesystem overhead and a copy of DOS, on a DOS 3.3-formatted disk, leaving 124 kB for user programs and data. DOS 3.3 was, however, not backwards compatible; it could not read or write DOS 3.2 disks. To address this problem, Apple Computer released a utility called "MUFFIN" to migrate Apple DOS 3.2 files and programs to version 3.3 disks. Apple never offered a utility to copy the other way. To migrate Apple DOS 3.3 files back to version 3.2 disks, someone wrote a "NIFFUM" utility. There were also commercial utilities (such as Copy II Plus) that could copy files from and to either format (and eventually ProDOS as well). Release 3.3 also improved the ability to switch between Integer BASIC and Applesoft BASIC, if the computer had a language card (RAM expansion) or firmware card.

==Technical details==

Apple DOS 3.1 disks used 13 sectors of data per disk track, each sector being 256 B in size. It used 35 tracks per disk side, and could access only one side of the floppy disk, unless the user flipped the disk over. This gave the user a total storage capacity of 113.75 kB per disk side, of which about 10 kB were used to store DOS itself and the disk directory, leaving about 100 kB for user programs.
Compared to modern operating systems, Apple DOS was quite primitive. The first layer of the operating system was called the RWTS, which stands for "read/write track sector". This layer consisted of subroutines for track seeking, sector reading and writing, and disk formatting. An API called the File Manager was built on top of this, and implemented functions to open, close, read, write, delete, lock (i.e. write-protect), unlock (i.e. write-enable), and rename files, and to verify a file's structural integrity. There was also a catalog function, for listing files on the diskette, and an init function, which formatted a disk for use with DOS, storing a startup program (usually called HELLO) that would be auto-started when this disk was booted. On top of the File Manager API, the main DOS routines were implemented which hooked into the machine's BASIC interpreter and intercepted all disk commands. It provided BLOAD, BSAVE, and BRUN for storing, loading, and running binary executables. LOAD, RUN, and SAVE were provided for BASIC programs, and an EXEC was provided for running text-based batch files consisting of BASIC and DOS commands. Finally, four types of files existed, identified by letters in a catalog listing.
Apple DOS File Formats:
There were four additional file types; 'R', 'S', and an additional 'A' and 'B', none of which were fully supported. DOS recognized these types for catalog listings only, and there were no direct ways to manipulate these types of files. The 'R' type found some use for relocatable binary executable files. A few programs supported the 'S' type as data files.

===Relocatable software===

Most 8-bit Apple II machine language programs did not concern themselves with code relocation since the Apple II usually did not run multiple programs at the same time like more modern computers. Programs were generally written to always expect to find their machine code at the same memory location every time. Fully relocatable code was more complicated and difficult to implement on the 8-bit 6502 CPU.
Apple DOS, however, needed to accommodate varying amounts of memory installed in an Apple II — from 16 kB up to 48 kB. DOS would load itself at the highest point possible to free up the lower memory locations for BASIC programs and graphics capabilities. In machines with 48 kB or more memory, it occupied the region from $9600[tpl]sub|16[/tpl] to $BFFF[tpl]sub|16[/tpl] (enough space for three file buffers plus 10 kB of software), but could load into a lower memory area if less system memory was available. (In comparison, ProDOS always loaded into language card RAM, thus requiring at least a 64 kB machine.)
A call vector table in the region of $03D0-03FF[tpl]sub|16[/tpl] allowed programs to find DOS wherever it was loaded in the system memory. For example, if the DOS hooks into the BASIC CLI stopped functioning, DOS could be reinitialized by calling location $03D0[tpl]sub|16[/tpl] (976[tpl]sub|10[/tpl]) — hence the traditional "3D0G" ("3D0 go") command to return to BASIC from the System Monitor.

===Boot loader===

The process of loading Apple DOS involved a series of very tiny programs, each of which carried the loading process forward a few steps before passing control to the next program in the chain.

===Integer BASIC and Applesoft floating point BASIC support===

The Apple II started out using a simple BASIC interpreter, known originally as Apple BASIC and later as Integer BASIC. It could only handle integer numbers ranging from −32,768 to +32,767 (16-bit binary values) and only had built-in support for low-resolution graphics. But it was the first version of BASIC available for the Apple II and is what the earliest BASIC programs used.
Only months after the Apple II's release, Apple commissioned Microsoft to develop a much more capable interpreter known as Applesoft BASIC,[tpl]cite web|url=http://apple2history.org/history/ah16.html#05|title=Apple II History Chapter 16|author=Steven Weyhrich|accessdate=2009-01-26| archiveurl= http://web.archive.org/web/20090129131828/http://apple2history.org/history/ah16.html| archivedate= 29 January 2009 | deadurl= no[/tpl] capable of handling floating-point real numbers with up to nine digits of precision and base 10 exponents from -38 to +38, and with support for high-resolution graphics. While more capable, Applesoft could not run Integer BASIC programs, causing some users to resist upgrading to it.
DOS 3.3 was released when Applesoft BASIC was standard in ROM on the Apple II Plus, so Apple designed it to support switching back and forth between the two BASIC interpreters. The DOS 3.3 System Master disk contained Integer BASIC and Applesoft on disk as binary files which could be loaded into RAM, allowing whichever language was not resident in ROM to be used on any machine with enough RAM. The user could switch between either BASIC by typing either FP or INT at the BASIC prompt. DOS automatically chose the needed language when running a saved program. Applesoft programs were saved as type A files, while Integer BASIC programs were saved as type I files.

==Decline of Apple DOS==

After 1980, DOS entered into a state of stagnation, along with all other Apple II products, as Apple concentrated its efforts on the ill-fated Apple III computer and its SOS operating system. After the Apple III had been abandoned by the company, two more versions of Apple DOS, both still called DOS 3.3 but with some bug fixes and better support for the new Apple IIe model, were released in early and mid-1983.
Without third-party patches, Apple DOS could only read floppy disks running in a 5.25-inch Disk II disk drive and could not access any other media, such as hard disk drives, virtual RAM drives, or 3.5-inch floppy disk drives. The structure of DOS disks (particularly the free sector map, which was restricted to part of a single sector) was such that it was not possible to have more than 400kB available per drive without a major rewrite of almost all sections of the code; this was the main reason Apple abandoned DOS in 1983, when Apple DOS was entirely replaced by ProDOS.
ProDOS retained the 16-sector low-level format of DOS 3.3 for 5.25 inch disks, but introduced a new high-level format that was suitable for devices up to 32 MB in size; this made it suitable for hard disks and 3.5-inch floppies. All the Apple computers from the Apple II Plus onward could run both DOS 3.3 and ProDOS, the Apple II Plus requiring a "Language Card" memory expansion to use ProDOS; the Apple //e and later models had built-in Language Card hardware, and so could run ProDOS out of the box. ProDOS included software to copy files from Apple DOS disks. However, many people who had no need for the improvements of ProDOS (and who did not like its much higher memory footprint) continued using Apple DOS or one of its clones long after 1983. The Apple convention of storing a bootable OS on every single floppy disk meant that commercial software could be used no matter what OS the user owned. A program called DOS.MASTER enabled users to have multiple virtual DOS 3.3 partitions on a larger ProDOS volume, which allowed the use of many floppy-based DOS programs with a hard disk.
Apple stopped authorizing user groups to distribute DOS 3.3 many years ago[tpl]Vague|date=January 2011[/tpl], but granted one company, Syndicomm, an exclusive license to resell DOS 3.3.[tpl]cite web|url=http://apple2history.org/2010/11/18/even-apple-used-pirate-tools/|title=Even Apple Used Pirate Tools|author=Dean Esmay|accessdate=2011-08-11| archiveurl= http://web.archive.org/web/20110725012703/http://apple2history.org/2010/11/18/even-apple-used-pirate-tools/| archivedate= 25 July 2011 | deadurl= no[/tpl]

==Performance improvements and other versions==

DOS's RWTS routine could read or write a track in two revolutions with proper interleaving. A sector of the spinning disk would pass under the read/write head while the RWTS routine was decoding the just-read sector (or encoding the next one to be written), and if this missed sector was the next one needed, DOS would need to wait nearly an entire revolution of the disk for the sector to come around again. This was called "blowing a rev" and was a well-understood performance bottleneck in disk systems. To avoid this, the sectors on a DOS disk were arranged on the disk in an interleaved order:[tpl]cite web |url=http://www.applelogic.org/TheAppleIIEGettingStarted.html |title=About the archive formats |accessdate=26 April 2012[/tpl]
 0 7 14 6 13 5 12 4 11 3 10 2 9 1 8 15
Later, ProDOS arranged the sectors in this order:
 0 8 1 9 2 10 3 11 4 12 5 13 6 14 7 15
When reading and decoding sector 0, then, sector 8 would pass by, so that sector 1, the next sector likely to be needed, would be available without waiting. When reading sector 7, two unneeded sectors, sectors 15 and 0, would pass by before sector 8 was available, and when reading sector 15, the drive would always have to wait an extra revolution for sector 0 on the same track. However, the sector 0 actually needed in most cases would be on the next higher track, and that track could be arranged relative to the last one to allow the needed time to decode the just-read sector and move the head before sector 0 came around. On average, a full track could be read in two revolutions of the disk.
Unfortunately, the DOS File Manager subverted this efficiency by copying bytes read from or written to a file one at a time between a disk buffer and main memory, requiring more time and resulting in DOS constantly blowing revs when reading or writing files.DOS 3.3, ProDOS & Beyond v1.3 bullet 07 Jul 01 Programs became available early on to format disks with modified sector interleaves; these disks gave DOS more time between sectors to copy the data, ameliorating the problem. 
Later, programmers outside Apple rewrote the File Manager routines to avoid making the extra copy for most sectors of a file; RWTS was instructed to read or write sectors directly to or from main memory rather than from a disk buffer whenever a full sector was to be transferred. An early "patch" to provide this functionality was published in Call-A.P.P.L.E.. Speedups in the LOAD command of three to five times were typical.
This functionality soon appeared in commercial products, such as Pronto-DOS, Diversi-DOS, Hyper-DOS, and David-DOS, along with additional features, but it was never used in an official Apple DOS release. Similar functionality was, however, employed by Apple's successor operating system, ProDOS. The Apple IIGS operating system, GS/OS, would eventually employ an even more efficient "scatter read" technique that would read any sector that happened to be passing under the read head if it was needed for the file being read.

==Release of the source code==

In 2013, more than 35 years after the Apple II debuted, the original Apple DOS source code was released by the Computer History Museum at its website.[tpl]cite web|url=http://www.computerhistory.org/atchm/apple-ii-dos-source-code/ |title=Apple II DOS source code |first=Len|last=Shustek |date=2013-11-12 |accessdate=2013-11-30 |publisher=computerhistory.org[/tpl] Paul Laughton, the creator of the code has donated it.[tpl]cite web |url=http://www.engadget.com/2013/11/13/apple-ii-dos-source-code-museum/ |title=Apple II's 35-year-old operating system is now open to the public |date=November 13, 2013[/tpl]

==References==

==External links==


