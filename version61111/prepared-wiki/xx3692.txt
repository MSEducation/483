 | accessdate = 2007-05-10 | date = 2002-05-17 | publisher = [[CERT Coordination Center|US-CERT]]
}}[/ref] See HTTP CONNECT Tunneling.
 | url = http://tools.ietf.org/html/rfc5789
 | title = RFC 5789: PATCH Method for HTTP
 | first1 = Lisa | last1 = Dusseault | first2 = James M. | last2 = Snell
}}[/ref]
HTTP servers are required to implement at least the GET and HEAD methods[tpl]cite web|url=http://tools.ietf.org/html/rfc2616#section-5.1.1 |title=HTTP 1.1 Section 5.1.1 |publisher=Tools.ietf.org |date= |accessdate=2010-08-01[/tpl] and, whenever possible, also the OPTIONS method.[tpl]Citation needed|date=August 2008[/tpl]

===Safe methods===

Some of the  methods (for example, HEAD, GET, OPTIONS and TRACE) are defined as safe, which means they are intended only for information retrieval and should not change the state of the server. In other words, they should not have side effects, beyond relatively harmless effects such as logging, caching, the serving of banner advertisements or incrementing a web counter. Making arbitrary GET requests without regard to the context of the application's state should therefore be considered safe.
By contrast, methods such as POST, PUT, DELETE and PATCH are intended for actions that may cause side effects either on the server, or external side effects such as financial transactions or transmission of email. Such methods are therefore not usually used by conforming web robots or web crawlers; some that do not conform tend to make requests without regard to context or consequences.
Despite the prescribed safety of GET requests, in practice their handling by the server is not technically limited in any way. Therefore, careless or deliberate programming can cause non-trivial changes on the server. This is discouraged, because it can cause problems for web caching, search engines and other automated agents, which can make unintended changes on the server.

===Idempotent methods and web applications===

Methods PUT and DELETE are defined to be idempotent, meaning that multiple identical requests should have the same effect as a single request (Note that idempotence refers to the state of the system after the request has completed, so while the action the server takes (e.g. deleting a record) or the response code it returns may be different on subsequent requests, the system state will be the same every time). Methods GET, HEAD, OPTIONS and TRACE, being prescribed as safe, should also be idempotent, as HTTP is a stateless protocol.
In contrast, the POST method is not necessarily idempotent, and therefore sending an identical POST request multiple times may further affect state or cause further side effects (such as financial transactions). In some cases this may be desirable, but in other cases this could be due to an accident, such as when a user does not realize that their action will result in sending another request, or they did not receive adequate feedback that their first request was successful. While web browsers may show alert dialog boxes to warn users in some cases where reloading a page may re-submit a POST request, it is generally up to the web application to handle cases where a POST request should not be submitted more than once.
Note that whether a method is idempotent is not enforced by the protocol or web server. It is perfectly possible to write a web application in which (for example) a database insert or other non-idempotent action is triggered by a GET or other request. Ignoring this recommendation, however, may result in undesirable consequences, if a user agent assumes that repeating the same request is safe when it isn't.

===Security===

Implementing methods such as TRACE, TRACK and DEBUG are considered potentially insecure by some security professionals because attackers can use them to gather information or bypass security controls during attacks. Security software tools such as Tenable Nessus and Microsoft  UrlScan Security Tool report on the presence of these methods as being security issues.[tpl]cite web | url=http://technet.microsoft.com/en-us/security/cc242650.aspx | title=UrlScan Security Tool | publisher=Microsoft | accessdate=15 Jul 2012 | work=Security TechCenter[/tpl]
TRACK and DEBUG are not valid HTTP 1.1 verbs.[tpl]cite web | url=http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.8 | title=Hypertext Transfer Protocol – HTTP/1.1 RFC 2616| publisher=W3C | accessdate=16 Mar 2013 | work=Chapter 9: Method Definitions[/tpl]

==Status codes==

In HTTP/1.0 and since, the first line of the HTTP response is called the status line and includes a numeric status code (such as "404") and a textual reason phrase (such as "Not Found"). The way the user agent handles the response primarily depends on the code and secondarily on the response headers. Custom status codes can be used since, if the user agent encounters a code it does not recognize, it can use the first digit of the code to determine the general class of the response.[tpl]cite web|url=http://www.w3.org/Protocols/rfc2616/rfc2616-sec6.html#sec6.1 |title=6.1 Status-Line |publisher=W3.org |date= |accessdate=2010-08-01[/tpl]
Also, the standard reason phrases are only recommendations and can be replaced with "local equivalents" at the web developer's discretion. If the status code indicated a problem, the user agent might display the reason phrase to the user to provide further information about the nature of the problem. The standard also allows the user agent to attempt to interpret the reason phrase, though this might be unwise since the standard explicitly specifies that status codes are machine-readable and reason phrases are human-readable.
HTTP status code is primarily divided into five groups for better explanation of request and responses between client and server as named:
Informational 1XX,
Successful 2XX,
Redirection 3XX,
Client Error 4XX
and Server Error 5XX.

==Persistent connections==

In HTTP/0.9 and 1.0, the connection is closed after a single request/response pair. In HTTP/1.1 a keep-alive-mechanism was introduced, where a connection could be reused for more than one request. Such persistent connections reduce request latency perceptibly, because the client does not need to re-negotiate the TCP 3-Way-Handshake connection after the first request has been sent. Another positive side effect is that in general the connection becomes faster with time due to TCP's slow-start-mechanism.
Version 1.1 of the protocol also made bandwidth optimization improvements to HTTP/1.0. For example, HTTP/1.1 introduced chunked transfer encoding to allow content on persistent connections to be streamed rather than buffered. HTTP pipelining further reduces lag time, allowing clients to send multiple requests before waiting for each response. Another improvement to the protocol was byte serving, where a server transmits just the portion of a resource explicitly requested by a client.

==HTTP session state==

HTTP is a stateless protocol. A stateless protocol does not require the HTTP server to retain information or status about each user for the duration of multiple requests. However, some web applications implement states or server side sessions using for instance HTTP cookies or Hidden variables within web forms.

==Encrypted connections==

The most popular way of establishing an encrypted HTTP connection is HTTP Secure.
Two other methods for establishing an encrypted HTTP connection also exist, called Secure Hypertext Transfer Protocol and the HTTP/1.1 Upgrade header. Browser support for these latter two is, however, nearly non-existent;[tpl]citation needed|date=July 2011[/tpl] so HTTP Secure is the dominant method of establishing an encrypted HTTP connection.[tpl]cite book|last=Canavan|first=John|title=Fundamentals of Networking Security|year=2001|publisher=Artech House|location=Norwood, MA|isbn=9781580531764|pages=82–83[/tpl]

==Request message==

The request message consists of the following:
The request line and headers must all end with  (that is, a carriage return character followed by a line feed character). The empty line must consist of only  and no other whitespace.[tpl]cite web|last=Fielding|authorlink=Fielding et al|title=HTTP/1.1|url=http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html|publisher=IETF|accessdate=19 January 2012|date=June 1999[/tpl] In the HTTP/1.1 protocol, all headers except Host are optional.
A request line containing only the path name is accepted by servers to maintain compatibility with HTTP clients before the HTTP/1.0 specification in RFC 1945.[tpl]cite web|title=Apache Week. HTTP/1.1|url=http://www.apacheweek.com/features/http11[/tpl] 090502 apacheweek.com

==Response message==

The response message consists of the following:
The Status-Line and headers must all end with  (a carriage return followed by a line feed). The empty line must consist of only  and no other whitespace.

==Example session==

Below is a sample conversation between an HTTP client and an HTTP server running on www.example.com, port 80.

===Client request===

 GET /index.html HTTP/1.1
 Host: www.example.com

A client request (consisting in this case of the request line and only one header) is followed by a blank line, so that the request ends with a double newline, each in the form of a carriage return followed by a line feed. The "Host" header distinguishes between various DNS names sharing a single IP address, allowing name-based virtual hosting. While optional in HTTP/1.0, it is mandatory in HTTP/1.1.

===Server response===

 HTTP/1.1 200 OK
 Date: Mon, 23 May 2005 22:38:34 GMT
Server: Apache/1.3.3.7 (Unix) (Red-Hat/Linux)
Last-Modified: Wed, 08 Jan 2003 23:11:55 GMT
ETag: "3f80f-1b6-3e1cb03b"
Content-Type: text/html; charset=UTF-8
Content-Length: 131
Accept-Ranges: bytes
Connection: close

  <title>An Example Page</title>

  Hello World, this is a very simple HTML document.

The ETag (entity tag) header is used to determine if a cached version of the requested resource is identical to the current version of the resource on the server. Content-Type specifies the Internet media type of the data conveyed by the HTTP message, while Content-Length indicates its length in bytes. The HTTP/1.1 webserver publishes its ability to respond to requests for certain byte ranges of the document by setting the header Accept-Ranges: bytes. This is useful, if the client needs to have only certain portionsTools.ietf.org, Byte Range Retrieval Extension to HTTP of a resource sent by the server, which is called byte serving. When Connection: close is sent in a header, it means that the web server will close the TCP connection immediately after the transfer of this response.
Most of the header lines are optional. When Content-Length is missing the length is determined in other ways. Chunked transfer encoding uses a chunk size of 0 to mark the end of the content. Identity encoding without Content-Length reads content until the socket is closed.
A Content-Encoding like gzip can be used to compress the transmitted data.

==Similar protocols==

The Gopher protocol was a content delivery protocol that was displaced by HTTP in the early 1990s.
The new protocol SPDY is similar to HTTP, modifying the request-response interaction between client and server.

==See also==

==Notes==

==References==

==External links==


