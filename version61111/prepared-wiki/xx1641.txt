[[Context-free language]]

CATEGORIES: Formal languages, Languages, Linguistics

In formal language theory, a  context-free language (CFL) is a language generated by some context-free grammar (CFG). Different CF grammars can generate the same CF language, or conversely, a given CF language can be generated by different CF grammars. It is important to distinguish properties of the language (intrinsic properties) from properties of a particular grammar (extrinsic properties).
The set of all context-free languages is identical to the set of languages accepted by pushdown automata, which makes these languages amenable to parsing. Indeed, given a CFG, there is a direct way to produce a pushdown automaton for the grammar (and corresponding language), though going the other way (producing a grammar given an automaton) is not as direct.

==Examples==

==Languages that are not context-free==

==Closure properties==

Context-free languages are closed under the following operations. That is, if L and P are context-free languages, the following languages are context-free as well:

===Nonclosure under intersection and complement===

==Decidability properties==

The following problems are undecidable for arbitrary context-free grammars A and B:
The following problems are decidable for arbitrary context-free languages:

==Parsing==

Practical uses of context-free languages require also to produce a derivation tree that exhibits the a structure the grammar associates with the given string. The process of producing this tree is called parsing. Known parsers have a time complexity that is cubic in the size of the string that is parsed.
Formally, the set of all context-free languages is identical to the set of languages accepted by pushdown automata (PDA). Parser algorithms for context-free languages include the CYK algorithm and the Earley's Algorithm.
A special subclass of context-free languages are the deterministic context-free languages which are defined as the set of languages accepted by a deterministic pushdown automaton and can be parsed by a LR(k) parser.[tpl]cite doi|10.1016/S0019-9958(65)90426-2[/tpl]
See also parsing expression grammar as an alternative approach to grammar and parser.

==See also==

==Notes==

==References==

  | last1 = Hopcroft
  | first1 = John E.
  | last2 = Ullman
  | first2 = Jeffrey D.
  | title = Introduction to Automata Theory, Languages, and Computation
  | publisher = Addison-Wesley
  | edition = 1st
  | year = 1979
  | ref = harv
}}

