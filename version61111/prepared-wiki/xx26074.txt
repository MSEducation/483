[[Reinforcement learning]]

CATEGORIES: Markov models, Machine learning algorithms, Belief revision

Reinforcement learning is an area of machine learning inspired by behaviorist psychology, concerned with how software agents ought to take actions in an environment so as to maximize some notion of cumulative reward.  The problem, due to its generality, is studied  in many other disciplines, such as game theory, control theory, operations research, information theory, simulation-based optimization, statistics, and genetic algorithms. In the operations research and control literature, the field where reinforcement learning methods are studied is called approximate dynamic programming. The problem has been studied in the theory of optimal control, though most studies there are concerned with existence of optimal solutions and their characterization, and not with the learning or approximation aspects. In economics and game theory, reinforcement learning may be used to explain how equilibrium may arise under bounded rationality.
In machine learning, the environment is typically formulated as a Markov decision process (MDP), and many reinforcement learning algorithms for this context are highly related to dynamic programming techniques. The main difference between the classical techniques and reinforcement learning algorithms is that the latter do not need knowledge about the MDP and they target large MDPs where exact methods become infeasible.
Reinforcement learning differs from standard supervised learning in that correct input/output pairs are never presented, nor sub-optimal actions explicitly corrected. Further, there is a focus on on-line performance, which involves finding a balance between exploration (of uncharted territory) and exploitation (of current knowledge). The exploration vs. exploitation trade-off in reinforcement learning has been most thoroughly studied through the multi-armed bandit problem and in finite MDPs.

==Introduction==

The basic reinforcement learning model consists of:
The rules are often stochastic. The observation typically involves the scalar immediate reward associated with the last transition.
In many works, the agent is also assumed to observe the current environmental state, in which case we talk about full observability, whereas in the opposing case we talk about partial observability. Sometimes the set of actions available to the agent is restricted (e.g., you cannot spend more money than what you possess).
A reinforcement learning agent interacts with its environment in discrete time steps.
The goal of a reinforcement learning agent is to collect as much reward as possible. The agent can choose any action as a function of the history and it can even randomize its action selection.
When the agent's performance is compared to that of an agent which acts optimally from the beginning, the difference in performance gives rise to the notion of regret. 
Note that in order to act near optimally, the agent must reason about the long term consequences of its actions: In order to maximize my future income I had better go to school now, although the immediate monetary reward associated with this might be negative.
Thus, reinforcement learning is particularly well suited to problems which include a long-term versus short-term reward trade-off. It has been applied successfully to various problems, including robot control, elevator scheduling, telecommunications, backgammon and checkers (Sutton and Barto 1998, Chapter 11).
Two components make reinforcement learning powerful:
The use of samples to optimize performance and the use of function approximation to deal with large environments.
Thanks to these two key components, reinforcement learning can be used in large environments in any of the following situations:
The first two of these problems could be considered planning problems (since some form of the model is available), while the last one could be considered as a genuine learning problem. However, under a reinforcement learning methodology both planning problems would be converted to machine learning problems.

==Exploration==

The reinforcement learning problem as described requires clever exploration mechanisms. Randomly selecting actions, without reference to an estimated probability distribution, is known to give rise to very poor performance. The case of (small) finite MDPs is relatively well understood by now.

==Algorithms for control learning==

Even if the issue of exploration is disregarded and even if the state was observable (which we assume from now on), the problem remains to find out which actions are good based on past experience.

===Criterion of optimality===

For simplicity, assume for a moment that the problem studied is episodic, an episode ending when some terminal state is reached. Assume further that no matter what course of actions the agent takes, termination is inevitable. Under some additional mild regularity conditions the expectation of the total reward is then well-defined, for any policy and any initial distribution over the states. Here, a policy refers to a mapping that assigns some probability distribution over the actions to all possible histories.
In the case of non-episodic problems the return is often discounted,
The problem then is to specify an algorithm that can be used to find a policy with maximum expected return. 
From the theory of MDPs it is known that, without loss of generality, the search can be restricted to the set of the so-called stationary policies. A policy is called stationary if the action-distribution returned by it depends only on the last state visited (which is part of the observation history of the agent, by our simplifying assumption). In fact, the search can be further restricted to  deterministic stationary policies. A deterministic stationary policy is one which deterministically selects actions based on the current state. Since any such policy can be identified with a mapping from the set of states to the set of actions, these policies can be identified with such mappings with no loss of generality.

===Brute force===

The brute force approach entails the following two steps:
One problem with this is that the number of policies can be extremely large, or even infinite. Another is that variance of the returns might be large, in which case a large number of samples will be required to accurately estimate the return of each policy.
These problems can be ameliorated if we assume some structure and perhaps allow samples generated from one policy to influence the estimates made for another. The two main approaches for achieving this are value function estimation and direct policy search.

===Value function approaches===

Value function approaches attempt to find a policy that maximizes the return by maintaining a set of estimates of expected returns for some policy (usually either the "current" or the optimal one).
These methods rely on the theory of MDPs, where optimality is defined in a sense which is stronger than the above one: A policy is called optimal if it achieves the best expected return from any initial state (i.e., initial distributions play no role in this definition). Again, one can always find an optimal policy amongst stationary policies.
In summary, the knowledge of the optimal action-value function alone suffices to know how to act optimally.
Assuming full knowledge of the MDP, there are two basic approaches to compute the optimal action-value function, value iteration and policy iteration. 
Computing these functions involves computing expectations over the whole state-space, which is impractical for all, but the smallest (finite) MDPs, never mind the case when the MDP is unknown.
In reinforcement learning methods the expectations are approximated by averaging over samples and one uses function approximation techniques to cope with the need to represent value functions over large state-action spaces.

====Monte Carlo methods====

The simplest Monte Carlo methods can be used in an algorithm that mimics policy iteration.
Policy iteration consists of two steps: policy evaluation and policy improvement.
The Monte Carlo methods are used in the policy evaluation step.
Assume (for simplicity) that the MDP is finite and in fact a table representing the action-values fits into the memory.
Further, assume that the problem is episodic and after each episode a new one starts from some random initial state.
This finishes the description of the policy evaluation step.
A few problems with this procedure are as follows:

====Temporal difference methods====

The first issue is easily corrected by allowing the procedure to change the policy (at all, or at some states) before the values settle. However good this sounds, this may be dangerous as this might prevent convergence. Still, most current algorithms implement this idea, giving rise to the class of generalized policy iteration algorithm. We note in passing that actor critic methods belong to this category.
The second issue can be corrected within the algorithm by allowing trajectories to contribute to any state-action pair in them.
This may also help to some extent with the third problem, although a better solution when returns have high variance is to use Sutton's temporal difference (TD) methods which are based on the recursive Bellman equation. Note that the computation in TD methods can be incremental (when after each transition the memory is changed and the transition is thrown away), or batch (when the transitions are collected and then the estimates are computed once based on a large number of transitions). Batch methods, a prime example of which is the least-squares temporal difference method due to Bradtke and Barto (1996), may use the information in the samples better, whereas incremental methods are the only choice when batch methods become infeasible due to their high computational or memory complexity. In addition, there exist methods that try to unify the advantages of the two approaches. Methods based on temporal differences also overcome the second but last issue.
In order to address the last issue mentioned in the previous section, function approximation methods are used.
The algorithms then adjust the weights, instead of adjusting the values associated with the individual state-action pairs.
However, linear function approximation is not the only choice. 
More recently, methods based on ideas from nonparametric statistics (which can be seen to construct their own features) have been explored.
So far, the discussion was restricted to  how policy iteration can be used as a basis of the designing reinforcement learning algorithms. Equally importantly, value iteration can also be used as a starting point, giving rise to the Q-Learning algorithm (Watkins 1989) and its many variants.

===Direct policy search===

An alternative method to find a good policy is to search directly in (some subset) of the policy space, in which case the problem becomes an instance of stochastic optimization. The two approaches available are gradient-based and gradient-free methods.
Define the performance function by
Since an analytic expression for the gradient is not available, one must rely on a noisy estimate.
Such an estimate can be constructed in many ways, giving rise to algorithms like Williams' REINFORCE method (which is also known as the likelihood ratio method in the simulation-based optimization literature).
Policy gradient methods have received a lot of attention in the last couple of years (e.g., Peters et al. (2003)), but they remain an active field.  
The issue with many of these  methods is that they may get stuck in local optima (as they are based on local search).
A large class of methods  avoids relying on gradient information.
These include simulated annealing, cross-entropy search or methods of evolutionary computation. 
Many gradient-free methods can achieve (in theory and in the limit) a global optimum.
In a number of cases they have indeed demonstrated remarkable performance.
The issue with policy search methods is that they may converge slowly if the information based on which they act is noisy.
For example, this happens when in episodic problems the trajectories are long and the variance of the returns is large. As argued beforehand, value-function based methods that rely on temporal differences might help in this case. In recent years, several actor-critic algorithms have been proposed following this idea and were demonstrated to perform well in various problems.

==Theory==

The theory for small, finite MDPs is quite mature. 
Both the asymptotic and finite-sample behavior of most algorithms is well-understood.
As mentioned beforehand, algorithms with provably good online performance (addressing the exploration issue) are known.
The theory of large MDPs needs more work. Efficient exploration is largely untouched (except for the case of bandit problems).
Although  finite-time performance bounds appeared for many algorithms in the recent years, these bounds are expected to be rather loose and thus more work is needed to better understand the relative advantages, as well as the limitations of these algorithms.
For incremental algorithm asymptotic convergence issues have been settled. Recently, new incremental, temporal-difference-based algorithms have appeared which converge under a much wider set of conditions than was previously possible (for example, when used with arbitrary, smooth function approximation).

==Current research==

Current research topics include: 
adaptive methods which work with fewer (or no) parameters under a large number of conditions, 
addressing the exploration problem in large MDPs,
large-scale empirical evaluations,
learning and acting under partial information (e.g., using Predictive State Representation), 
modular and hierarchical reinforcement learning, 
improving existing value-function and policy search methods,
algorithms that work well with large (or continuous) action spaces,
transfer learning, 
lifelong learning,
efficient sample-based planning (e.g., based on Monte-Carlo tree search).
Multiagent or Distributed Reinforcement Learning is also a topic of interest in current research. 
There is also a growing interest in real life applications of reinforcement learning.
Successes of reinforcement learning are collected on 
here and 
here.
Reinforcement learning algorithms such as TD learning are also being investigated as a model for Dopamine-based learning in the brain. In this model, the dopaminergic projections from the substantia nigra to the basal ganglia function as the prediction error. Reinforcement learning has also been used as a part of the model for human skill learning, especially in relation to the interaction between implicit and explicit learning in skill acquisition (the first publication on this application was in 1995-1996, and there have been many follow-up studies). See http://webdocs.cs.ualberta.ca/~sutton/RL-FAQ.html#behaviorism for further details of these research areas above.

==Literature==

===Conferences, journals===

Most reinforcement learning papers are published at the major machine learning and AI conferences (ICML, NIPS, AAAI, IJCAI, UAI, AI and Statistics) and journals (JAIR, JMLR, Machine learning journal). Some theory papers are published at COLT and ALT. However, many papers appear in robotics conferences (IROS, ICRA) and the "agent" conference AAMAS. Operations researchers publish their papers at the INFORMS conference and, for example, in the Operation Research, and the Mathematics of Operations Research journals. Control researchers publish their papers at the CDC and ACC conferences, or, e.g., in the journals IEEE Transactions on Automatic Control, or Automatica, although applied works tend to be published in more specialized journals. The Winter Simulation Conference also publishes many relevant papers. Other than this, papers also published in the major conferences of the neural networks, fuzzy, and evolutionary computation communities. The annual IEEE symposium titled Approximate Dynamic Programming and Reinforcement Learning (ADPRL) and the biannual European Workshop on Reinforcement Learning (EWRL) are two regularly held meetings where RL researchers meet.

==See also==

==Implementations==

==References==

  | last = Sutton | first = Richard S. | authorlink = Richard S. Sutton
  | degree= PhD
  | title= Temporal Credit Assignment in Reinforcement Learning
  | year= 1984 
  | publisher = University of Massachusetts, Amherst, MA
  | url= http://webdocs.cs.ualberta.ca/~sutton/publications.html#PhDthesis}}
  | last = Williams | first = Ronald J. | authorlink = Ronald J. Williams 
  | title = A class of gradient-estimating algorithms for reinforcement learning in neural networks
  | booktitle = Proceedings of the IEEE First International Conference on Neural Networks
  | year = 1987
  | url = http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.129.8871}}
  | doi = 10.1007/BF00115009
  | last = Sutton | first = Richard S. | authorlink = Richard S. Sutton
  | title = Learning to predict by the method of temporal differences
  | journal = Machine Learning
  | volume = 3
  | pages = 9&ndash;44
  | publisher = Springer
  | year = 1988
  | url = http://webdocs.cs.ualberta.ca/~sutton/publications.html#TD_paper}}
  | last = Watkins | first = Christopher J.C.H. | authorlink = Christopher J.C.H.  Watkins
  | degree= PhD
  | title= Learning from Delayed Rewards
  | year= 1989 
  | publisher = King’s College, Cambridge, UK
  | url= http://www.cs.rhul.ac.uk/~chrisw/new_thesis.pdf}}
  | doi = 10.1023/A:1018056104778
  | last = Bradtke | first = Steven J. | authorlink = Steven J. Bradtke
