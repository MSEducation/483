[[ABC (programming language)]]

CATEGORIES: Educational programming languages, Persistent programming languages, Procedural programming languages, Programming languages created in the 1980s, Dutch inventions

ABC is an imperative general-purpose programming language and programming environment developed at CWI, Netherlands by Leo Geurts, Lambert Meertens, and Steven Pemberton. It is interactive, structured, high-level, and intended to be used instead of BASIC, Pascal, or AWK. It is not meant to be a systems-programming language but is intended for teaching or prototyping.
ABC has only five basic datatypes. It does not require variable declarations. It has explicit support for top-down programming. Statement nesting is indicated by indentation, via the off-side rule.  It provides infinite precision arithmetic, unlimited-sized lists and strings, and other features supporting orthogonality and ease of use by novices. Its designers claim that ABC programs are typically around a quarter the size of the equivalent Pascal or C programs, and more readable.
ABC was originally a monolithic implementation, leading to an inability to adapt to new requirements, such as creating a Graphical User Interface.  ABC could not directly access the underlying file system and operating system.
ABC includes a programming environment with syntax-directed editing, suggestions, persistent variables, and multiple workspaces.
ABC is available as an interpreter/compiler, currently at version 1.05.02. ABC has been ported to Unix, DOS, Atari, and Apple Macintosh.
ABC also had a major influence on the design of the Python programming language; Guido van Rossum, who developed Python, previously worked for several years on the ABC system in the early 1980s.The A-Z of Programming Languages: Python - a-z of programming languages. Computerworld (2008-08-05). Retrieved on 2013-07-21.An Interview with Guido van Rossum. ONLamp.com. Retrieved on 2013-07-21.

==Example==

An example function words to collect the set of all words in a document:
 HOW TO RETURN words document:
    PUT {} IN collection
    FOR line IN document:
       FOR word IN split line:
          IF word not.in collection:
             INSERT word IN collection
    RETURN collection

==Notes==

==References==

==External links==

===Books===


