</ref><ref>[http://cs.mwsu.edu/~griffin/courses/2133/downloads/Spring11/p677-pearson.pdf Online PDF file of the CACM paper].</ref> is a [[hash function]] designed for fast execution on processors with 8-bit [[processor register|register]]s. Given an input consisting of any number of bytes, it produces as output a single byte that is strongly dependent<ref name=acmref/> on every byte of the input. Its implementation requires only a few instructions, plus a 256-byte [[lookup table]] containing a [[permutation]] of the values 0 through 255.
This hash function is a CBC-MAC that uses an 8-bit random block cipher implemented via the permutation table. An 8-bit
block cipher has negligible cryptographic security, so the Pearson hash function is not cryptographically strong; but it offers these benefits:
One of its drawbacks when compared with other hashing algorithms designed for 8-bit processors is the suggested 256 byte lookup table, which can be prohibitively large for a small microcontroller with a program memory size on the order of hundreds of bytes. A workaround to this is to use a simple permutation function instead of a table stored in program memory. However, using a too simple function, such as Ti = 255-i partly defeats the usability as a hash function as anagrams will result in the same hash value; using a too complex function, on the other hand, will affect speed negatively.
The algorithm can be described by the following pseudocode, which computes the hash of message C using the permutation table T:

 h := 0
 '''for each''' c '''in''' C '''loop'''
   index := h '''xor''' c
   h := T[index]
 '''end loop'''
 '''return''' h

==C implementation to generate 64-bit (16 hex byte) hash==

For a given string or chunk of data, Pearson's original algorithm produces only an 8 bit byte or integer, 0-255. But the algorithm makes it extremely easy to generate whatever length of hash is desired. The scheme used above is a very straightforward implementation of the algorithm. As Pearson noted: a change to any bit in the string causes his algorithm to create a completely different hash (0-255). In the code above, following every completion of the inner loop, the first byte of the string is incremented by one.   x0=x0+1
Every time that simple change to the first byte of the data is made, a different Pearson hash, h, is generated. xPear16 builds a 16 hex byte hash by concatenating a series of 8-bit Pearson (h) hashes. Instead of producing a value from 0 to 255, it generates a value from 0 to 18,446,744,073,709,551,615.
Pearson's algorithm can be made to generate hashes of any desired length, simply by adding 1 to the first byte of the string, re-computing h for the string, and concatenating the results. Thus the same core logic can be made to generate 32-bit or 128-bit hashes.

==References==


