</ref> or half an [[octet (computing)|octet]]. As a nibble contains 4 bits, there are sixteen (2<sup>4</sup>) possible values, so a nibble corresponds to a single [[hexadecimal]] digit (thus, it is often referred to as a "hex digit" or "hexit").
A full byte (octet) is represented by two hexadecimal digits; therefore, it is common to display a byte of information as two nibbles. The nibble is often called a "semioctet" or a "quartet" in a networking or telecommunication context.[tpl]Citation needed|date=July 2011[/tpl] Sometimes the set of all 256 byte values is represented as a table 16×16, which gives easily readable hexadecimal codes for each value.

==History==

One early recorded use of the term "nybble" was in 1977 within the consumer-banking technology group at Citibank that created a pre-ISO 8583 standard for transactional messages, between cash machines and Citibank's data centers, in which a NABBLE was the basic informational unit.
The term "nibble" originates from the fact that the term "byte" is a homophone of the English word "bite". A nibble is a small bite, which in this context is construed as "half a bite". The alternative spelling "nybble" parallels the spelling of "byte", as noted in editorials in Kilobaud and Byte in the early 1980s.[tpl]Citation needed|date=April 2007[/tpl]
The nibble is used to describe the amount of memory used to store a digit of a number stored in packed decimal format within an IBM mainframe.  This technique is used to make computations faster and debugging easier.  An 8-bit byte is split in half and each nibble is used to store one digit. The last nibble of the variable is reserved for the sign. Thus a variable which can store up to nine digits would be "packed" into 5 bytes. Ease of debugging resulted from the numbers being readable in a hex dump where two hex numbers are used to represent the value of a byte, as 16×16 = 28.
Historically, there have been cases where the term "nybble" was used for a set of bits fewer than 8, but not necessarily 4. In the Apple II microcomputer line, much of the disk drive control was implemented in software. Writing data to a disk was done by converting 256-byte pages into sets of 5-bit or, later, 6-bit nibbles; loading data from the disk required the reverse. Note that the term byte once had this ambiguity and meant a set of bits but not necessarily 8. Today, the terms "byte" and "nibble" almost always refer to 8-bit and 4-bit collections respectively and are very rarely used to express any other sizes.
The term "semi-nibble" is used to refer to a 2-bit collection, or half a nibble.

==Table of nibbles==

The sixteen nibbles and their equivalents in other numeral systems:

==Low and high nibbles==

The terms "low nibble" and "high nibble" are used to denote the nibbles containing, respectively, the less significant bits and the more significant bits within a byte. 
In graphical representations of bits within a byte, the leftmost bit is typically the  most significant bit (MSB), 
corresponding to ordinary decimal notation in which the digit at the left of a number is the most significant. 
In such illustrations the four bits on the left end of the byte form the high nibble, and the remaining four bits form the low nibble.http://www.freesoft.org/CIE/Topics/19.htm

==Examples==

==Extracting a nibble from a byte==

In the C programming language:
where b must be a variable or constant of an integral data type, and only the least-significant byte of b is used.
For example, HI_NIBBLE(0xAB)==0xA and LO_NIBBLE(0xAB)==0xB.
In Common Lisp:

==See also==

==References==

==External links==


