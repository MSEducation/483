[[ANSI escape code]]

CATEGORIES: Computer standards, Ecma standards, ANSI standards, Text user interface

In computing, ANSI escape code (or escape sequences) is the method of in-band signaling to control formatting, color, and other output options on video text terminals. To encode this formatting information, it embeds certain sequences of bytes into the text, which have to be interpreted specially, not as codes of characters. Although hardware text terminals have become increasingly rare in the 21st century, the relevance of this standard persists because most terminal emulators interpret at least some of the ANSI escape sequences in the output text. One notable exception is the win32 console component of Microsoft Windows.

==History==

Almost all manufacturers of video terminals added vendor-specific escape sequences to do operations such as placing the cursor at arbitrary positions on the screen. As these sequences were all different, elaborate libraries such as termcap had to be created so programs could use the same API for all of them. In addition, most designs required sending numbers (such as row & column) as the binary values of the characters; for some programming languages and for systems that did not use ASCII internally it was often difficult or impossible to turn a number into the correct character.
The first standard for ANSI escape sequences was ECMA-48, adopted in 1976. It was a continuation of a series of character coding standards, the first one being ECMA-6 from 1961, a 7-bit standard from which ASCII originates. ECMA-48 has been updated several times and the current edition is the 5th from 1991. It is also adopted by ISO and IEC as standard ISO/IEC 6429. The name "ANSI escape sequence" dates from 1981 when ANSI adopted ECMA-48 as the standard ANSI X3.64 (and later, in 1997, withdrew it).See this NIST list of withdrawn standards
The first popular video terminal to support these sequences was the Digital VT100 introduced in 1978,[tpl]cite web |url=http://vt100.net/vt_history |title=Digital's Video Terminals |publisher=VT100.net |author=Paul Williams |year=2006 | accessdate=17 August 2011[/tpl] which sparked a variety of "clones", among the earliest and most popular of which was the much more affordable Zenith Z-19 in 1979.[tpl]cite web |url=http://www.pestingers.net/Computer_history/Computers_79.htm|title= Heathkit Catalog 1979|author= Heathkit Company|year= 1979|work= |publisher= Heathkit Company|accessdate=4 November 2011[/tpl]  The popularity of these gradually led to more and more software (especially bulletin board systems) assuming the escape sequences worked, leading to almost all new terminals and emulator programs supporting them.

==Support==

Most terminal emulators running on Unix-like systems (such as xterm and the OS X Terminal) interpret ANSI escape sequences. The Linux console (the text seen when X is not running) also interprets them. Terminal programs for Microsoft Windows designed to show text from an outside source (a serial port, modem, or socket) also interpret them. Some support for text from local programs on Windows is offered through alternate command processors such as JP Software's TCC (formerly 4NT), Michael J. Mefford's ANSI.COM, and Jason Hood's ansicon.
Many Unix console applications (e.g., ls, grep, Vim, and Emacs) can generate them. Utility programs such as tput output them, as well as in low-level programming libraries, such as termcap or terminfo, or a higher-level library such as curses.

===Windows and DOS===

DOS 1.x did not support the ANSI or any other escape sequences. Only a few control characters (BEL, CR, LF, BS) were interpreted by the underlying BIOS, making it almostThe screen display could be replaced by drawing the entire new screen's contents at the bottom, scrolling the previous screen up sufficiently to erase all the old text.  The user would see the scrolling, and the hardware cursor would be left at the very bottom.  Some early batch files achieved rudimentary "full screen" displays in this way. impossible to do any kind of full-screen application. Any display effects had to be done with BIOS calls (or far more often by directly manipulating the IBM PC hardware).
DOS 2.0 introduced the ability to add a device driver for the ANSI escape sequences – the de facto standard being ANSI.SYS, but others like ANSI.COM, NANSI.SYS and ANSIPLUS.EXE are used as well (these are considerably faster as they bypass the BIOS). Slowness and the fact that it was not installed by default made software rarely take advantage of it; instead, applications continued to directly manipulate the hardware to get the text display needed.[tpl]Citation needed|date=August 2011[/tpl]
ANSI.SYS and similar drivers continued to work in Windows 9x up to Windows Me, and in NT-derived systems for 16-bit legacy programs executing under the NTVDM.
The Win32 console does not natively support ANSI escape sequences at all. Software such as ANSICON can act as a wrapper around the standard Win32 console and add support for ANSI escape sequences. Otherwise software must manipulate the console with the ioctl-like Console API[tpl]cite web |url=http://msdn.microsoft.com/en-us/library/ms682087.aspx |title=Console Reference (Windows) |publisher=Microsoft |accessdate=17 August 2013[/tpl] interlaced with the text output. Some software internally interprets ANSI escape sequences in text being printed and translates them to these calls.[tpl]cite web |url=https://pypi.python.org/pypi/colorama |title=colorama 0.2.5 : |work=Python Package Index |accessdate=17 August 2013[/tpl]

==Sequence elements==

Escape sequences start with the character ESC (ASCII decimal 27/hex 0x1B/octal 033). For two character sequences, the second character is in the range ASCII 64 to 95 (@ to _). However, most of the sequences are more than two characters, and  start with the characters ESC and  (left bracket). This sequence is called CSI for Control Sequence Introducer (or Control Sequence Initiator). The final character of these sequences is in the range ASCII 64 to 126 (@ to ~).
There is a single-character CSI (155/0x9B/0233) as well. The ESC+ two-character sequence is more often used than the single-character alternative, for details see C0 and C1 control codes. Only the two-character sequence is recognized by devices that support just ASCII (7-bit bytes) or devices that support 8-bit bytes but use the 0x80–0x9F control character range for other purposes. On terminals that use UTF-8 encoding, both forms take 2 bytes (CSI in UTF-8 is 0xC2, 0x9B)[tpl]discuss|assertion about C1 controls in UTF-8[/tpl] but the ESC+ sequence is clearer.
Though some encodings use multiple bytes per character, the following discussion is restricted to ASCII characters, and so assumes each character is directly represented by a single byte.

==Non-CSI codes==

Note: other C0 codes besides ESC — commonly BEL, BS, CR, LF, FF, TAB, VT, SO, and SI — may produce similar or identical effects to some control sequences when output.
Note: pressing special keys on the keyboard, as well as outputting many xterm CSI, DCS, or OSC sequences, often produces a CSI, DCS, or OSC sequence.

==CSI codes==

The general structure of most ANSI escape sequences is CSI mode character(s?) n1 ; n2... intermediate character(s?) letter.  The final byte, modified by private mode characters and trailing intermediate characters, specifies the command. The numbers are optional parameters. The default value used for omitted parameters varies with the command, but is usually 1 or 0.  If trailing parameters are omitted, the trailing semicolons may also be omitted.
The final byte is technically any character in the range 64 to 126 (hex 0x40 to 0x7e, ASCII @ to ~), and may be modified with leading intermediate bytes in the range 32 to 47 (hex 0x20 to 0x2f).
The colon (0x3a) is the only character not a part of the general sequence; it was left for future standardization, so any sequence containing it should be ignored.
Although multiple private mode characters or trailing intermediates are permitted, there are no such known usages.[tpl]Citation needed|date=November 2010[/tpl]
If there are any leading private mode characters, the main body of the sequence could theoretically contain any order of characters 0x30 – 0x3f instead of a well-formed semicolon-separated list of numbers,[tpl]Citation needed|date=November 2010[/tpl] but all known terminals are nice and just use them as a flag.[tpl]Citation needed|date=November 2010[/tpl]
Sequences are also private if the final byte is in the range 112 to 126 (hex 0x70 to 0x7e, ASCII p to ~).
Examples of private escape codes include the DECTCEM (DEC text cursor enable mode) shown below.
It was first introduced for the VT-300 series of video terminals.
The existence of a C0 control, DEL (0x7f), or a high characters is undefined.[tpl]clarify|date=November 2010[/tpl] Typically, implementations will either cancel the sequence or execute the control and then continue parsing the CSI sequence.[tpl]clarify|date=November 2010[/tpl]

==Colors==

Text colors (and SGR parameters in general) are manipulated using CSI n1 ... m sequences, where each n1, n2, ... is an SGR parameter as shown above. Thus, for instance, you use codes 30+i to specify foreground color, 40+i to specify background color, where i is the number in the desired color's column header in the table below. The following examples can be used with the printf utility, where \x1b[ implements the CSI: To switch the foreground color to black, use \x1b[30m; to switch to red, use \x1b[31m; utilizing the "bold" parameter, gray would be \x1b[30;1m; to get bold red, use \x1b[31;1m. To reset colors to their defaults, use \x1b[39;49m (or reset all attributes with \x1b[0m).
There are two other color standards CSS/HTML standard colors and X Window colors which standardize both the color names and associated RGB color values, but the escape sequence standard only specifies the color names, not RGB values. The chart below shows default RGB assignments for some common terminal programs, together with the CSS and the X Window System colors for these color names.[tpl]Citation needed|date=October 2010[/tpl]
The VGA column denotes the typical colors that are used when booting PCs and leaving them in their classical 80×25 text mode. The colors are different in the EGA/VGA graphic modes.
In July 2004, the blue colors of xterm changed, RGB (0,0,205) → (0,0,238) for normal and (0,0,255) → (92,92,255) for bright. As of 2010, old xterm versions still linger on many computers though.[tpl]cn|date=September 2013[/tpl]
Xterm[tpl]cite web |url=http://invisible-island.net/xterm/ctlseqs/ctlseqs.html |title=XTerm Control Sequences |work=invisible-island.net |date=13 January 2014 |accessdate=13 April 2014[/tpl] and recent-enough versions of KDE's Konsole program support ISO-8613-3 24-bit foreground and background color setting[tpl]cite web |url=https://projects.kde.org/projects/kde/applications/konsole/repository/revisions/master/entry/tests/color-spaces.pl |title=color-spaces.pl (a copy of 256colors2.pl from xterm dated 11 July 1999) |publisher=KDE |date=6 December 2006 [/tpl][tpl]better source|24-bit colors (sic)|date=September 2013[/tpl] Quoting one of the text-files in its source-tree:[tpl]cite web |url=https://projects.kde.org/projects/kde/applications/konsole/repository/revisions/master/entry/doc/user/README.moreColors |title=README.moreColors |publisher=KDE |date=22 April 2010[/tpl][tpl]better source|24-bit colors (sic)|date=September 2013[/tpl]
    <code>ESC[ … 38;2;<r>;<g>;&lt;b> … m Select RGB foreground color</code>
    <code>ESC[ … 48;2;<r>;<g>;&lt;b> … m Select RGB background color</code>
In 256 color mode (ESC[38;5;<fgcode>m and ESC[48;5;<bgcode>m), the color-codes are the following:[tpl]cn|date=September 2013[/tpl]

  0x00-0x07:  standard colors (as in ESC &#91; 30..37 m)
  0x08-0x0f:  high intensity colors (as in ESC &#91; 90..97 m)
  0x10-0xe7:  6*6*6=216 colors: 16 + 36*r + 6*g + b (0≤r,g,b≤5)
  0xe8-0xff:  grayscale from black to white in 24 steps</code>
Xterm allows also to set the default foreground and background colors usinghttp://invisible-island.net/xterm/ctlseqs/ctlseqs.html
    <code>ESC]10;<foreground>BEL</code>
    <code>ESC]11;<background>BEL</code>
where  and  are X color specifications, and BEL is the ASCII BEL character (code 7). The closing bracket instead of an opening bracket reveals that it belongs to the operating system control commands.

==Examples==

CSI 2 J — This clears the screen and, on some devices, locates the cursor to the y,x position 1,1 (upper left corner).
CSI 32 m — This makes text green. On MS-DOS, normally the green would be dark, dull green, so you may wish to enable Bold with the sequence CSI 1 m which would make it bright green, or combined as CSI 32 ; 1 m.  MS-DOS ANSI.SYS uses the Bold state to make the character Bright; also the Blink state can be set (via INT 10, AX 1003h, BL 00h) to render the Background in the Bright mode.  MS-DOS ANSI.SYS does not support SGR codes 90–97 and 100–107 directly.
CSI 0 ; 6 8 ; "DIR" ; 13 p — This re-assigns the key F10 to send to the keyboard buffer the string "DIR" and ENTER, which in the DOS command line would display the contents of the current directory. (MS-DOS ANSI.SYS only)  This was sometimes used for ANSI bombs.  This is a private-use code (as indicated by the letter p), using a non-standard extension to include a string-valued parameter.  Following the letter of the standard would consider the sequence to end at the letter D.
CSI s — This saves the cursor position. Using the sequence CSI u will restore it to the position. Say the current cursor position is 7(y) and 10(x). The sequence CSI s will save those two numbers. Now you can move to a different cursor position, such as 20(y) and 3(x), using the sequence CSI 20 ; 3 H or CSI 20 ; 3 f. Now if you use the sequence CSI u the cursor position will return to 7(y) and 10(x). Some terminals require the DEC sequences ESC 7 / ESC 8 instead which is more widely supported.

===Example of use in shell scripting===

ANSI escape codes are often used in UNIX and UNIX-like terminals to provide syntax highlighting. For example, on compatible terminals, the following list command color-codes file and directory names by type.
ls --color
Users can employ escape codes in their scripts by including them as part of standard output or standard error. For example, the following sed command embellishes the output of the make command by displaying lines containing words starting with "ERR" in reverse video and words starting with "WARN" in bold (letter case is ignored).
 <span style="white-space:pre-wrap;">make 2&gt;&amp;1 | sed -e 's/.*\bERR.*/<span style="color:white;background:black;">\x1b[7m</span>&amp;<span style="color:black;background:silver;">\x1b[0m</span>/i' -e 's/.*\bWARN.*/<span style="color:black;background:silver;font-weight:bolder;">\x1b[1m</span>&amp;<span style="color:black;background:silver;">\x1b[0m</span>/i'</span>
The representations of the codes are highlighted.Colorized shell echo

==Invalid and ambiguous sequences in use==

==See also==

==Notes==

==External links==


