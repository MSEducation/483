[[Software engineering]]

CATEGORIES: Software engineering, Engineering disciplines

Software Engineering  is the study and application of engineering to the design, development, and maintenance of software.[tpl]harvnb|Abran|Moore|Bourque|Dupuis|2004|pp=1–1[/tpl]
Typical formal definitions of software engineering are:
  | title = Software Engineering|origyear = 1982
  | url = http://www.pearsoned.co.uk/HigherEducation/Booksby/Sommerville/
  | edition = 8th | year = 2007
  | publisher = Pearson Education | location = Harlow, England
  | isbn = 0-321-31379-8 | pages = 7 | chapter = 1.1.2 What is software engineering?
| quote = Software engineering is an engineering discipline that is concerned with all aspects of software production from the early stages of system specification to maintaining the system after it has gone into use. In this definition, there are two key phrases:  
1. Engineering discipline Engineers make things work. They apply theories, methods and tools where these are appropriate . . Engineers also recognize that they must work to organizational and financial constraints. . . 
2. All aspects of software production Software engineering is not just concerned with the technical processes of software development but also with activities such as software project management and with the development of tools, methods and theories to support software production.}}[/ref]
The term has been used less formally:

==History==

When the first digital computers appeared in the early 1940s,[tpl]Cite book|last=Leondes|title= intelligent systems: technology and applications|year=2002| publisher=CRC Press| isbn =978-0-8493-1121-5 | quote = [/tpl] the instructions to make them operate were wired into the machine.  Practitioners quickly realized that this design was not flexible and came up with the "stored program architecture" or von Neumann architecture.  Thus the division between "hardware" and "software" began with abstraction being used to deal with the complexity of computing.
Programming languages started to appear in the 1950s and this was also another major step in abstraction.  Major languages such as Fortran, ALGOL, and COBOL were released in the late 1950s to deal with scientific, algorithmic, and business problems respectively.  E.W. Dijkstra wrote his seminal paper, "Go To Statement Considered Harmful", in 1968 and David Parnas introduced the key concept of modularity and information hiding in 1972 to help programmers deal with the ever increasing complexity of software systems.
The term "Software Engineering" was first used in 1968 as a title for the world's first conference on Software Engineering, sponsored and facilitated by NATO. The conference was attended by international experts on software who agreed on defining best practices for software grounded in the application of engineering. The result of the conference is a report that defines how software should be developed software engineering foundations. The original report is publicly available.[tpl]cite web | title=Software Engineering | url=http://homepages.cs.ncl.ac.uk/brian.randell/NATO/nato1968.PDF[/tpl]
The discipline of Software Engineering was coined to address poor quality of software, get projects exceeding time and budget under control, and ensure that software is built systematically, rigorously, measurably, on time, on budget, and within specification. Engineering already addresses all these issues, hence the same principles used in engineering can be applied to software.  The widespread lack of best practices for software at the time was perceived as "software crisis".[tpl]harvnb|Sommerville|2008|p=26[/tpl]
The book analyzes sixty-three software projects and concludes the cost of fixing errors escalates as we move the project toward field use. The book also asserts that the key driver of software cost is the capability of the software development team.
In 1984, the Software Engineering Institute (SEI) was established as a federally funded research and development center headquartered on the campus of Carnegie Mellon University in Pittsburgh, Pennsylvania, United States. Watts Humphrey founded the SEI Software Process Program, aimed at understanding and managing the software engineering process. His 1989 book, Managing the Software Process,[tpl]Cite book|last=Humphrey|title= managing the software process|year=1989| publisher=addison-wesley| isbn =0-201-18095 | quote = [/tpl] asserts that the Software Development Process can and should be controlled, measured, and improved. The Process Maturity Levels introduced would become the Capability Maturity Model Integration for Development(CMMi-DEV), which has defined how the US Government evaluates the abilities of a software development team. 
The modern generally accepted practice for Software Engineering has been cataloged as a Guide to the Software Engineering Body of Knowledge (SWEBOK) which has become an internationally accepted standard ISO/IEC TR 19759:2005.

==Criticism==

Software Engineering sees programmers as practitioners of a well-defined engineering approach with the connotations of predictability, precision, mitigated risk and professionalism. This perspective has led to calls for licensing, certification and codified bodies of knowledge as mechanisms for maturing the field. Software Craftsmanship has been proposed by a body of software developers as an alternative that emphasizes the coding skills and accountability of the software developers themselves.  The Software Craftsmanship Manifesto extends the Agile Software Manifesto and draws a metaphor between modern software development and the apprenticeship model of medieval Europe.
Dijkstra refuted the concepts of "software engineering" and
"software maintenance," arguing that those terms were poor analogies for what
he called the "radical novelty" of computer science:

==Profession==

Legal requirements for the licensing or certification of professional software engineers vary around the world.  In the UK, the British Computer Society licenses software engineers and members of the society can also become Chartered Engineers (CEng), while in some areas of Canada, such as Alberta, Ontario,[tpl]cite conference | first = N.S.W. | last = Williams | title = Professional Engineers Ontario's approach to licensing software engineering practitioners | booktitle = Software Engineering Education and Training, 2001 Proceedings. 14th Conference on | pages = 77–78 | publisher = IEEE| date = 19–21 February 2001 | location = Charlotte, NC | url = | accessdate = [/tpl] and Quebec, software engineers can hold the Professional Engineer (P.Eng) designation and/or the Information Systems Professional (I.S.P.) designation. In Canada, there is a legal requirement to have P.Eng when one wants to use the title "engineer" or practice "software engineering".
The United States, starting from 2013 offer an NCEES  Professional Engineer exam for Software Engineering, thereby allowing Software Engineers to be licensed and recognized. Mandatory licensing is currently still largely debated, and perceived as controversial. In some parts of the US such as Texas, the use of the term Engineer is regulated by law and reserved only for use by individuals who have a Professional Engineer license. The IEEE informs the professional engineer license is not required unless the individual would work for public where health of others could be at risk if the engineer was not fully qualified to required standards by the particular state. Professional engineer licenses are specific to the state which has awarded them, and have to be regularly retaken.
The IEEE Computer Society and the ACM, the two main US-based professional organizations of software engineering, publish guides to the profession of software engineering. The IEEE's Guide to the Software Engineering Body of Knowledge - 2004 Version, or SWEBOK, defines the field and describes the knowledge the IEEE expects a practicing software engineer to have. Currently, the SWEBOK v3 is being produced and will likely be released in mid-2013.[tpl]cite web|url=http://www.computer.org/portal/web/swebok/v3guide |title='SWEBOK Guide Version 3' |accessdate=2012-11-14[/tpl] The IEEE also promulgates a "Software Engineering Code of Ethics".[tpl]cite web|url=http://www.computer.org/cms/Computer.org/Publications/code-of-ethics.pdf |title=Software Engineering Code of Ethics |format=PDF |accessdate=2012-03-25[/tpl]

===Employment===

In 2004, the U. S. Bureau of Labor Statistics counted 760,840 software engineers holding jobs in the U.S.; in the same time period there were some 1.4 million practitioners employed in the U.S. in all other engineering disciplines combined.Bureau of Labor Statistics, U.S. Department of Labor, USDL 05-2145: Occupational Employment and Wages, November 2004, Table 1. Due to its relative newness as a field of study, formal education in software engineering is often taught as part of a computer science curriculum, and many software engineers hold computer science degrees.[tpl]cite web|url=http://computingcareers.acm.org/?page_id=12|title=Software Engineering|accessdate=2008-02-01[/tpl]
Many software engineers work as employees or contractors. Software engineers work with businesses, government agencies (civilian or military), and non-profit organizations. Some software engineers work for themselves as freelancers. Some organizations have specialists to perform each of the tasks in the software development process. Other organizations require software engineers to do many or all of them. In large projects, people may specialize in only one role. In small projects, people may fill several or all roles at the same time. Specializations include: in industry (analysts, architects, developers, testers, technical support, middleware analysts, managers) and in academia (educators, researchers).
Most software engineers and programmers work 40 hours a week, but about 15 percent of software engineers and 11 percent of programmers worked more than 50 hours a week in 2008. Injuries in these occupations are rare. However, like other workers who spend long periods in front of a computer terminal typing at a keyboard, engineers and programmers are susceptible to eyestrain, back discomfort, and hand and wrist problems such as carpal tunnel syndrome.[tpl]cite web|url=http://www.bls.gov/oco/ocos303.htm#training|title=Computer Software Engineers and Computer Programmers|accessdate=2009-12-17[/tpl]
The field's future looks bright according to Money Magazine and Salary.com, which rated Software Engineer as the best job in the United States in 2006. In 2012, software engineering was again ranked as the best job in the United States, this time by CareerCast.com.[tpl]cite web|url=http://online.wsj.com/article/SB10001424052702303772904577336230132805276.html|title=Best and Worst Jobs of 2012 |publisher=online.wsj.com |accessdate=2012[/tpl]

===Certification===

The Software Engineering Institute offers certifications on specific topics like Security, Process improvement and Software architecture.[tpl]cite web|url=http://www.sei.cmu.edu/certification/ |title=SEI certification page |publisher=Sei.cmu.edu |accessdate=2012-03-25[/tpl] Apple, IBM, Microsoft and other companies also sponsor their own certification examinations.  Many IT certification programs are oriented toward specific technologies, and managed by the vendors of these technologies.[tpl]cite web|url=http://www.informit.com/articles/article.aspx?p=1180991|title=The Top 10 Problems with IT Certification in 2008|last=Wyrostek|first=Warren |date=March 14, 2008|work=InformIT|accessdate=2009-03-03[/tpl] These certification programs are tailored to the institutions that would employ people who use these technologies.
Broader certification of general software engineering skills is available through various professional societies. [tpl]As of|2006[/tpl], the IEEE had certified over 575 software professionals as a Certified Software Development Professional (CSDP).[tpl]cite web|author=IEEE Computer Society|url=http://www.ifip.org/minutes/GA2006/Tab18b-US-IEEE.pdf|format=PDF|title=2006 IEEE computer society report to the IFIP General Assembly|accessdate=2007-04-10[/tpl] In 2008 they added an entry-level certification known as the Certified Software Development Associate (CSDA).[tpl]cite web|author=IEEE|url=http://www.computer.org/portal/web/certification/csda|title=CSDA|accessdate=2010-04-20[/tpl]  The ACM had a professional certification program in the early 1980s,[tpl]Citation needed|date=March 2009[/tpl] which was discontinued due to lack of interest. The ACM examined the possibility of professional certification of software engineers in the late 1990s, but eventually decided that such certification was inappropriate for the professional industrial practice of software engineering.[tpl]cite web|url=http://www.cs.wm.edu/~coppit/csci690-spring2004/papers/selep_main.pdf|title=A Summary of the ACM Position on Software Engineering as a Licensed Engineering  Profession|last=ACM|date=July 17, 2000|publisher=Association for Computing Machinery (ACM)|accessdate=2009-03-03|quote=At its meeting in May 2000, the Council further concluded that the framework of a licensed professional engineer, originally developed for civil engineers, does not match the professional industrial practice of software engineering. Such licensing practices would give false assurances of competence even if the body of knowledge were mature; and would preclude many of the most qualified software engineers from becoming licensed.[/tpl] [tpl]Dead link|date=October 2010|bot=H3llBot[/tpl]
In the U.K. the British Computer Society has developed a legally recognized professional certification called Chartered IT Professional (CITP), available to fully qualified Members (MBCS). Software engineers may be eligible for membership of the Institution of Engineering and Technology and so qualify for Chartered Engineer status.  In Canada the Canadian Information Processing Society has developed a legally recognized professional certification called Information Systems Professional (ISP).[tpl]cite web|author=Canadian Information Processing Society|url=http://www.cips.ca/standards/isp|title=I.S.P. Designation|accessdate=2007-03-15[/tpl] In Ontario, Canada, Software Engineers who graduate from a Canadian Engineering Accreditation Board (CEAB) accredited program, successfully complete PEO's (Professional Engineers Ontario) Professional Practice Examination (PPE) and have at least 48 months of acceptable engineering experience are eligible to be licensed through the Professional Engineers Ontario and can become Professional Engineers P.Eng.[tpl]cite web|url=http://www.peo.on.ca |title=Professional Engineers Ontario: Welcome to PEO's website |publisher=Peo.on.ca |accessdate=2012-03-25[/tpl] The PEO does not recognize any online or distance education however; and does not consider Computer Science programs to be equivalent to software engineering programs despite the tremendous overlap between the two. This has sparked controversy and a certification war. It has also held the number of P.Eng holders for the profession exceptionally low. The vast majority of working professionals in the field hold a degree in CS, not SE.  Given the difficult certification path for holders of non-SE degrees, most never bother to pursue the license.

===Impact of globalization===

The initial impact of outsourcing, and the relatively lower cost of international human resources in developing third world countries led to a massive migration of software development activities from corporations in North America and Europe to India and later: China, Russia, and other developing countries. This approach had some flaws, mainly the distance / timezone difference that prevented human interaction between clients and developers and the massive job transfer. This had a negative impact on many aspects of the software engineering profession. For example, some students in the developed world avoid education related to software engineering because of the fear of offshore outsourcing (importing software products or services from other countries) and of being displaced by foreign visa workers.[tpl]cite web|first=Patrick|last=Thibodeau |url=http://www.computerworld.com/printthis/2006/0,4814,111202,00.html |title=As outsourcing gathers steam, computer science interest wanes |publisher=Computerworld.com |date=2006-05-05 |accessdate=2012-03-25[/tpl] Although statistics do not currently show a threat to software engineering itself; a related career, computer programming does appear to have been affected.[tpl]cite web|url=http://www.bls.gov/oco/ocos110.htm#outlook |title=Computer Programmers |publisher=Bls.gov |accessdate=2012-03-25[/tpl][tpl]cite web|last=Mullins |first=Robert |url=http://www.infoworld.com/article/07/03/13/HNslowsoftdev_1.html |title=Software developer growth slows in North America|publisher=InfoWorld |date=2007-03-13 |accessdate=2012-03-25[/tpl]  Nevertheless, the ability to smartly leverage offshore and near-shore resources via the follow-the-sun workflow has improved the overall operational capability of many organizations.[tpl]cite web|url=http://www.cognizant.com/html/content/news/GartnerMQ_Cognizant.pdf |title=Gartner Magic Quadrant |publisher=Cognizant.com |accessdate=2012-03-25[/tpl] When North Americans are leaving work, Asians are just arriving to work. When Asians are leaving work, Europeans are arriving to work. This provides a continuous ability to have human oversight on business-critical processes 24 hours per day, without paying overtime compensation or disrupting a key human resource, sleep patterns.
While global outsourcing has several advantages, global - and generally distributed - development can run into serious difficulties resulting from the distance between developers. This is due to the key elements of this type of distance which have been identified as Geographical, Temporal, Cultural and Communication (which includes the use of different languages and dialects of English in different locations).[tpl]cite web|last=Casey |first=Valentine |url=http://link.springer.com/article/10.1007%2Fs13173-010-0013-3 |title=Virtual software team project management|publisher=Springer |date=20010-08-20 |accessdate=2013-12-06[/tpl]  Research has been carried out in the area of global software development over the last 15 years and an extensive body of relevant work published which highlights the benefits and problems associated with the complex activity.  As with other aspects of Software Engineering research is ongoing in this and related areas.

==Education==

Knowledge of computer programming is a pre-requisite to becoming a software engineer. In 2004 the IEEE Computer Society produced the SWEBOK, which has been published as ISO/IEC Technical Report 1979:2004, describing the body of knowledge that they believe should be mastered  by a graduate software engineer with four years of experience.[tpl]cite book | editor1-last = Abran |editor1-first=  Alain | title = Guide to the Software Engineering Body of Knowledge | publisher = IEEE Computer Society | location = Los Alamitos |year= 2005 | isbn = 0-7695-2330-7 | url= http://www.computer.org/portal/web/swebok |accessdate=2010-09-13|origyear= 2004|chapter= Chapter 1: Introduction to the Guide|chapterurl= http://www.computer.org/portal/web/swebok/html/ch1 |quote= The total volume of cited literature is intended to be suitable for mastery through the completion of an undergraduate education plus four years of experience.[/tpl]
Many software engineers enter the profession by obtaining a university degree or training at a vocational school. One standard international curriculum for undergraduate software engineering degrees was defined by the CCSE, and updated in 2004.[tpl]cite web|url=http://sites.computer.org/ccse/ |title=SE2004 Software Engineering Curriculum |publisher=Sites.computer.org |date=2003-09-30 |accessdate=2012-03-25[/tpl] A number of universities have Software Engineering degree programs; [tpl]As of|2010|lc=on[/tpl], there were 244 Campus programs, 70 Online programs, 230 Masters-level programs, 41 Doctorate-level programs, and 69 Certificate-level programs in the United States.http://www.gradschools.com/search-programs/software-engineering Degree programs in Software Engineering
For practitioners who wish to become proficient and recognized as professional software engineers, the IEEE offers two certifications that extend knowledge above level achieved by an academic degree: Certified Software Development Associate and Certified Software Development Professional.
In addition to university education, many companies sponsor internships for students wishing to pursue careers in information technology. These internships can introduce the student to interesting real-world tasks that typical software engineers encounter every day. Similar experience can be gained through military service in software engineering.

==Comparison with other disciplines==

Major differences between software engineering and other engineering disciplines, according to some researchers, result from the costs of fabrication.[tpl]cite book | last1 = Young | first1 = Michal  | last2 = Faulk | first2 =Stuart  | year = 2010 |title= Proceedings of the FSE/SDP workshop on Future of software engineering research (FoSER '10) |format=PDF | accessdate = 2011-02-25 |publisher=ACM| isbn=978-1-4503-0427-6|doi =10.1145/1882362.1882451| pages= 439–442 |chapter= Sharing What We Know About Software Engineering |chapterurl= http://www.ics.uci.edu/~jajones/papers/p439.pdf | quote = The essential distinction between software and other engineered artifacts has always been the absence of fabrication cost. In conventional engineering of physical artifacts, the cost of materials and fabrication has dominated the cost of design and placed a check on the complexity of artifacts that can be designed. When one bottleneck is removed, others appear, and software engineering has therefore faced the essential challenges of complexity and the cost of design to an extent that conventional engineering has not. Software engineering has focused on issues in managing complexity, from process to modular design to cost-effective verification, because that is the primary leverage point when the costs of materials and fabrication are nil.[/tpl]

==Software development process==

A set of activities that leads to the production of a software product is known as software process.[tpl]harvnb|Sommerville|2008|p=86[/tpl] Although most of the software are custom build, the software engineering market is being gradually shifted towards component based. Computer-aided software engineering (CASE) tools are being used to support the software process activities. However, due to the vast diversity of software processes for different types of products, the effectiveness of CASE tools is limited. There is no ideal approach to software process that has yet been developed. Some fundamental activities, like software specification, design, validation and maintenance are common to all the process activities.

===Models===

A software process model is an abstraction of software process. These are also called process paradigms. Various general process models are waterfall model, evolutionary development model and component-based software engineering model. These are widely used in current software engineering practice. For large systems, these are used together.[tpl]harvnb|Sommerville|2008|p=87[/tpl]

====Waterfall model====

The waterfall model was one of the first published models for the software process. This model divides software processes in various phases. These phases are:[tpl]harvnb|Sommerville|2008|p=89[/tpl]
Theoretically the activities should be performed individually but in practice, they often overlap. During the maintenance stage, the software is put into use. During this, additional problems might be discovered and the need of new feature may arise. This may require the software to undergo the previous phases once again.

====Agile model====

"Agile Development" is an umbrella term for several iterative and incremental software development methodologies.  Some of these methods include:
 [tpl]cite book | last = Ambler | first = Scott | title = Disciplined Agile Delivery: A Practitioner's Guide to Agile Software Delivery in the Enterprise | publisher = IBM | location = Boston    | year = 2012 | isbn = 0132810131 | url = http://ambysoft.com/books/dad.html | accessdate = 2014-02-04 [/tpl]</ref>

==Subdisciplines==

Software engineering can be divided into ten subdisciplines. They are:

==Related disciplines==

Software engineering is a direct subfield of computer science and has some relations with management science. It is also considered a part of overall systems engineering.

===Systems engineering===

Systems engineers deal primarily with the overall system requirements and design, including hardware and human issues.

==See also==

==Notes==

==References==

|first1=Alain
|last1=Abran
|first2=James W.
|last2=Moore
|first3=Pierre
|last3=Bourque
|first4=Robert
|last4=Dupuis
|first5=Leonard L.
|last5=Tripp
|title=Guide to the Software Engineering Body of Knowledge 
|year=2004
|publisher=IEEE
|isbn=0-7695-2330-7
|ref=harv}}
|last=Sommerville
|first=Ian
|title=Software Engineering 
|edition=7
|url=http://books.google.com/books?id=PqsWaBkFh1wC
|accessdate=10 January 2013
|year=2008
|publisher=Pearson Education
|isbn=978-81-7758-530-8
|ref=harv}}

==Further reading==

  | title = Fundamentals of Software Engineering|origyear = 1991
  | edition = 2nd (International) | year = 2003
  | publisher = Pearson Education @ Prentice-Hall | coauthors = Mehdi Jazayeri, Dino Mandrioli}}
  | title = An Integrated Approach to Software Engineering |origyear = 1991
  | url = http://www.springer.com/east/home?SGWisbn=5-102-22-52090005-0&changeHeader=true
  | edition = 3rd | year = 2005
  | publisher =  Springer | location =
  | isbn = 0-387-20881-X }}
  | title = Software Engineering: A Practitioner's Approach |origyear =
  | edition = 6th | year = 2005
  | publisher = McGraw-Hill | location = Boston, Mass
  | isbn = 0-07-285318-2}}
  | title = Software Engineering|origyear = 1982
  | url = http://www.pearsoned.co.uk/HigherEducation/Booksby/Sommerville/
  | edition = 8th | year = 2007
  | publisher = Pearson Education | location = Harlow, England
  | isbn = 0-321-31379-8 }}

==External links==


