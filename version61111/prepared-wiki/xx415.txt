[[Computer programming]]

CATEGORIES: Computer programming

Computer programming (often shortened to programming) is a process that leads from an original formulation of a computing problem to executable programs. It involves activities such as analysis, understanding, and generically solving such problems resulting in an algorithm, verification of requirements of the algorithm including its correctness and its resource consumption, implementation (commonly referred to as coding[tpl]cite blog| author=Shaun Bebbington| year=2014| url=http://yearofcodes.tumblr.com/what-is-coding| title=What is coding| accessdate=2014-03-03[/tpl][tpl]cite blog| author=Shaun Bebbington| year=2014| url=http://yearofcodes.tumblr.com/what-is-programming| title=What is programming| accessdate=2014-03-03[/tpl]) of the algorithm in a target programming language, testing, debugging, and maintaining the source code, implementation of the build system and management of derived artefacts such as machine code of computer programs. The algorithm is often only represented in human-parsable form and reasoned about using logic. Source code is written in one or more programming languages (such as C, C++, C#, Java, Python, Smalltalk, JavaScript, etc.). The purpose of programming is to find a sequence of instructions that will automate performing a specific task or solve a given problem. The process of programming thus often requires expertise in many different subjects, including knowledge of the application domain, specialized algorithms and formal logic.

==Overview==

Within software engineering, programming (the implementation) is regarded as one phase in a software development process.
There is an on-going debate on the extent to which the writing of programs is an art form, a craft, or an engineering discipline.[tpl]cite journal |author=Paul Graham |year=2003 |url=http://www.paulgraham.com/hp.html |title=Hackers and Painters |accessdate=2006-08-22[/tpl] In general, good programming is considered to be the measured application of all three, with the goal of producing an efficient and evolvable software solution (the criteria for "efficient" and "evolvable" vary considerably). The discipline differs from many other technical professions in that programmers, in general, do not need to be licensed or pass any standardized (or governmentally regulated) certification tests in order to call themselves "programmers" or even "software engineers." Because the discipline covers many areas, which may or may not include critical applications, it is debatable whether licensing is required for the profession as a whole.  In most cases, the discipline is self-governed by the entities which require the programming, and sometimes very strict environments are defined (e.g. United States Air Force use of AdaCore and security clearance). However, representing oneself as a "professional software engineer" without a license from an accredited institution is illegal in many parts of the world.
Another on-going debate is the extent to which the programming language used in writing computer programs affects the form that the final program takes.[tpl]Citation needed|date=December 2013[/tpl] This debate is analogous to that surrounding the Sapir–Whorf hypothesisKenneth E. Iverson, the originator of the APL programming language, believed that the Sapir–Whorf hypothesis applied to computer languages (without actually mentioning the hypothesis by name).  His Turing award lecture, "Notation as a tool of thought", was devoted to this theme, arguing that more powerful notations aided thinking about computer algorithms. Iverson K.E.,"Notation as a tool of thought", Communications of the ACM, 23: 444-465 (August 1980). in linguistics and cognitive science, which postulates that a particular spoken language's nature influences the habitual thought of its speakers. Different language patterns yield different patterns of thought. This idea challenges the possibility of representing the world perfectly with language, because it acknowledges that the mechanisms of any language condition the thoughts of its speaker community.

==History==

Ancient cultures had no conception of computing beyond simple arithmetic.  The only mechanical device that existed for numerical computation at the beginning of human history was the abacus, invented in Sumeria circa 2500 BC.  Later, the Antikythera mechanism, invented some time around 100 BC in ancient Greece, is the first known mechanical calculator utilizing gears of various sizes and configuration to perform calculations,"Ancient Greek Computer's Inner Workings Deciphered". National Geographic News. November 29, 2006.  which tracked the metonic cycle still used in lunar-to-solar calendars, and which is consistent for calculating the dates of the Olympiads.[ref]
