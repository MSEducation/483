[[Interpreter pattern]]

CATEGORIES: Software design patterns, Articles with example Java code

In computer programming, the interpreter pattern is a design pattern that specifies how to evaluate sentences in a language. 
The basic idea is to have a class for each symbol (terminal or nonterminal) in a specialized computer language. The syntax tree of a sentence in the language is an instance of the composite pattern and is used to evaluate (interpret) the sentence.[ref]
</ref>[tpl]rp|243[/tpl]

==Uses for the Interpreter pattern==

==Structure==

==Example==

The following Backus-Naur Form example illustrates the interpreter pattern. The grammar
defines a language which contains Reverse Polish Notation expressions like:
 
 a b +
a b c + -
a b + c a - -

Following the interpreter pattern there is a class for each grammar rule.
While the interpreter pattern does not address parsing[tpl]rp|247[/tpl] a parser is provided for completeness.
Finally evaluating the expression "w x z - +" with w = 5, x = 10, and z = 42.

==See also==

==References==

==External links==


