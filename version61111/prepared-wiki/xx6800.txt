[[Legacy system]]

CATEGORIES: Legacy systems, Legacy hardware

In computing a legacy system is an old method, technology, computer system, or application program.
The term first came into use in 1990 meaning "of, relating to, or being a previous or outdated computer system."[tpl]cite web|title=Merriam-Webster|url=http://www.merriam-webster.com/dictionary/legacy|accessdate=June 22, 2013[/tpl]  A more recent definition says that "a legacy system is any corporate computer system that isn't Internet-dependent."[tpl]cite news|last=Stone|first=Arney|title=Keeping Legacy Software Alive|url=http://www.businessweek.com/stories/2001-06-13/keeping-legacy-software-alive|accessdate=June 22, 2013|newspaper=Bloomberg Businessweek|date=June 13, 2001[/tpl] The term "legacy" may also have little to do with the size or age of the system — mainframes run 64-bit Linux and Java alongside 1960s vintage code.
Although the term is most commonly used to describe computers and software, use of the word legacy as an adjective may also describe human behaviors, methods, and tools. For example, timber framing using wattle and daub is a legacy building construction method.  
The legacy system may or may not remain in use.  For a variety of reasons, a legacy system may continue to be used. It may be that the system still provides for the users' needs, even though newer technology or more efficient methods of performing a task are now available. The decision to keep an old system may be influenced by economic reasons such as return on investment challenges or vendor lock-in, the inherent challenges of change management, or a variety of other reasons other than functionality. 
Even if it is no longer used, it may continue to impact the organization due to its historical role. Historic data may not have been converted into the new system format and may exist within the new system with the use of a customized schema crosswalk, or may exist only in a data warehouse. In either case, the effect on business intelligence and operational reporting can be significant.  A legacy system may include procedures or terminology which are no longer relevant in the current context, and may hinder or confuse understanding of the methods or technologies used.

==Overview==

Organizations can have compelling reasons for keeping a legacy system, such as:

==NASA example==

NASA's now retired Space Shuttle program used a large amount of 1970s-era technology. Replacement was cost-prohibitive because of the expensive requirement for flight certification; the legacy hardware used completed the expensive integration and certification requirement for flight, but any new equipment would have had to go through that entire process – requiring extensive tests of the new components in their new configurations – before a single unit could be used in the Space Shuttle program. This would have made any new system that started the certification process a de facto legacy system by the time of completion. 
Additionally, because the entire Space Shuttle system, including ground and launch vehicle assets, was designed to work together as a closed system, and the specifications did not change, all of the certified systems and components served well in the roles for which they were designed.  It was advantageous for NASA – even before the Shuttle was scheduled to be retired in 2010 – to keep using many pieces of 1970s technology rather than to upgrade those systems.
Legacy systems are considered to be potentially problematic by some software engineers for several reasons (for example, see Bisbal et al., 1999). 

==Improvements on legacy software systems==

Where it is impossible to replace legacy systems through the practice of application retirement, it is still possible to enhance (or "re-face") them. Most development often goes into adding new interfaces to a legacy system.  The most prominent technique is to provide a Web-based interface to a terminal-based mainframe application. This may reduce staff productivity due to slower response times and slower mouse-based operator actions, yet it is often seen as an "upgrade", because the interface style is familiar to unskilled users and is easy for them to use. John McCormick discusses such strategies that involve middleware.[tpl]cite web|author=Jun 02, 2000 |url=http://www.gcn.com/state/vol6_no6/guide/748-1.html |title=Mainframe-web middleware - John McCormick |publisher=Gcn.com |date=2000-06-02 |accessdate=2012-04-29[/tpl]
Printing improvements are problematic because legacy software systems often add no formatting instructions, or they use protocols that are not usable in modern PC/Windows printers. A print server can be used to intercept the data and translate it to a more modern code. Rich Text Format (RTF) or PostScript documents may be created in the legacy application and then interpreted at a PC before being printed.
Biometric security measures are difficult to implement on legacy systems.  A workable solution is to use a telnet or http proxy server to sit between users and the mainframe to implement secure access to the legacy application.
The change being undertaken in some organizations is to switch to Automated Business Process (ABP) software which generates complete systems. These systems can then interface to the organizations' legacy systems and use them as data repositories. This approach can provide a number of significant benefits: the users are insulated from the inefficiencies of their legacy systems, and the changes can be incorporated quickly and easily in the ABP software .

==Legacy support==

The term legacy support is often used with reference to obsolete or legacy computer hardware, whether peripherals or core components. Operating systems with "legacy support" can detect and use legacy hardware.
It is also used as a verb for what vendors do for products in legacy mode – they "support", or provide software maintenance, for older products. A "legacy" product may have some advantage over a modern product, even if not one that causes a majority of the market to favor it over the newer offering. A product is only truly "obsolete" if it has an advantage to nobody – if no person making a rational decision would choose to acquire it new. 
In some cases, "legacy mode" refers more specifically to backward compatibility.
The computer mainframe era saw many applications running in legacy mode. In the modern business computing environment, n-tier, or 3-tier architectures are more difficult to place into legacy mode as they include many components making up a single system. Government regulatory changes must also be considered in a system running in legacy mode.[tpl]Clarify|date=February 2009[/tpl]
Virtualization technology allows for a resurgence of modern software applications entering legacy mode.

==Brownfield architecture==

IT has borrowed the term brownfield from the building industry, where undeveloped land (and especially unpolluted land) is described as greenfield and previously developed land – which is often polluted and abandoned – is described as brownfield.[tpl]cite web|url=http://searchunifiedcommunications.techtarget.com/sDefinition/0,,sid186_gci1062754,00.html |title=Definition of greenfield and brownfield deployment |publisher=Searchunifiedcommunications.techtarget.com |date= |accessdate=2012-04-29[/tpl] 

==Alternative view==

There is an alternate point of view — growing since the "Dot Com" bubble burst in 1999 — that legacy systems are simply computer systems that are both installed and working. In other words, the term is not pejorative, but the opposite. Bjarne Stroustrup, creator of the C++ language, addressed this issue succinctly:
IT analysts estimate that the cost of replacing business logic is about five times that of reuse,[tpl]Citation needed|date=March 2009[/tpl] and that is not counting the risks involved in wholesale replacement. Ideally, businesses would never have to rewrite most core business logic; debits must equal credits — they always have, and they always will. New software may increase the risk of system failures and security breaches.
The IT industry is responding to these concerns. "Legacy modernization" and "legacy transformation" refer to the act of reusing and refactoring existing core business logic by providing new user interfaces (typically Web interfaces), sometimes through the use of techniques such as screen scraping and service-enabled access (e.g. through web services). These techniques allow organizations to understand their existing code assets (using discovery tools), provide new user and application interfaces to existing code, improve workflow, contain costs, minimize risk, and enjoy classic qualities of service (near 100% uptime, security, scalability, etc.).[tpl]Citation needed|date=February 2007[/tpl]
The re-examination of attitudes toward legacy systems is also inviting more reflection on what makes legacy systems as durable as they are. Technologists are relearning that sound architecture, practiced up front, helps businesses avoid costly and risky rewrites in the first place. The most common legacy systems tend to be those which embraced well-known IT architectural principles, with careful planning and strict methodology during implementation. Poorly designed systems often don't last, both because they wear out and because their reliability or usability are low enough that no one is inclined to make an effort to extend their term of service when replacement is an option. Thus, many organizations are rediscovering the value of both their legacy systems themselves and those systems' philosophical underpinnings.

==Euphemism==

Legacy system is also used as a euphemism for an old body of code, working or not.  The word "legacy" implies that the system is a thing of value, even if it provides more cost than benefit, and helps to justify not replacing or discarding it.

==See also==

==References==

==Further reading==


