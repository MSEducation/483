[[Regular language]]

CATEGORIES: Formal languages, Automata theory

In theoretical computer science and formal language theory, a regular language is a formal language that can be expressed using a regular expression. (Note that the "regular expression" features provided with many programming languages are augmented with features that make them capable of recognizing languages that  can not be expressed by the formal regular expressions (as formally defined below).)
Alternatively, a regular language can be defined as a language recognized by a finite automaton.
In the Chomsky hierarchy, regular languages are defined to be the languages that are generated by Type-3 grammars (regular grammars).
Regular languages are very useful in input parsing and programming language design.

==Formal definition==

The collection of regular languages over an alphabet Σ is defined recursively as follows:
See regular expression for its syntax and semantics. Note that the above cases are in effect the defining rules of regular expression.
All finite languages are regular; in particular the empty string language {ε} = Ø* is regular. Other typical examples include the language consisting of all strings over the alphabet {a, b} which contain an even number of as, or the language consisting of all strings of the form: several as followed by several bs.

==Equivalence to other formalisms==

A regular language satisfies the following equivalent properties:
The above properties are sometimes used as alternative definition of regular languages.

==Closure properties==

The regular languages are closed under the various operations, that is, if the languages K and L are regular, so is the result of the following operations:

==Deciding whether a language is regular==

To locate the regular languages in the Chomsky hierarchy, one notices that every regular language is context-free. The converse is not true: for example the language consisting of all strings having the same number of as as bs is context-free but not regular. To prove that a language such as this is not regular, one often uses the Myhill–Nerode theorem or the pumping lemma among other methods.How to prove that a language is not regular?
There are two purely algebraic approaches to define regular languages. If:
If L is any subset of Σ*, one defines an equivalence relation ~ (called the syntactic relation) on Σ* as follows: u ~ v is defined to mean
The language L is regular if and only if the number of equivalence classes of ~ is finite (A proof of this is provided in the article on the syntactic monoid). When a language is regular, then the number of equivalence classes is equal to the number of states of the minimal deterministic finite automaton accepting L.

==Complexity results==

If a language is not regular, it requires a machine with at least Ω(log log n) space to recognize (where n is the input size).J. Hartmanis, P. L. Lewis II, and R. E. Stearns. Hierarchies of memory-limited computations. Proceedings of the 6th Annual IEEE Symposium on Switching Circuit Theory and Logic Design, pp. 179–190. 1965. In other words, DSPACE(o(log log n)) equals the class of regular languages. In practice, most nonregular problems are solved by machines taking at least logarithmic space.

==Subclasses==

Important subclasses of regular languages include

==The number of words in a regular language==

The zeta function of a language L is
The zeta function of a regular language is not in general rational, but that of a cyclic language is.[tpl]cite journal | zbl=0797.68092 | last1=Berstel | first1=Jean | last2=Reutenauer | first1=Christophe | title=Zeta functions of formal languages | journal=Trans. Am. Math. Soc. | volume=321 | number=2 | pages=533–546 | year=1990 | doi=10.1090/s0002-9947-1990-0998123-x[/tpl]

==Generalizations==

The notion of a regular language has been generalized to infinite words (see ω-automata) and to trees (see tree automaton).

==See also==

==References==

==External links==


