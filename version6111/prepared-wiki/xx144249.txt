[[Address Windowing Extensions]]

CATEGORIES: Microsoft application programming interfaces, Windows NT architecture, X86 memory management

Address Windowing Extensions (AWE) is a Microsoft Windows application programming interface that allows a 32-bit software application to access more physical memory than it has virtual address space, even in excess of the 4 GB limit.[tpl]cite web|url=http://msdn.microsoft.com/en-us/library/aa366527%28v=vs.85%29.aspx|title=Address Windowing Extensions|publisher=MSDN|quote="a set of extensions that allows an application to quickly manipulate physical memory greater than 4GB."[/tpl] The process of mapping an application's virtual address space to physical memory under AWE is known as "windowing," and is similar to the overlay concept of other environments.  AWE is beneficial to certain data-intensive applications, such as database management systems and scientific and engineering software, that need to manipulate very large data sets.
The application reserves a region, or "window" of virtual address space, and allocates one or more regions of physical memory.  Using the AWE API, the application can map the virtual window to any one of the physical regions.  The application can reserve more than one virtual address space and map it to any of the allocated regions of physical memory, as long as the number of bytes reserved in the virtual address space matches that of the physical memory region. An application must have the Lock Pages in Memory privilege to use AWE.
AWE depends on Physical Address Extension support when reserving memory above 4 GB. AWE was first introduced in Windows 2000 as a new API superseding the PSE36 method (from the Windows NT 4.0 Enterprise Edition) of accessing more than 4 GB of memory, which was no longer supported in Windows 2000.[tpl]cite book|author=Sajal Dam|title=SQL Server Query Performance Tuning Distilled|url=http://books.google.com/books?id=3branTEOAEYC&pg=PA28|year=2004|publisher=Apress|isbn=978-1-4302-0407-7|pages=28–29[/tpl][tpl]cite web|author=Michael R. Ault|url=http://www.authorsden.com/ArticlesUpload/56695.pdf |title=Increasing Available Memory in Linux and Windows|publisher=ROBO Books White Paper |format=PDF |date=2003-02-17 |accessdate=2014-03-01|pages=10–12[/tpl] Among the first applications to make use of AWE were Oracle 8.1.6 and Microsoft SQL Server 2000.
If the /3GB boot flag is used to repartition the 32-bit virtual address space (from the 2 GB kernel and 2 GB userland) to 3 GB userland, then AWE is limited to accessing 16 GB of physical memory. This limitation is due to the fact that with only one GB reserved for the kernel, there isn't enough memory for the page table entries to map more than 16 GB of memory.[tpl]cite book|url=http://www-03.ibm.com/systems/kr/resources/systems_kr_x_techsupport_Tuning_xSeries_for_Performance.pdf|title=Tuning IBM xSeries Servers for Performance|publisher=IBM SG24-5287-02|edition=3rd|date=June 2002|pages=92–93[/tpl] Additional restrictions on the maximum amount of memory addressable thorough AWE are imposed by the Windows licensing scheme. For example Windows 2000 Advanced Server was limited to 8 GB, while Windows 2000 Data Center Server supported 64 GB.[tpl]cite book|author1=Dwaine Snow|author2=Thomas X. Phan|title=Advanced DBA Certification Guide and Reference: For DB2 Universal Database V8 for Linux, UNIX, and Windows|url=http://books.google.com/books?id=KdBLn-LQ0n4C&pg=PA87|year=2003|publisher=Prentice Hall Professional|isbn=978-0-13-046388-3|page=87[/tpl]
An article published in Dr. Dobb's Journal in 2004 noted that memory allocated using Address Windowing Extensions will not be written to the pagefile, and suggested that AWE regions could therefore be used as a way of protecting sensitive application data such as encryption keys.

==See also==

==References==

==External links==


