[[Protocol (object-oriented programming)]]

CATEGORIES: Object-oriented programming

In object-oriented programming, a protocol or interface is a common means for unrelated objects to communicate with each other. These are definitions of methods and values which the objects agree upon in order to cooperate.[tpl]cite web|url=http://developer.apple.com/library/mac/#documentation/cocoa/conceptual/objectivec/chapters/ocProtocols.html|title=The Objective-C programming Language:Protocols|publisher=Apple Inc|accessdate=7 October 2012[/tpl]
For example, in Java (where protocols are termed interfaces), the Comparable interface specifies a method compareTo() which implementing classes should implement. This means that a separate sorting method, for example, can sort any object which implements the Comparable interface, without having to know anything about the inner nature of the class (except that two of these objects can be compared by means of compareTo()).
The protocol is a description of:
If the objects are fully encapsulated then the protocol will describe the only way in which objects may be accessed by other objects.
Some programming languages directly support protocols or interfaces (Ada, C#, D, Dart, Delphi, Java, Logtalk, Object Pascal, Objective-C, PHP, Racket, Seed7).  Older languages may also have features that can support the interface concept, such as abstract base classes with pure virtual functions  in C++, or object-oriented features in Perl.
Although the Go programming language is not generally considered an object-oriented language, it does allow methods to be defined on user-defined types. Go has "interface" types that are compatible with any type that supports a given set of methods (the type does not need to explicitly implement the interface). The empty interface, interface{}, is compatible with all types.
Note that functional programming and distributed programming languages have a concept which is also called a protocol, but whose meaning is subtly different (i.e. a specification of allowed exchanges of messages, emphasis on exchanges, not on messages). This difference is due to somewhat different assumptions of functional programming and object-oriented programming paradigms. In particular, the following are also considered as part of a protocol in these languages:

==See also==

==References==


