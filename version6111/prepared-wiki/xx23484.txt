[[Partial evaluation]]

CATEGORIES: Compiler optimizations, Incremental computing, Evaluation strategy

In computing, partial evaluation is a technique for several different types of program optimization by specialization. The most straightforward application is to produce new programs which run faster than the originals while being guaranteed to behave in the same way.
A computer program, prog, is seen as a mapping of input data into output data:

==Futamura projections==

A particularly interesting example of this, first described in the 1970s by Yoshihiko Futamura,Yoshihiko Futamura's Website is when prog is an interpreter for a programming language.
If Istatic is source code designed to run inside said interpreter, then partial evaluation of the interpreter with respect to this data/program produces prog*, a version of the interpreter that only runs that source code, is written in the implementation language of the interpreter, does not require the source code to be resupplied, and runs faster than the original combination of the interpreter and the source. In this case prog* is effectively a compiled version of Istatic.
This technique is known as the first Futamura projection, of which there are three:

==See also==

==References==

==External links==


