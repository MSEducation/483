[[Memory protection]]

CATEGORIES: Memory management

Memory protection is a way to control memory access rights on a computer, and is a part of most modern operating systems.  The main purpose of memory protection is to prevent a process from accessing memory that has not been allocated to it.  This prevents a bug within a process from affecting other processes, or the operating system itself, and instead results in a segmentation fault or storage violation exception being sent to the offending process, generally causing abnormal termination (killing the process). Memory protection for computer security includes additional techniques such as address space layout randomization and  executable space protection.

==Methods==

===Segmentation===

Segmentation refers to dividing a computer's memory into segments.  A reference to a memory location includes a value that identifies a segment and an offset within that segment.
The x86 architecture has multiple segmentation features, which are helpful for using protected memory on this architecture. On the x86 processor architecture, the Global Descriptor Table and Local Descriptor Tables can be used to reference segments in the computer's memory. Pointers to memory segments on x86 processors can also be stored in the processor's segment registers. Initially x86 processors had 4 segment registers, CS (code segment), SS (stack segment), DS (data segment) and ES (extra segment); later another two segment registers were added – FS and GS.

===Paged virtual memory===

In paging the memory address space is divided into equal-sized blocks called pages.  Using virtual memory hardware, each page can reside in any location of the computer's physical memory, or be flagged as being protected.  Virtual memory makes it possible to have a linear virtual memory address space and to use it to access blocks fragmented over physical memory address space.
Most computer architectures which support paging also use pages as the basis for memory protection.
A page table maps virtual memory to physical memory. The page table is usually invisible to the process.  Page tables make it easier to allocate additional memory, as each new page can be allocated from anywhere in physical memory.
It is impossible for an application to access a page that has not been explicitly allocated to it, because every memory address either points to a page allocated to that application, or generates an interrupt called a page fault. Unallocated pages, and pages allocated to any other application, do not have any addresses from the application point of view.
A page fault may not necessarily indicate an error.  Page faults are not only used for memory protection. The operating system may manage the page table in such a way that a reference to a page that has been previously swapped out to disk causes a page fault. The operating system intercepts the page fault and, loads the required memory page, and the application continues as if no fault had occurred. This scheme, known as  virtual memory, allows in-memory data not currently in use to be moved to disk storage and back in a way which is transparent to applications, to increase overall memory capacity.
On some systems, the page fault mechanism is also used for executable space protection such as W^X.

===Protection keys===

A protection key mechanism divides physical memory up into blocks of a particular size (e.g., 4 kiB), each of which has an associated numerical value called a protection key.  Each process also has a protection key value associated with it.  On a memory access the hardware checks that the current process's protection key matches the value associated with the memory block being accessed; if not, an exception occurs.  This mechanism was introduced in the System/360 architecture. It is available on today's System z mainframes and heavily used by System z operating systems and their subsystems.
The System/360 protection keys described above are associated with physical addresses.  This is different from the protection key mechanism used by processors such as the Intel Itanium and the Hewlett-Packard Precision Architecture (HP/PA, also known as PA-RISC), which are associated
with virtual addresses, and which allow multiple keys per process.
In the Itanium and PA processor architectures, translations (TLB entries) have keys (Itanium) or access ids (PA) associated with them.  A running process has several protection key registers (16 for Itanium,Keys in Itanium 4 for HP/PAMemory protection in HP PA-RISC). A translation selected by the virtual address has its key compared to each of the protection key registers.  If any of them match (plus other possible checks), the access is permitted.  If none match, a fault or exception is generated.  The software fault handler can, if desired, check the missing key against a larger list of keys maintained by software; thus, the protection key registers inside the processor may be treated as a software-managed cache of a larger list of keys associated with a process.
PA has 15–18 bits of key; Itanium mandates at least 18.  Keys are usually associated with protection domains, such as libraries, modules, etc.

===Simulated segmentation===

Simulation is use of a monitoring program to interpret the machine code instructions of some computer architectures.  Such an Instruction Set Simulator can provide memory protection by using a segmentation-like scheme and validating the target address and length of each instruction in real time before actually executing them. The simulator must calculate the target address and length and compare this against a list of valid address ranges that it holds concerning the thread's environment, such as any dynamic memory blocks acquired since the thread's inception, plus any valid shared static memory slots. The meaning of "valid" may change throughout the thread's life depending upon context. It may sometimes be allowed to alter a static block of storage, and sometimes not, depending upon the current mode of execution, which may or may not depend on a storage key or supervisor state. [tpl]Citation needed|date=April 2007[/tpl]
It is generally not advisable to use this method of memory protection where adequate facilities exist on a CPU, as this takes valuable processing power from the computer. However, it is generally used for debugging and testing purposes to provide an extra fine level of granularity to otherwise generic storage violations and can indicate precisely which instruction is attempting to overwrite the particular section of storage which may have the same storage key as unprotected storage.

===Capability-based addressing===

Capability-based addressing is a method of memory protection that is unused in modern commercial computers. In this method, pointers are replaced by protected objects (called capabilities) that can only be created via using privileged instructions which may only be executed by the kernel, or some other process authorized to do so.[tpl]citation needed|date=August 2012[/tpl] This effectively lets the kernel control which processes may access which objects in memory, with no need to use separate address spaces or context switches. Only a few commercial products used capability based security: Plessey System 250, IBM System/38, Intel iAPX 432 architecture and KeyKOS. Capability approaches are widely used in research systems such as EROS, Combex DARPA Browser, and E programming language. They are used conceptually as the basis for some virtual machines, most notably Smalltalk and Java. Currently, the DARPA-funded CHERI project at University of Cambridge is working to create a modern capability machine that also supports legacy software.

==Measures==

The protection level of a particular implementation may be measured by how closely it adheres to the principle of minimum privilege.Cook, D.J. Measuring memory protection, accepted for 3rd International Conference on Software Engineering, Atlanta, Georgia, May 1978.

==Memory protection in different operating systems==

Different operating systems use different forms of memory protection or separation. True memory separation was not used in home computer operating systems until OS/2 was released in 1987. On prior systems, such lack of protection was even used as a form of interprocess communication, by sending a pointer between processes. It is possible for processes to access System Memory in the Windows 9x family of Operating Systems.[tpl]cite web|url=http://everything2.com/title/Windows%25209x%2520does%2520not%2520have%2520true%2520memory%2520protection  |title=Windows 9x does not have true memory protection |publisher=Everything2 |date=2000-06-24 |accessdate=2009-04-29[/tpl]
Some operating systems that do implement memory protection include:
On Unix-like systems, the mprotect system call is used to control memory protection.[tpl]cite web|title=mprotect|url=http://pubs.opengroup.org/onlinepubs/009604499/functions/mprotect.html|work=The Open Group Base Specifications Issue 6|publisher=The Open Group[/tpl]

==See also==

==References==

==External links==


