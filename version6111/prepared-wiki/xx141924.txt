[[Database refactoring]]

CATEGORIES: Extreme programming, Databases

A database refactoring is a simple change to a database schema that improves its design while retaining both its behavioral and informational semantics.   A database refactoring is conceptually more difficult than a code refactoring; code refactorings only need to maintain behavioral semantics while database refactorings also must maintain informational semantics.Scott Ambler and Pramod Sadalage (2006). Refactoring databases: Evolutionary database design. Addison-Wesley. ISBN 978-0-321-29353-4
The process of database refactoring is the act of applying database refactorings to evolve an existing database schema (database refactoring is a core practice of evolutionary database design).  You refactor a database schema for one of two reasons: to develop the schema in an evolutionary manner in parallel with the evolutionary design of the rest of your system or to fix design problems with an existing legacy database schema
Database refactoring does not change the way data is interpreted or used and does not fix bugs or add new functionality.  Every single refactoring to a database leaves the system in a working state, thus not causing maintenance lags, provided the meaningful data exists in the production environment.
An example of database refactoring would be splitting an aggregate table into two different tables in the process of database normalization

==Tools==

==See also==

==References==

==External links==


