[[Operator-precedence grammar]]

CATEGORIES: Formal languages

An operator precedence grammar is a kind of grammar for formal languages.
Technically, an operator precedence grammar is a context-free grammar that has the property (among othersAho, Sethi & Ullman 1988, p. 203.)
that no production has either an empty right-hand side or two adjacent nonterminals in its
right-hand side. These properties allow precedence relations to be
defined between the terminals of the grammar. A parser that exploits these relations is considerably simpler than more general-purpose parsers such as LALR parsers. Operator-precedence parsers can be constructed for a large class of context-free grammars.

==Precedence Relations==

Operator precedence grammars rely on the following three precedence relations
between the terminals:Aho, Sethi & Ullman 1988, pp. 203-204.
These operator precedence relations allow to delimit the handles
in the right sentential forms: the interior of the handle, and •> marks the right end. Contrary to other shift-reduce
parsers, all nonterminals are considered equal for the purpose of identifying
handles.Aho, Sethi & Ullman 1988, pp. 205-206.
The relations do not have the same properties as their un-dotted counterparts;
e. g. a =• b does not generally imply b =• a, and b •> a does not follow
from a  a is possible.
Let us assume that between the terminals ai and ai+1 there is
always exactly one precedence relation. Suppose that $ is the end of the string.
Then for all terminals b we define:  $  $. If we
remove all nonterminals and place the correct precedence relation:
 between the remaining terminals, there remain strings
that can be analyzed by an easily developed bottom-up parser.

===Example===

For example, the following operator precedence relations can
be introduced for simple expressions:Aho, Sethi & Ullman 1988, p. 205.
They follow from the following facts:Aho, Sethi & Ullman 1988, p. 204.
The input string
after adding end markers and inserting precedence relations becomes

==Operator Precedence Parsing==

Having precedence relations allows to identify handles as follows:
It is generally not necessary to scan the entire sentential form to find the handle.

==Operator Precedence Parsing AlgorithmAho, Sethi & Ullman 1988, p. 206.==

 Initialize: Set ip to point to the first symbol of w$
 Repeat:
   If $ is on the top of the stack and ip points to $ then return
   else
     Let a be the top terminal on the stack, and b the symbol pointed to by ip
     if a <• b or a =• b then
       push b onto the stack
       advance ip to the next input symbol
     else if a •> b then
       repeat
         pop the stack
       until the top stack terminal is related by <• to the terminal most recently popped
     else error()
   end

==Precedence Functions==

An operator precedence parser usually does not store the precedence
table with the relations, which can get rather large.
Instead, precedence functions f and g are defined.Aho, Sethi & Ullman 1988, pp. 208-209.
They map terminal symbols to integers, and so the precedence relations
between the symbols are implemented by numerical comparison:
f(a) Not every table of precedence relations has precedence functions,
but in practice for most grammars such functions can be
designed.Aho, Sethi & Ullman 1988, p. 209.

===Algorithm for Constructing Precedence FunctionsAho, Sethi & Ullman 1988, pp. 209-210.===

===Example===

Consider the following table (repeated from above):Aho, Sethi & Ullman 1988, p. 210.
Using the algorithm leads to the following graph:
     gid
       \
  fid   f*
     \  /
      g*
     /
   f+  
    | \
    |  g+
    |  |
   g$  f$
from which we extract the following precedence functions from the maximum heights in the directed acyclic graph:

==Operator-precedence languages==

The class of languages described by operator-precedence grammars, i.e., operator-precedence languages, is strictly contained in the class of deterministic context-free languages, and strictly contains visibly pushdown languages.[tpl]harvnb|Crespi Reghizzi|Mandrioli|2012[/tpl]
Operator-precedence languages enjoy many closure properties: union, intersection, complementation,[tpl]harvnb|Crespi Reghizzi|Mandrioli|Martin|1978[/tpl] concatenation, and they are the largest known class closed under all these operations and for which the emptiness problem is decidable. Another peculiar feature of operator-precedence languages is their local parsability,[tpl]harvnb|Barenghi|Crespi Reghizzi|Mandrioli|Pradella|2013[/tpl] that enables efficient parallel parsing.
There are also characterizations based on an equivalent form of automata [tpl]harvnb|Lonati|Mandrioli|Pradella|2011[/tpl]  and monadic second-order logic.[tpl]harvnb|Lonati|Mandrioli|Pradella|2013[/tpl]

==Notes==

==References==

==External links==


