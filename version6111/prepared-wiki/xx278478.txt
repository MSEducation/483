[[Planted motif search]]

CATEGORIES: Bioinformatics, Computational biology

In the field of computational biology, a planted motif search (PMS) also known as a (''l, d'')-motif search (LDMS) is a method for identifying conserved motifs within a set of nucleic acid or peptide sequences.
PMS is known to be NP-complete. The time complexities of most of the planted motif search algorithms depend exponentially on the alphabet size and l. The PMS problem was first introduced by Keich and Pevzner.[tpl]cite journal | author = Keich U, Pevzner PA | title = Finding motifs in the twilight zone | journal = Bioinformatics | volume = 18 | issue = 10 | pages = 1374–1381 |date=October 2002 | pmid = 12376382 | doi = 10.1093/bioinformatics/18.10.1374 [/tpl]
The problem of identifying meaningful patterns (e.g., motifs) from biological data has been studied extensively since they play a vital role in understanding gene function, human disease, and may serve as therapeutic drug targets.

==Description==

The search problem may be summarized as follows:
Input are n strings (s1, s2, … , sn) of length m each from an alphabet Σ and two integers l and d. Find all strings x such that |x| = l and every input string contains at least one variant of x at a Hamming distance of at most d. Each such x is referred to as an (l, d) motif.
For example, if the input strings are GCGCGAT, CACGTGA, and CGGTGCC; l = 3 and d = 1, then GGT is a motif of interest. Note that the first input string has GAT as a substring, the second input string has CGT as a substring, and the third input string has GGT as a substring. GAT is a variant of GGT that is within a Hamming distance of 1 from GGT, etc. Call the variants of a motif that occur in the input strings as instances of the motif. For example, GAT is an instance of the motif GGT that occurs in the first input string.
Zero or more (l, d) motifs are contained in any given set of input strings. Many of the known algorithms for PMS consider DNA strings for which Σ ={G, C, T, A}. There exist algorithms that deal with protein strings as well. The PMS problem is also known as the (l, d)-motif search (LDMS) problem.

==Notation==

The following mathematical notation is often used to describe PMS algorithms.
Assume that S = {s1, s2, s3, …, sn} is the given set of input strings from an alphabet Σ. An l-mer of any string is nothing but a substring of the string of length l. Let dH(a, b) stand for the Hamming distance between any two l-mers a and b. Let a be an l-mer and s be an input string. Then, let dH(a, s) stand for the minimum Hamming distance between a and any l-mer b of s. If a is any l-mer and S is a set of input strings then let dH(a, S) stand for maxsєSdH(a, s). Let u be any l-mer. Then, the d-neighborhood of u, (denoted as Bd(u)), is nothing but the set of all the l-mers v such that dH(u, v) ≤ d. In other words, Bd(u)={v: dH(u, v)≤d}. Refer to any such l-mer v as a d-neighbor of u. Bd(x, y) is used to denote the common d-neighborhood of x and y, where x and y are two l-mers. Bd(x, y) is nothing but the set of all l-mers that are within a distance of d from both x and y. Similarly, Bd(x, y, z), etc. can be defined.

==Algorithms==

The scientific literature describes numerous algorithms for solving the PMS problem. These algorithms can be classified into two major types. Those algorithms that may not return the optimal answer(s) are referred to as approximation algorithms (or heuristic algorithms) and those that always return the optimal answer(s) are called exact algorithms.

===Approximate===

Examples of approximation (or heuristic) algorithms include Random Projection,[tpl]cite journal | author = Buhler J, Tompa M | title = Finding motifs using random projections | journal = J. Comput. Biol. | volume = 9 | issue = 2 | pages = 225–42 | year = 2002 | pmid = 12015879 | doi = 10.1089/10665270252935430 [/tpl] PatternBranching,[tpl]cite journal | author = Price A, Ramabhadran S, Pevzner PA | title = Finding subtle motifs by branching from sample strings | journal = Bioinformatics | volume = 19 Suppl 2 | issue = | pages = ii149–55 |date=October 2003 | pmid = 14534184 | doi = 10.1093/bioinformatics/btg1072 [/tpl] MULTIPROFILER, CONSENSUS,[tpl]cite journal | author = Hertz GZ, Stormo GD | title = Identifying DNA and protein patterns with statistically significant alignments of multiple sequences | journal = Bioinformatics | volume = 15 | issue = 7–8 | pages = 563–77 | year = 1999 | pmid = 10487864 | doi = 10.1093/bioinformatics/15.7.563 [/tpl] and ProfileBranching. These algorithms have been experimentally demonstrated to perform well.

====Random projection====

The algorithm is based on random projections. Let the motif M of interest be an l-mer and C be the collection of all the l-mers from all the n input strings. The algorithm projects these l-mers along k randomly chosen positions (for some appropriate value of k). The projection of each l-mer may be thought of as an integer. The projected values (which are k-mers) are grouped according to their integer values. In other words, hash all the l-mers using the k-mer of any l-mer as its hash value. All the l-mers that have the same hash value fall into the same hash bucket. Since the instances of any (l, d) motif are similar to each other,  many of these instances will fall into the same bucket. Note that the Hamming distance between any two instances of an (l, d) motif is no more than 2d. The key idea of this algorithm is to examine those buckets that have a large number of l-mers in them. For each such bucket, an expectation maximization (EM) algorithm is used to check if an (l, d) motif can be found using the l-mers in the bucket.

====Pattern branching====

===Exact===

Many exact algorithms are known for solving the PMS problem as well. Examples include the ones in (Martinez 1983),[tpl]cite journal | author = Martinez HM | title = An efficient method for finding repeats in molecular sequences | journal = Nucleic Acids Res. | volume = 11 | issue = 13 | pages = 4629–34 |date=July 1983 | pmid = 6866775 | pmc = 326069 | doi = 10.1093/nar/11.13.4629 [/tpl] (Brazma, et al. 1998),[tpl]cite journal | author = Brazma A, Jonassen I, Vilo J, Ukkonen E | title = Predicting gene regulatory elements in silico on a genomic scale | journal = Genome Res. | volume = 8 | issue = 11 | pages = 1202–1215 |date=November 1998 | pmid = 9847082 | pmc = 310790 | doi = 10.1101/gr.8.11.1202 [/tpl] (Galas, et al. 1985),[tpl]cite journal | author = Galas DJ, Eggert M, Waterman MS | title = Rigorous pattern-recognition methods for DNA sequences. Analysis of promoter sequences from Escherichia coli | journal = J. Mol. Biol. | volume = 186 | issue = 1 | pages = 117–28 |date=November 1985 | pmid = 3908689 | doi = 10.1016/0022-2836(85)90262-1 [/tpl] (Sinha, et al. 2000),[tpl]cite journal | author = Sinha S, Tompa M | title = A statistical method for finding transcription factor binding sites | journal = Proc Int Conf Intell Syst Mol Biol | volume = 8 | issue = | pages = 344–54 | year = 2000 | pmid = 10977095 | doi =  [/tpl] (Staden 1989),[tpl]cite journal | author = Staden R | title = Methods for discovering novel motifs in nucleic acid sequences | journal = Comput. Appl. Biosci. | volume = 5 | issue = 4 | pages = 293–8 |date=October 1989 | pmid = 2684350 | doi = 10.1093/bioinformatics/5.4.293 [/tpl] (Tompa 1999),[tpl]cite journal | author = Tompa M | title = An exact method for finding short motifs in sequences, with application to the ribosome binding site problem | journal = Proc Int Conf Intell Syst Mol Biol | volume = | issue = | pages = 262–71 | year = 1999 | pmid = 10786309 | doi =  [/tpl] (Helden, et al. 1998)[tpl]cite journal | author = van Helden J, André B, Collado-Vides J | title = Extracting regulatory sites from the upstream region of yeast genes by computational analysis of oligonucleotide frequencies | journal = J. Mol. Biol. | volume = 281 | issue = 5 | pages = 827–42 |date=September 1998 | pmid = 9719638 | doi = 10.1006/jmbi.1998.1947 [/tpl] (Rajasekaran, et al.),[tpl]cite journal | author = Rajasekaran S, Balla S, Huang CH | title = Exact algorithms for planted motif problems | journal = J. Comput. Biol. | volume = 12 | issue = 8 | pages = 1117–1128 |date=October 2005 | pmid = 16241901 | doi = 10.1089/cmb.2005.12.1117 [/tpl] (Davila and Rajasekaran 2006),[tpl]cite journal| author = Davila J, Rajasekaran S | title = Extending Pattern Branching to Handle Challenging Instances | journal = BioInformatics and BioEngineering | year = 2006 | pages = 65–69 | doi = 10.1109/BIBE.2006.253317| isbn = 0-7695-2727-2 [/tpl]  (Davila, Balla, and Rajasekaran 2006),[tpl]cite journal | author = Davila J, Balla S, Rajasekaran S | title = Space and time efficient algorithms for planted motif search | journal = Proc. 6th International Conference on Computational Science (ICCS 2006)/ 2nd International Workshop on Bioinformatics Research and Applications (IWBRA 2006) LNCS 3992 | year = 2006 | url = http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.94.4572&rep=rep1&type=pdf [/tpl]  Voting[tpl]cite journal| author = Chin FYL, Leung HCM | title = Voting algorithms for discovering long motifs | journal = Proceedings of the Third Asia-Pacific Bioinformatics Conference (APBC) | year = 2005 | pages = 261–271| doi = 10.1142/9781860947322_0026| isbn = 978-1-86094-477-2 [/tpl] and RISOTTO.[tpl]cite journal | author = Pisanti N, Carvalho A, Marsan L, Sagot MF | title = Risotto: Fast extraction of motifs with mismatches | journal = Proceedings of the 7th Latin American Theoretical Informatics Symposium | pages = 757–768 | year = 2006 | url = http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.60.1028&rep=rep1&type=pdf [/tpl]

====WINNOWER and SP-STAR====

If M is an (l, d) motif and if M1, M2, …, and Mn are instances of M in the input strings, then, clearly, these instances will form a clique in G. The WINNOWER algorithm has two phases. In the first phase, it identifies large cliques in G. In the second phase each such clique is examined to see if a motif can be extracted from this clique.
Another algorithm called SP-STAR, is faster than WINNOWER and uses less memory. WINNOWER algorithm treats all the edges of G equally without distinguishing between edges based on similarities. SP-STAR scores the l-mers of C as well as the edges of G appropriately and hence eliminates more edges than WINNOWER per iteration.
(Bailey and Elkan, 1994)[tpl]cite journal | author = Bailey TL, Elkan C | title = Fitting a mixture model by expectation maximization to discover motifs in biopolymers | journal = Proc Int Conf Intell Syst Mol Biol | volume = 2 | issue = | pages = 28–36 | year = 1994 | pmid = 7584402 | doi =  [/tpl] employs expectation maximization algorithms while Gibbs sampling is used by (Lawrence et al., 1993).[tpl]cite journal | author = Lawrence CE, Altschul SF, Boguski MS, Liu JS, Neuwald AF, Wootton JC | title = Detecting subtle sequence signals: a Gibbs sampling strategy for multiple alignment | journal = Science | volume = 262 | issue = 5131 | pages = 208–14 |date=October 1993 | pmid = 8211139 | doi = 10.1126/science.8211139 [/tpl] MULTIPROFILER MEME,[tpl]cite journal | author=Bailey TL, Elkan C|coauthors=Elkan, Charles | title = Unsupervised learning of multiple motifs in biopolymers using expectation maximization | journal = Machine Learning |date=January 1995 | volume = 21 | issue = 1–2 |pages = 51–80 | doi = 10.1007/BF00993379 [/tpl] are also known PMS algorithms.

====PMS series====

In the last decade a series of algorithms with PMS as a prefix has been developed in the lab of Rajasekaran. Some of these algorithms are described below.

=====PMS0=====

=====PMS1=====

This algorithm is based on radix sorting and has the following steps.

=====PMS2=====

Let the motif M of interest be of length l. If M occurs in every input string then any substring of M also occurs in every input string. Here occurrence means occurrence within a Hamming distance of d. It follows that there are at least l-k+1 strings each of length k (for k ≤ l) such that each of these occurs in every input string.
Let Q be a collection of k-mers in M. Note that, in every input string si, there will be at least one position ij such that a k-mer of Q occurs starting from ij. Another k-mer of Q occurs starting from ij +1 and so on, with the last k-mer occurring at ij + l – k. An l-mer can be obtained by combining these k-mers that occur starting from each such ij.
PMS2 works as follows. In the first phase find all the (k, d) motifs present in all the input strings (for some appropriate value of k
=====PMS3=====

This algorithm enables one to handle large values of d. Let d’=d/2. Let M be the motif to be found with |M|=l=2l’ for some integer l’. Let M1 refer to the first half of M and M2 be the next half. Let s= a1a2…am be one of the input strings. M occurs in every input string. Let the occurrence of M (within a Hamming distance of d) in s start at position i. Let s’=aiai+1…ai+l’-1  and s’’ =ai+l’…ai+l-1.
It is clear that either the Hamming distance between M1 and s’ is at most d’ or the Hamming distance between M2 and s’’ is at most d’. Either M1 or M2 occurs in every input string at a Hamming distance of at most d’. As a result, in at least n’ strings (where n’ = n/2) either M1 or M2  occurs with a Hamming distance of at most d.
The algorithm first obtains all the (l’, d’)-motifs that occur in at least n/2 of the input strings. It then uses these motifs and the above observations to identify all the (l, d)-motifs present in the input strings.

=====PMSPrune=====

This algorithm introduces a tree structure for the motif candidates and uses a branch-and-bound algorithm to reduce the search space.[tpl]cite journal | author = Davila J, Balla S, Rajasekaran S | title = Fast and practical algorithms for planted (l, d) motif search | journal = IEEE/ACM Trans Comput Biol Bioinform | volume = 4 | issue = 4 | pages = 544–52 | year = 2007 | pmid = 17975266 | doi = 10.1109/TCBB.2007.70241 [/tpl] Let S = {s1, s2, …, sn} be a given set of input strings.
PMSprune follows the same strategy as PMS0: For every l-mer y in s1, it generates the set of neighbors of y and, for each of them, checks whether this is a motif or not. Some key steps in the algorithm are:

=====PMS4=====

PMS4[tpl]cite journal | author = Rajasekaran S, Dinh H | title = A speedup technique for (l, d)-motif finding algorithms | journal = BMC Res Notes | volume = 4| pages = 54 | year = 2011 | pmid = 21385438 | pmc = 3063805 | doi = 10.1186/1756-0500-4-54 [/tpl] is a technique that can be used to speedup any algorithm for the PMS problem. In many of the above algorithms there are two phases. In the first phase we come up with a set of candidate motifs and in the second phase check, for each candidate motif, if it is a valid (l, d)-motif. For each candidate motif it takes O(mnl) time to check if it is a valid motif or not. PMS4 employs a similar two phase strategy. These phases are explained below. Let A be any PMS algorithm.

=====PMS5 and PMS6=====

Algorithm PMS6[tpl]cite journal | author = Bandyopadhyay S, Sahni S, Rajasekaran S | title = PMS6: A fast algorithm for motif discovery | journal = IEEE 2nd International Conference on Computational Advances in Bio and medical Sciences | volume = | issue = | pages = 1| year = 2012 | pmid = | pmc = | doi = 10.1109/ICCABS.2012.6182627 | isbn = 978-1-4673-1321-6 [/tpl] is an extension of PMS5 that improves the preprocessing step and also it uses efficient hashing techniques to store the lookup tables. As a result, it is typically faster than PMS5.
Shibdas Bandyopadhyay, Sartaj Sahni, Sanguthevar Rajasekaran, "PMS6: A fast algorithm for motif discovery," iccabs, pp.1-6, 2012 IEEE 2nd International Conference on Computational Advances in Bio and medical Sciences, 2012

=====qPMSPrune and qPMS7=====

Given a set S={s1, s2, …, sn} of strings, and integers l, d, and q, an (l, d, q)-motif is defined to be a string M of length l that occurs in at least q of the n input strings within a Hamming distance of d. The qPMS (Quorum Planted Motif Search) problem is to find all the (l, d, q)-motifs present in the input strings. The qPMS problem captures the nature of motifs more precisely than the PMS problem does because, in practice, some motifs may not have motif instances in all of the input strings.

====RISOTTO====

RISOTTO employs a suffix tree to identify the (l, d)-motifs. It is somewhat similar to PMS0. For every l-mer in s1, it generates the d-neighborhood and for every l-mer in this neighborhood it walks through a suffix tree to check if this l-mer is an (l, d)-motif.
Voting is similar to PMS1. Instead of using radix sorting, it uses hashing to compute Li’s and their intersections.

===Relative performance===

PMS algorithms are typically tested on random benchmark data generated as follows: Twenty strings each of length 600 are generated randomly from the alphabet of interest. The motif M is also generated randomly and planted in each of the input strings within a Hamming distance of d. The motif instances are also generated randomly. Certain instances of the (l, d)-motif problem have been identified to be challenging. For a given value of l, the instance (l, d) is called challenging if d is the smallest integer for which the expected number of (l, d)-motifs that occur by random chance (in addition to the planted one) is one or more. For example, the following instances are challenging: (9, 2), (11, 3), (13, 4), (15, 5), (17, 6), (19, 7), etc. The performance of PMS algorithms is customarily shown only for challenging instances. Following is a table of time comparison of different PMS algorithms on the challenging instances of DNA sequences for the special case. This table is taken from the paper qPMS7. In this table several algorithms have been compared: qPMSPrune, qPMSPruneI, Pampa,[tpl]cite journal | author = Davila J, Balla S, Rajasekaran S | title = Pampa: An improved branch and bound algorithm for planted (l, d) motif search | journal = Technical Report | year = 2007 | url = http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.93.6500&rep=rep1&type=pdf [/tpl] Voting, RISOTTO, PMS5, PMS6, qPMS7.
In the following table, the alphabet ∑={A,C,G,T}, n=20, m=600, and q=n=20.

==References==

==External links==


