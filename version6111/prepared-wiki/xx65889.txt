</ref>  In sequential logic, information from past inputs is stored in electronic memory elements, such as [[Flip-flop (electronics)|flip-flops]] and [[latch (electronics)|latches]].  The stored contents of these memory elements, at a given point in time, is collectively referred to as the circuit's "''state''" and contains all the information about the past to which the circuit has access.<ref name="Srinath">
[/ref]    
For example, the state of a microprocessor (computer chip) is the contents of all the memory elements in it: the accumulators, storage registers, data caches, and flags.  When computers such as laptops go into a "hibernation" mode to save energy by shutting down the processor, the state of the processor is stored on the computer's disk, so it can be restored when the computer comes out of hibernation, and the processor can take up operations where it left off.

==Program state==

Similarly, a computer program stores data in variables, which represent storage locations in the computer's memory.  The contents of these memory locations, at any given point in the program's execution, is called the program's state.[ref]
</ref><ref name="Misra">
</ref><ref name="Prata">
</ref> 
Imperative programming is a programming paradigm (way of designing a programming language)  that describes computation in terms of the program state and statements that change the program state.  In contrast, in declarative programming languages the program describes the desired results, and doesn't specify changes to the state directly. 
A more specialized definition of state is used in some computer programs that operate serially (sequentially) on streams of data, such as parsers, firewalls, communication protocols  and encryption programs.  In some of these programs, information about previous data characters or packets received is stored in variables and used to affect the processing of the current character or packet.  This is called a "stateful protocol" and the data carried over from the previous processing cycle is called the "state".   In others, the program has no information about the previous data stream and starts "fresh" with each data input; this is called a "stateless protocol".

==Finite state machines==

The output of a sequential circuit or computer program at any time is completely determined by its current inputs and current state.  Since each binary memory element has only two possible states, 0 or 1, the total number of different states a circuit can assume is finite, and fixed by the number of memory elements.  If there are N binary memory elements, a digital circuit can have at most 2N distinct states.  The concept of state is formalized in an abstract mathematical model of computation called a finite state machine,  used to design both sequential digital circuits and computer programs.

==Types of states==

Following states are distinguished:

==See also==

==References==


